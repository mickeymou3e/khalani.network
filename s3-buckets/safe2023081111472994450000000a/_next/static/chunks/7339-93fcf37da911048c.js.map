{"version":3,"file":"static/chunks/7339-93fcf37da911048c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/system/esm/Box/Box.js","webpack://_N_E/./src/components/common/InfiniteScroll/index.tsx","webpack://_N_E/./src/components/common/PaginatedTxns/SkeletonTxList.tsx","webpack://_N_E/./src/components/safe-apps/utils.ts","webpack://_N_E/./src/components/safe-messages/Msg/index.tsx","webpack://_N_E/./src/components/safe-messages/DecodedMsg/index.tsx","webpack://_N_E/./public/images/messages/dot.svg","webpack://_N_E/./src/components/safe-messages/MsgSigners/index.tsx","webpack://_N_E/./node_modules/@swc/helpers/src/_extends.mjs","webpack://_N_E/./public/images/messages/required.svg","webpack://_N_E/./src/hooks/messages/useDecodedSafeMessage.ts","webpack://_N_E/./src/services/safe-messages/safeMsgNotifications.ts","webpack://_N_E/./src/services/safe-messages/safeMsgSender.ts","webpack://_N_E/./src/hooks/messages/useSyncSafeMessageSigner.ts","webpack://_N_E/./src/components/tx/SuccessMessage/index.tsx","webpack://_N_E/./src/components/safe-messages/InfoBox/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/SignMessage.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/index.tsx","webpack://_N_E/./src/hooks/useHighlightHiddenTab.ts","webpack://_N_E/./src/utils/safe-messages.ts","webpack://_N_E/./src/utils/web3.ts","webpack://_N_E/./src/components/safe-messages/DecodedMsg/styles.module.css","webpack://_N_E/./src/components/safe-messages/InfoBox/styles.module.css","webpack://_N_E/./src/components/safe-messages/Msg/styles.module.css","webpack://_N_E/./src/components/safe-messages/MsgSigners/styles.module.css","webpack://_N_E/./src/components/tx/SuccessMessage/styles.module.css"],"sourcesContent":["'use client';\n\nimport PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import { useEffect, useRef, type ReactElement } from 'react'\nimport useOnceVisible from '@/hooks/useOnceVisible'\n\nconst InfiniteScroll = ({ onLoadMore }: { onLoadMore: () => void }): ReactElement => {\n  const elementRef = useRef<HTMLDivElement | null>(null)\n  const isVisible = useOnceVisible(elementRef)\n\n  useEffect(() => {\n    if (isVisible) {\n      onLoadMore()\n    }\n  }, [isVisible, onLoadMore])\n\n  return <div ref={elementRef} />\n}\n\nexport default InfiniteScroll\n","import { Skeleton } from '@mui/material'\n\nconst SkeletonTxList = () => {\n  const label = <Skeleton variant=\"text\" width=\"10em\" sx={{ mt: '20px', mb: 1 }} />\n\n  const item = (i: number) => <Skeleton key={String(i)} height={54} sx={{ mb: '6px' }} variant=\"rounded\" />\n\n  return (\n    <>\n      {label}\n      {Array.from(Array(3).keys()).map(item)}\n\n      {label}\n      {Array.from(Array(2).keys()).map(item)}\n    </>\n  )\n}\n\nexport default SkeletonTxList\n","import { isHexString, toUtf8String } from 'ethers/lib/utils'\nimport { SafeAppAccessPolicyTypes } from '@safe-global/safe-gateway-typescript-sdk'\nimport { SafeAppFeatures } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { SafeAppData } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { BaseTransaction, ChainInfo } from '@safe-global/safe-apps-sdk'\n\nimport { formatVisualAmount } from '@/utils/formatters'\nimport { validateAddress } from '@/utils/validation'\nimport type { SafeAppDataWithPermissions } from './types'\nimport { SafeAppsTag } from '@/config/constants'\n\nconst validateTransaction = (t: BaseTransaction): boolean => {\n  if (!['string', 'number'].includes(typeof t.value)) {\n    return false\n  }\n\n  if (typeof t.value === 'string' && !/^(0x)?[0-9a-f]+$/i.test(t.value)) {\n    return false\n  }\n\n  const isAddressValid = validateAddress(t.to) === undefined\n  return isAddressValid && !!t.data && typeof t.data === 'string'\n}\n\nexport const isTxValid = (txs: BaseTransaction[]) => txs.length && txs.every((t) => validateTransaction(t))\n\nexport const getInteractionTitle = (value?: string, chain?: ChainInfo) => {\n  const { decimals, symbol } = chain!.nativeCurrency\n  return `Interact with${\n    Number(value) !== 0 ? ` (and send ${formatVisualAmount(value || 0, decimals)} ${symbol} to)` : ''\n  }:`\n}\n\n/**\n * If message is a hex value and is Utf8 encoded string we decode it, else we return the raw message\n * @param {string} message raw input message\n * @returns {string}\n */\nexport const getDecodedMessage = (message: string): string => {\n  if (isHexString(message)) {\n    // If is a hex string we try to extract a message\n    try {\n      return toUtf8String(message)\n    } catch (e) {\n      // the hex string is not UTF8 encoding so we will return the raw message.\n    }\n  }\n\n  return message\n}\n\nexport const getLegacyChainName = (chainName: string, chainId: string): string => {\n  let network = chainName\n\n  switch (chainId) {\n    case '1':\n      network = 'MAINNET'\n      break\n    case '100':\n      network = 'XDAI'\n  }\n\n  return network\n}\n\nexport const getEmptySafeApp = (url = ''): SafeAppDataWithPermissions => {\n  return {\n    id: Math.random(),\n    url,\n    name: 'unknown',\n    iconUrl: '/images/apps/apps-icon.svg',\n    description: '',\n    chainIds: [],\n    accessControl: {\n      type: SafeAppAccessPolicyTypes.NoRestrictions,\n    },\n    tags: [],\n    safeAppsPermissions: [],\n    features: [],\n    socialProfiles: [],\n    developerWebsite: '',\n  }\n}\n\nexport const getOrigin = (url?: string): string => {\n  if (!url) return ''\n\n  const { origin } = new URL(url)\n\n  return origin\n}\n\nexport const isOptimizedForBatchTransactions = (safeApp: SafeAppData) =>\n  safeApp.features?.includes(SafeAppFeatures.BATCHED_TRANSACTIONS)\n\n// some categories are used internally and we dont want to display them in the UI\nexport const filterInternalCategories = (categories: string[]): string[] => {\n  const internalCategories = Object.values(SafeAppsTag)\n  return categories.filter((tag) => !internalCategories.some((internalCategory) => tag === internalCategory))\n}\n\n// Get unique tags from all apps\nexport const getUniqueTags = (apps: SafeAppData[]): string[] => {\n  // Get the list of categories from the safeAppsList\n  const tags = apps.reduce<Set<string>>((result, app) => {\n    app.tags.forEach((tag) => result.add(tag))\n    return result\n  }, new Set())\n\n  // Filter out internal tags\n  const filteredTags = filterInternalCategories(Array.from(tags))\n\n  // Sort alphabetically\n  return filteredTags.sort()\n}\n","import { TextField } from '@mui/material'\nimport { useMemo } from 'react'\nimport type { ReactElement } from 'react'\nimport type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\n\nimport css from './styles.module.css'\n\nconst MAX_ROWS = 10\n\nconst Msg = ({ message }: { message: SafeMessage['message'] }): ReactElement => {\n  const isTextMessage = typeof message === 'string'\n\n  const readableData = useMemo(() => {\n    return isTextMessage ? message : JSON.stringify(message, null, 2)\n  }, [isTextMessage, message])\n\n  return (\n    <TextField\n      maxRows={MAX_ROWS}\n      multiline\n      disabled\n      fullWidth\n      className={css.msg}\n      inputProps={{\n        value: readableData,\n      }}\n    />\n  )\n}\n\nexport default Msg\n","import { generateDataRowValue, TxDataRow } from '@/components/transactions/TxDetails/Summary/TxDataRow'\nimport { Value } from '@/components/transactions/TxDetails/TxData/DecodedData/ValueArray'\nimport { isByte } from '@/utils/transaction-guards'\nimport { type EIP712Normalized, normalizeTypedData } from '@/utils/web3'\nimport { Box, Typography } from '@mui/material'\nimport type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { ErrorBoundary } from '@sentry/react'\nimport classNames from 'classnames'\nimport { isAddress } from 'ethers/lib/utils'\nimport type { ReactElement } from 'react'\nimport Msg from '../Msg'\nimport css from './styles.module.css'\n\nconst EIP712_DOMAIN_TYPE = 'EIP712Domain'\n\nconst DecodedTypedObject = ({ displayedType, eip712Msg }: { displayedType: string; eip712Msg: EIP712Normalized }) => {\n  const { types, message: msg, domain } = eip712Msg\n  const findType = (paramName: string) => types[displayedType].find((paramType) => paramType.name === paramName)?.type\n  return (\n    <Box>\n      <Typography\n        textTransform=\"uppercase\"\n        fontWeight={700}\n        variant=\"caption\"\n        sx={({ palette }) => ({ color: `${palette.border.main}` })}\n      >\n        {displayedType}\n      </Typography>\n\n      {Object.entries(displayedType === EIP712_DOMAIN_TYPE ? domain : msg).map((param, index) => {\n        const [paramName, paramValue] = param\n        const type = findType(paramName) || 'string'\n\n        const isArrayValueParam = Array.isArray(paramValue)\n        const isNested = Object.keys(types).some((typeName) => typeName === type || `${typeName}[]` === type)\n        const inlineType = isAddress(paramValue as string) ? 'address' : isByte(type) ? 'bytes' : undefined\n        const paramValueAsString = typeof paramValue === 'string' ? paramValue : JSON.stringify(paramValue, null, 2)\n        return (\n          <TxDataRow key={`${displayedType}_param-${index}`} title={`${param[0]}(${type}):`}>\n            {isNested ? (\n              <Box\n                className={css.nestedMsg}\n                sx={{\n                  borderRadius: (theme) => `${theme.shape.borderRadius}px`,\n                }}\n              >\n                {paramValueAsString}\n              </Box>\n            ) : isArrayValueParam ? (\n              <Value method={displayedType} type={type} value={paramValueAsString} />\n            ) : (\n              generateDataRowValue(paramValueAsString, inlineType, true)\n            )}\n          </TxDataRow>\n        )\n      })}\n    </Box>\n  )\n}\n\nexport const DecodedMsg = ({\n  message,\n  isInModal = false,\n}: {\n  message: SafeMessage['message'] | undefined\n  isInModal?: boolean\n}): ReactElement | null => {\n  const isTextMessage = typeof message === 'string'\n\n  if (!message) {\n    return null\n  }\n  if (isTextMessage) {\n    return <Msg message={message} />\n  }\n\n  // Normalize message such that we know the primaryType\n  const normalizedMsg = normalizeTypedData(message)\n\n  return (\n    <Box\n      className={classNames(css.container, { [css.scrollable]: isInModal })}\n      sx={{\n        borderRadius: (theme) => `${theme.shape.borderRadius}px`,\n      }}\n    >\n      <ErrorBoundary fallback={<div>Error decoding message</div>}>\n        <DecodedTypedObject eip712Msg={normalizedMsg} displayedType={EIP712_DOMAIN_TYPE} />\n        <DecodedTypedObject eip712Msg={normalizedMsg} displayedType={normalizedMsg.primaryType} />\n      </ErrorBoundary>\n    </Box>\n  )\n}\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nvar SvgDot = function SvgDot(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 10,\n    viewBox: \"0 0 10 10\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 9.375C7.41625 9.375 9.375 7.41625 9.375 5C9.375 2.58375 7.41625 0.625 5 0.625C2.58375 0.625 0.625 2.58375 0.625 5C0.625 7.41625 2.58375 9.375 5 9.375Z\",\n    fill: \"currentColor\"\n  })));\n};\nexport default SvgDot;","import { useState, type ReactElement } from 'react'\nimport { Box, Link, List, ListItem, ListItemIcon, ListItemText, Skeleton, SvgIcon, Typography } from '@mui/material'\nimport { SafeMessageStatus } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport CircleOutlinedIcon from '@mui/icons-material/CircleOutlined'\n\nimport CreatedIcon from '@/public/images/messages/created.svg'\nimport SignedIcon from '@/public/images/messages/signed.svg'\nimport DotIcon from '@/public/images/messages/dot.svg'\nimport EthHashInfo from '@/components/common/EthHashInfo'\n\nimport css from '@/components/safe-messages/MsgSigners/styles.module.css'\nimport txSignersCss from '@/components/transactions/TxSigners/styles.module.css'\n\n// Icons\n\nconst Created = () => (\n  <SvgIcon\n    component={CreatedIcon}\n    inheritViewBox\n    className={css.icon}\n    sx={{\n      '& path:last-of-type': { fill: ({ palette }) => palette.background.paper },\n    }}\n  />\n)\n\nconst Signed = () => (\n  <SvgIcon\n    component={SignedIcon}\n    inheritViewBox\n    className={css.icon}\n    sx={{\n      '& path:last-of-type': { fill: ({ palette }) => palette.background.paper },\n    }}\n  />\n)\n\nconst Dot = () => <SvgIcon component={DotIcon} inheritViewBox className={css.dot} />\n\nconst shouldHideConfirmations = (msg: SafeMessage): boolean => {\n  const isConfirmed = msg.status === SafeMessageStatus.CONFIRMED\n\n  // Threshold reached or more than 3 confirmations\n  return isConfirmed || msg.confirmations.length > 3\n}\n\nexport const MsgSigners = ({\n  msg,\n  showOnlyConfirmations = false,\n  showMissingSignatures = false,\n  backgroundColor,\n}: {\n  msg: SafeMessage\n  showOnlyConfirmations?: boolean\n  showMissingSignatures?: boolean\n  backgroundColor?: string\n}): ReactElement => {\n  const [hideConfirmations, setHideConfirmations] = useState<boolean>(shouldHideConfirmations(msg))\n\n  const toggleHide = () => {\n    setHideConfirmations((prev) => !prev)\n  }\n\n  const { confirmations, confirmationsRequired, confirmationsSubmitted } = msg\n\n  const missingConfirmations = [...new Array(Math.max(0, confirmationsRequired - confirmationsSubmitted))]\n\n  const isConfirmed = msg.status === SafeMessageStatus.CONFIRMED\n\n  return (\n    <List className={css.signers}>\n      {!showOnlyConfirmations && (\n        <ListItem>\n          <ListItemIcon>\n            <Created />\n          </ListItemIcon>\n          <ListItemText primaryTypographyProps={{ fontWeight: 700 }}>Created</ListItemText>\n        </ListItem>\n      )}\n      <ListItem>\n        <ListItemIcon sx={{ backgroundColor }}>\n          <Signed />\n        </ListItemIcon>\n        <ListItemText primaryTypographyProps={{ fontWeight: 700 }}>\n          Confirmations{' '}\n          <Box component=\"span\" className={txSignersCss.confirmationsTotal}>\n            ({`${confirmationsSubmitted} of ${confirmationsRequired}`})\n          </Box>\n        </ListItemText>\n      </ListItem>\n      {!hideConfirmations &&\n        confirmations.map(({ owner }) => (\n          <ListItem key={owner.value} sx={{ py: 0 }}>\n            <ListItemIcon sx={{ backgroundColor }}>\n              <Dot />\n            </ListItemIcon>\n            <ListItemText>\n              <EthHashInfo address={owner.value} name={owner.name} hasExplorer showCopyButton />\n            </ListItemText>\n          </ListItem>\n        ))}\n      {!showOnlyConfirmations && confirmations.length > 0 && (\n        <ListItem>\n          <ListItemIcon sx={{ backgroundColor: backgroundColor }}>\n            <Dot />\n          </ListItemIcon>\n          <ListItemText>\n            <Link component=\"button\" onClick={toggleHide} fontSize=\"medium\">\n              {hideConfirmations ? 'Show all' : 'Hide all'}\n            </Link>\n          </ListItemText>\n        </ListItem>\n      )}\n      {showMissingSignatures &&\n        missingConfirmations.map((_, idx) => (\n          <ListItem key={`skeleton${idx}`} sx={{ py: 0 }}>\n            <ListItemIcon sx={{ backgroundColor }}>\n              <SvgIcon component={CircleOutlinedIcon} className={css.dot} color=\"border\" fontSize=\"small\" />\n            </ListItemIcon>\n            <ListItemText>\n              <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" gap={1}>\n                <Skeleton variant=\"circular\" width={36} height={36} />\n                <Typography variant=\"body2\" color={'text.secondary'}>\n                  Confirmation #{idx + 1 + confirmationsSubmitted}\n                </Typography>\n              </Box>\n            </ListItemText>\n          </ListItem>\n        ))}\n      {isConfirmed && (\n        <ListItem>\n          <ListItemIcon sx={{ backgroundColor }}>\n            <Dot />\n          </ListItemIcon>\n          <ListItemText>Confirmed</ListItemText>\n        </ListItem>\n      )}\n    </List>\n  )\n}\n\nexport default MsgSigners\n","function extends_() {\n  extends_ = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_.apply(this, arguments);\n}\n\nexport default function _extends() {\n  return extends_.apply(this, arguments);\n}\n","var _path, _path2, _path3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nvar SvgRequired = function SvgRequired(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M16.523 27.1792L16.5323 28.9685C16.5336 29.1699 16.6963 29.3325 16.8976 29.3325H18.675C18.7723 29.3325 18.8656 29.2939 18.935 29.2259L24.3057 23.8539C24.5163 23.6432 24.5163 23.3005 24.3057 23.0899L22.7296 21.5139C22.5376 21.3219 22.2257 21.3219 22.0337 21.5139L16.6296 26.9192C16.5603 26.9872 16.5216 27.0819 16.523 27.1792\",\n    className: \"illustration-light-fill\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M25.912 22.2467L27.884 20.2761C28.032 20.1281 28.032 19.8867 27.884 19.7387L26.1146 17.9694C25.9666 17.8214 25.7253 17.8214 25.5773 17.9694L23.6066 19.9414C23.4573 20.0894 23.4573 20.3307 23.6066 20.4787L25.376 22.2467C25.524 22.3947 25.764 22.3947 25.912 22.2467\",\n    className: \"illustration-light-fill\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M17.3312 10.6934V6.44008L21.5672 10.6721L17.3312 10.6934ZM25.3338 14.6654V14.6601V14.6547V11.1627C25.3338 10.8427 25.2058 10.5374 24.9792 10.3121L17.7365 3.07608C17.4738 2.81341 17.1192 2.66675 16.7485 2.66675H6.66715C5.19249 2.66675 4.00049 3.86008 4.00049 5.33341V26.6667C4.00049 28.1387 5.19249 29.3334 6.66715 29.3334H11.9858C11.9912 29.3334 11.9952 29.3361 12.0005 29.3361C12.7378 29.3361 13.3338 28.7387 13.3338 28.0027C13.3338 27.2667 12.7378 26.6694 12.0005 26.6694V26.6667H6.66715V5.33341H14.6645V10.6934C14.6645 12.1454 15.8485 13.3267 17.3032 13.3267H22.6672V14.6721H22.6698C22.6778 15.4027 23.2685 15.9934 24.0005 15.9934C24.7338 15.9934 25.3245 15.4027 25.3312 14.6721H25.3338V14.6654Z\",\n    className: \"illustration-light-fill\"\n  })));\n};\nexport default SvgRequired;","import { getDecodedMessage } from '@/components/safe-apps/utils'\nimport { generateSafeMessageMessage, generateSafeMessageHash } from '@/utils/safe-messages'\nimport type { EIP712TypedData, SafeInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useMemo } from 'react'\n\n/**\n * Returns the decoded message, the hash of the `message` and the hash of the `safeMessage`.\n * The `safeMessageMessage` is the value inside the SafeMessage and the `safeMessageHash` gets signed if the connected wallet does not support `eth_signTypedData`.\n *\n * @param message message as string, UTF-8 encoded hex string or EIP-712 Typed Data\n * @param safe SafeInfo of the opened Safe\n * @returns `{\n *   decodedMessage,\n *   safeMessageMessage,\n *   safeMessageHash\n * }`\n */\nconst useDecodedSafeMessage = (\n  message: string | EIP712TypedData,\n  safe: SafeInfo,\n): { decodedMessage: string | EIP712TypedData; safeMessageMessage: string; safeMessageHash: string } => {\n  // Decode message if UTF-8 encoded\n  const decodedMessage = useMemo(() => {\n    return typeof message === 'string' ? getDecodedMessage(message) : message\n  }, [message])\n\n  // Get `SafeMessage` message\n  const safeMessageMessage = useMemo(() => {\n    return generateSafeMessageMessage(decodedMessage)\n  }, [decodedMessage])\n\n  // Get `SafeMessage` hash\n  const safeMessageHash = useMemo(() => {\n    return generateSafeMessageHash(safe, decodedMessage)\n  }, [safe, decodedMessage])\n\n  return {\n    decodedMessage,\n    safeMessageMessage,\n    safeMessageHash,\n  }\n}\n\nexport default useDecodedSafeMessage\n","import { getSafeMessage, SafeMessageListItemType, type SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { logError, Errors } from '../exceptions'\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\n\nconst isMessageFullySigned = (message: SafeMessage): message is SafeMessage & { preparedSignature: string } => {\n  return message.confirmationsSubmitted >= message.confirmationsRequired && !!message.preparedSignature\n}\n\n/**\n * Dispatches a notification including the `preparedSignature` of the message if it is fully signed.\n *\n * @param chainId\n * @param safeMessageHash\n * @param onClose\n * @param requestId\n */\nexport const dispatchPreparedSignature = async (\n  chainId: string,\n  safeMessageHash: string,\n  onClose: () => void,\n  requestId?: string,\n) => {\n  let message: SafeMessage | undefined\n  try {\n    const fetchedMessage = await getSafeMessage(chainId, safeMessageHash)\n\n    // fetchedMessage does not have a type because it is explicitly a message\n    message = { ...fetchedMessage, type: SafeMessageListItemType.MESSAGE }\n  } catch (err) {\n    logError(Errors._613, err)\n    throw err\n  }\n\n  if (isMessageFullySigned(message)) {\n    safeMsgDispatch(SafeMsgEvent.SIGNATURE_PREPARED, {\n      messageHash: safeMessageHash,\n      requestId,\n      signature: message.preparedSignature,\n    })\n    onClose()\n  }\n}\n","import { proposeSafeMessage, confirmSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { SafeInfo, SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { isObjectEIP712TypedData } from '@safe-global/safe-apps-sdk'\nimport type { OnboardAPI } from '@web3-onboard/core'\n\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\nimport { generateSafeMessageHash, tryOffChainMsgSigning } from '@/utils/safe-messages'\nimport { normalizeTypedData } from '@/utils/web3'\nimport { getAssertedChainSigner } from '@/services/tx/tx-sender/sdk'\nimport { asError } from '../exceptions/utils'\n\nexport const dispatchSafeMsgProposal = async ({\n  onboard,\n  safe,\n  message,\n  safeAppId,\n}: {\n  onboard: OnboardAPI\n  safe: SafeInfo\n  message: SafeMessage['message']\n  safeAppId?: number\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(onboard, safe.chainId)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    let normalizedMessage = message\n    if (isObjectEIP712TypedData(message)) {\n      normalizedMessage = normalizeTypedData(message)\n    }\n\n    await proposeSafeMessage(safe.chainId, safe.address.value, {\n      message: normalizedMessage,\n      signature,\n      safeAppId,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.PROPOSE, {\n    messageHash,\n  })\n}\n\nexport const dispatchSafeMsgConfirmation = async ({\n  onboard,\n  safe,\n  message,\n}: {\n  onboard: OnboardAPI\n  safe: SafeInfo\n  message: SafeMessage['message']\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(onboard, safe.chainId)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    await confirmSafeMessage(safe.chainId, messageHash, {\n      signature,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE, {\n    messageHash,\n  })\n}\n","import { asError } from '@/services/exceptions/utils'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { dispatchSafeMsgProposal, dispatchSafeMsgConfirmation } from '@/services/safe-messages/safeMsgSender'\nimport { type EIP712TypedData, type SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useEffect, useCallback, useState } from 'react'\nimport useSafeInfo from '../useSafeInfo'\nimport useOnboard from '../wallets/useOnboard'\n\nconst useSyncSafeMessageSigner = (\n  message: SafeMessage | undefined,\n  decodedMessage: string | EIP712TypedData,\n  safeMessageHash: string,\n  requestId: string | undefined,\n  safeAppId: number | undefined,\n  onClose: () => void,\n) => {\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const onboard = useOnboard()\n  const { safe } = useSafeInfo()\n\n  // If the message gets updated in the messageSlice we dispatch it if the signature is complete\n  useEffect(() => {\n    if (message?.preparedSignature) {\n      dispatchPreparedSignature(safe.chainId, safeMessageHash, onClose, requestId)\n    }\n  }, [message, safe.chainId, safeMessageHash, onClose, requestId])\n\n  const onSign = useCallback(async () => {\n    // Error is shown when no wallet is connected, this appeases TypeScript\n    if (!onboard) {\n      return\n    }\n\n    setSubmitError(undefined)\n\n    try {\n      // When collecting the first signature\n      if (!message) {\n        await dispatchSafeMsgProposal({ onboard, safe, message: decodedMessage, safeAppId })\n\n        // If threshold 1, we do not want to wait for polling\n        if (safe.threshold === 1) {\n          await dispatchPreparedSignature(safe.chainId, safeMessageHash, onClose, requestId)\n        }\n      } else {\n        await dispatchSafeMsgConfirmation({ onboard, safe, message: decodedMessage })\n\n        // No requestID => we are in the confirm message dialog and do not need to leave the window open\n        if (!requestId) {\n          onClose()\n          return\n        }\n\n        // If the last signature was added to the message, we can immediately dispatch the signature\n        if (message.confirmationsRequired <= message.confirmationsSubmitted + 1) {\n          dispatchPreparedSignature(safe.chainId, safeMessageHash, onClose, requestId)\n        }\n      }\n    } catch (e) {\n      setSubmitError(asError(e))\n    }\n  }, [onboard, requestId, message, safe, decodedMessage, safeAppId, safeMessageHash, onClose])\n\n  return { submitError, onSign }\n}\n\nexport default useSyncSafeMessageSigner\n","import { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon } from '@mui/material'\nimport classNames from 'classnames'\nimport CheckIcon from '@/public/images/common/check.svg'\nimport css from './styles.module.css'\n\nconst SuccessMessage = ({ children, className }: { children: ReactNode; className?: string }): ReactElement => {\n  return (\n    <div className={classNames(css.container, className)}>\n      <div className={css.message}>\n        <SvgIcon component={CheckIcon} color=\"success\" inheritViewBox fontSize=\"small\" />\n\n        <Typography variant=\"body2\" width=\"100%\">\n          {children}\n        </Typography>\n      </div>\n    </div>\n  )\n}\n\nexport default SuccessMessage\n","import { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon, Divider } from '@mui/material'\nimport classNames from 'classnames'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport css from './styles.module.css'\n\nconst InfoBox = ({\n  title,\n  message,\n  children,\n  className,\n}: {\n  title: string\n  message: string\n  children: ReactNode\n  className?: string\n}): ReactElement => {\n  return (\n    <div className={classNames(css.container, className)}>\n      <div className={css.message}>\n        <SvgIcon component={InfoIcon} color=\"info\" inheritViewBox fontSize=\"medium\" />\n        <div>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\">{message}</Typography>\n        </div>\n      </div>\n      <Divider className={css.divider} />\n      <div>{children}</div>\n    </div>\n  )\n}\n\nexport default InfoBox\n","import { Grid, Button, Box, Typography, SvgIcon, CardContent, CardActions } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { useContext } from 'react'\nimport { SafeMessageListItemType, SafeMessageStatus } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { ReactElement } from 'react'\nimport type { SafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { RequestId } from '@safe-global/safe-apps-sdk'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport RequiredIcon from '@/public/images/messages/required.svg'\nimport useSafeInfo from '@/hooks/useSafeInfo'\n\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { useSafeMessage } from '@/hooks/messages/useSafeMessages'\nimport useOnboard, { switchWallet } from '@/hooks/wallets/useOnboard'\nimport { TxModalContext } from '@/components/tx-flow'\nimport CopyButton from '@/components/common/CopyButton'\nimport { WrongChainWarning } from '@/components/tx/WrongChainWarning'\nimport MsgSigners from '@/components/safe-messages/MsgSigners'\nimport useDecodedSafeMessage from '@/hooks/messages/useDecodedSafeMessage'\nimport useSyncSafeMessageSigner from '@/hooks/messages/useSyncSafeMessageSigner'\nimport SuccessMessage from '@/components/tx/SuccessMessage'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport InfoBox from '@/components/safe-messages/InfoBox'\nimport { DecodedMsg } from '@/components/safe-messages/DecodedMsg'\nimport TxCard from '@/components/tx-flow/common/TxCard'\n\nconst createSkeletonMessage = (confirmationsRequired: number): SafeMessage => {\n  return {\n    confirmations: [],\n    confirmationsRequired,\n    confirmationsSubmitted: 0,\n    creationTimestamp: 0,\n    message: '',\n    logoUri: null,\n    messageHash: '',\n    modifiedTimestamp: 0,\n    name: null,\n    proposedBy: {\n      value: '',\n    },\n    status: SafeMessageStatus.NEEDS_CONFIRMATION,\n    type: SafeMessageListItemType.MESSAGE,\n  }\n}\n\nconst MessageHashField = ({ label, hashValue }: { label: string; hashValue: string }) => (\n  <>\n    <Typography variant=\"body2\" fontWeight={700} mt={2}>\n      {label}:\n    </Typography>\n    <Typography variant=\"body2\">\n      <EthHashInfo address={hashValue} showAvatar={false} shortAddress={false} showCopyButton />\n    </Typography>\n  </>\n)\n\nconst DialogHeader = ({ threshold }: { threshold: number }) => (\n  <>\n    <Box textAlign=\"center\" mb={2}>\n      <SvgIcon component={RequiredIcon} viewBox=\"0 0 32 32\" fontSize=\"large\" />\n    </Box>\n    <Typography variant=\"h4\" textAlign=\"center\" gutterBottom>\n      Confirm message\n    </Typography>\n    <Typography variant=\"body1\" textAlign=\"center\" mb={2}>\n      To sign this message, you need to collect <b>{threshold} owner signatures</b> of your Safe Account.\n    </Typography>\n  </>\n)\n\nconst MessageDialogError = ({ isOwner, submitError }: { isOwner: boolean; submitError: Error | undefined }) => {\n  const wallet = useWallet()\n  const onboard = useOnboard()\n\n  const errorMessage =\n    !wallet || !onboard\n      ? 'No wallet is connected.'\n      : !isOwner\n      ? \"You are currently not an owner of this Safe Account and won't be able to confirm this message.\"\n      : submitError\n      ? 'Error confirming the message. Please try again.'\n      : null\n\n  if (errorMessage) {\n    return <ErrorMessage>{errorMessage}</ErrorMessage>\n  }\n  return null\n}\n\nconst AlreadySignedByOwnerMessage = ({ hasSigned }: { hasSigned: boolean }) => {\n  const onboard = useOnboard()\n\n  const handleSwitchWallet = () => {\n    if (onboard) {\n      switchWallet(onboard)\n    }\n  }\n  if (!hasSigned) {\n    return null\n  }\n  return (\n    <SuccessMessage>\n      <Grid container direction=\"row\" justifyContent=\"space-between\">\n        <Grid item xs={7}>\n          Your connected wallet has already signed this message.\n        </Grid>\n        <Grid item xs={4}>\n          <Button variant=\"contained\" size=\"small\" onClick={handleSwitchWallet} fullWidth>\n            Switch wallet\n          </Button>\n        </Grid>\n      </Grid>\n    </SuccessMessage>\n  )\n}\n\ntype BaseProps = Pick<SafeMessage, 'logoUri' | 'name' | 'message'>\n\n// Custom Safe Apps do not have a `safeAppId`\nexport type ProposeProps = BaseProps & {\n  safeAppId?: number\n  requestId: RequestId\n}\n\n// A proposed message does not return the `safeAppId` but the `logoUri` and `name` of the Safe App that proposed it\nexport type ConfirmProps = BaseProps & {\n  safeAppId?: never\n  requestId?: RequestId\n}\n\nconst SignMessage = ({ message, safeAppId, requestId }: ProposeProps | ConfirmProps): ReactElement => {\n  // Hooks & variables\n  const { setTxFlow } = useContext(TxModalContext)\n  const { palette } = useTheme()\n  const { safe } = useSafeInfo()\n  const isOwner = useIsSafeOwner()\n  const wallet = useWallet()\n\n  const { decodedMessage, safeMessageMessage, safeMessageHash } = useDecodedSafeMessage(message, safe)\n  const ongoingMessage = useSafeMessage(safeMessageHash)\n  useHighlightHiddenTab()\n\n  const decodedMessageAsString =\n    typeof decodedMessage === 'string' ? decodedMessage : JSON.stringify(decodedMessage, null, 2)\n\n  const hasSigned = !!ongoingMessage?.confirmations.some(({ owner }) => owner.value === wallet?.address)\n\n  const isDisabled = !isOwner || hasSigned\n\n  const { onSign, submitError } = useSyncSafeMessageSigner(\n    ongoingMessage,\n    decodedMessage,\n    safeMessageHash,\n    requestId,\n    safeAppId,\n    () => setTxFlow(undefined),\n  )\n\n  return (\n    <>\n      <TxCard>\n        <CardContent>\n          <DialogHeader threshold={safe.threshold} />\n\n          <Typography fontWeight={700} mb={1}>\n            Message: <CopyButton text={decodedMessageAsString} />\n          </Typography>\n          <DecodedMsg message={decodedMessage} isInModal />\n\n          <MessageHashField label=\"SafeMessage\" hashValue={safeMessageMessage} />\n          <MessageHashField label=\"SafeMessage hash\" hashValue={safeMessageHash} />\n        </CardContent>\n      </TxCard>\n\n      <TxCard>\n        <AlreadySignedByOwnerMessage hasSigned={hasSigned} />\n\n        <InfoBox\n          title=\"Collect all the confirmations\"\n          message={\n            requestId\n              ? 'Please keep this modal open until all signers confirm this message. Closing the modal will abort the signing request.'\n              : 'The signature will be submitted to the Safe App when the message is fully signed.'\n          }\n        >\n          <MsgSigners\n            msg={ongoingMessage || createSkeletonMessage(safe.threshold)}\n            showOnlyConfirmations\n            showMissingSignatures\n            backgroundColor={palette.info.background}\n          />\n        </InfoBox>\n\n        <WrongChainWarning />\n\n        <MessageDialogError isOwner={isOwner} submitError={submitError} />\n      </TxCard>\n\n      <TxCard>\n        <CardActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={onSign} disabled={isDisabled}>\n            Sign\n          </Button>\n        </CardActions>\n      </TxCard>\n    </>\n  )\n}\n\nexport default SignMessage\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport SignMessage, { type ConfirmProps, type ProposeProps } from '@/components/tx-flow/flows/SignMessage/SignMessage'\nimport { Box, Typography } from '@mui/material'\nimport SafeAppIconCard from '@/components/safe-apps/SafeAppIconCard'\n\nconst APP_LOGO_FALLBACK_IMAGE = '/images/apps/apps-icon.svg'\nconst APP_NAME_FALLBACK = 'Sign message off-chain'\n\nexport const AppTitle = ({ name, logoUri }: { name?: string | null; logoUri?: string | null }) => {\n  const appName = name || APP_NAME_FALLBACK\n  const appLogo = logoUri || APP_LOGO_FALLBACK_IMAGE\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <SafeAppIconCard src={appLogo} alt={name || 'The icon of the application'} width={24} height={24} />\n      <Typography variant=\"h4\" pl={1}>\n        {appName}\n      </Typography>\n    </Box>\n  )\n}\n\nconst SignMessageFlow = ({ ...props }: ProposeProps | ConfirmProps) => {\n  return (\n    <TxLayout\n      title=\"Confirm message\"\n      subtitle={<AppTitle name={props.name} logoUri={props.logoUri} />}\n      step={0}\n      hideNonce\n    >\n      <SignMessage {...props} />\n    </TxLayout>\n  )\n}\n\nexport default SignMessageFlow\n","import { useEffect } from 'react'\n\nconst ALT_FAVICON = '/favicons/favicon-dot.ico'\n\nconst setFavicon = (favicon: HTMLLinkElement | null, href: string) => {\n  if (favicon) favicon.href = href\n}\n\nconst blinkFavicon = (\n  favicon: HTMLLinkElement | null,\n  originalHref: string,\n  isBlinking = false,\n): ReturnType<typeof setInterval> => {\n  return setInterval(() => {\n    setFavicon(favicon, isBlinking ? ALT_FAVICON : originalHref)\n    isBlinking = !isBlinking\n  }, 300)\n}\n\n/**\n * Blink favicon when the tab is hidden\n */\nconst useHighlightHiddenTab = () => {\n  useEffect(() => {\n    const favicon = document.querySelector<HTMLLinkElement>('link[rel*=\"icon\"]')\n    const originalHref = favicon?.href || ''\n    let interval: ReturnType<typeof setInterval>\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        interval = blinkFavicon(favicon, originalHref)\n        setFavicon(favicon, ALT_FAVICON)\n      } else {\n        clearInterval(interval)\n        setFavicon(favicon, originalHref)\n      }\n    }\n\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n\n    handleVisibilityChange()\n\n    return () => {\n      clearInterval(interval)\n      setFavicon(favicon, originalHref)\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  }, [])\n}\n\nexport default useHighlightHiddenTab\n","import { hashMessage } from 'ethers/lib/utils'\nimport { gte } from 'semver'\nimport { adjustVInSignature } from '@safe-global/safe-core-sdk/dist/src/utils/signatures'\nimport { ethers } from 'ethers'\nimport type { providers, TypedDataDomain } from 'ethers'\n\nimport { hashTypedData } from '@/utils/web3'\nimport { isValidAddress } from './validation'\nimport { isWalletRejection } from '@/utils/wallets'\nimport { getSupportedSigningMethods } from '@/services/tx/tx-sender/sdk'\nimport {\n  type SafeInfo,\n  type SafeMessage,\n  type EIP712TypedData,\n  type ChainInfo,\n  FEATURES,\n} from '@safe-global/safe-gateway-typescript-sdk'\n\nimport { hasFeature } from './chains'\nimport { asError } from '@/services/exceptions/utils'\n\n/*\n * From v1.3.0, EIP-1271 support was moved to the CompatibilityFallbackHandler.\n * Also 1.3.0 introduces the chainId in the domain part of the SafeMessage\n */\nconst EIP1271_FALLBACK_HANDLER_SUPPORTED_SAFE_VERSION = '1.3.0'\n\nconst EIP1271_SUPPORTED_SAFE_VERSION = '1.0.0'\n\nconst EIP1271_OFFCHAIN_SUPPORTED_SAFE_APPS_SDK_VERSION = '7.11.0'\n\nexport const generateSafeMessageMessage = (message: SafeMessage['message']): string => {\n  return typeof message === 'string' ? hashMessage(message) : hashTypedData(message)\n}\n\n/**\n * Generates `SafeMessage` typed data for EIP-712\n * https://github.com/safe-global/safe-contracts/blob/main/contracts/handler/CompatibilityFallbackHandler.sol#L12\n * @param safe Safe which will sign the message\n * @param message Message to sign\n * @returns `SafeMessage` types for signing\n */\nexport const generateSafeMessageTypedData = (\n  { version, chainId, address }: SafeInfo,\n  message: SafeMessage['message'],\n): EIP712TypedData => {\n  if (!version) {\n    throw Error('Cannot create SafeMessage without version information')\n  }\n  const isHandledByFallbackHandler = gte(version, EIP1271_FALLBACK_HANDLER_SUPPORTED_SAFE_VERSION)\n\n  return {\n    domain: isHandledByFallbackHandler\n      ? {\n          chainId: chainId,\n          verifyingContract: address.value,\n        }\n      : { verifyingContract: address.value },\n    types: {\n      SafeMessage: [{ name: 'message', type: 'bytes' }],\n    },\n    message: {\n      message: generateSafeMessageMessage(message),\n    },\n  }\n}\n\nexport const generateSafeMessageHash = (safe: SafeInfo, message: SafeMessage['message']): string => {\n  const typedData = generateSafeMessageTypedData(safe, message)\n  return hashTypedData(typedData)\n}\n\nexport const isOffchainEIP1271Supported = (\n  { version, fallbackHandler }: SafeInfo,\n  chain: ChainInfo | undefined,\n  sdkVersion: string,\n): boolean => {\n  if (!version) {\n    return false\n  }\n\n  // check feature toggle\n  if (!chain || !hasFeature(chain, FEATURES.EIP1271)) {\n    return false\n  }\n\n  // If the Safe apps sdk does not support off-chain signing yet\n  if (!gte(sdkVersion, EIP1271_OFFCHAIN_SUPPORTED_SAFE_APPS_SDK_VERSION)) {\n    return false\n  }\n\n  // Check if Safe has fallback handler\n  const isHandledByFallbackHandler = gte(version, EIP1271_FALLBACK_HANDLER_SUPPORTED_SAFE_VERSION)\n  if (isHandledByFallbackHandler) {\n    // We only check if any fallback Handler is set as we expect / assume that users who overwrite the fallback handler by a custom one know what they are doing\n    return fallbackHandler !== null && isValidAddress(fallbackHandler.value)\n  }\n\n  // check if Safe version supports EIP-1271\n  return gte(version, EIP1271_SUPPORTED_SAFE_VERSION)\n}\n\nexport const tryOffChainMsgSigning = async (\n  signer: providers.JsonRpcSigner,\n  safe: SafeInfo,\n  message: SafeMessage['message'],\n): Promise<string> => {\n  const signingMethods = getSupportedSigningMethods(safe.version)\n\n  for await (const [i, signingMethod] of signingMethods.entries()) {\n    try {\n      if (signingMethod === 'eth_signTypedData') {\n        const typedData = generateSafeMessageTypedData(safe, message)\n        const signature = await signer._signTypedData(\n          typedData.domain as TypedDataDomain,\n          typedData.types,\n          typedData.message,\n        )\n\n        // V needs adjustment when signing with ledger / trezor through metamask\n        return adjustVInSignature(signingMethod, signature)\n      }\n\n      if (signingMethod === 'eth_sign') {\n        const signerAddress = await signer.getAddress()\n\n        const messageHash = generateSafeMessageHash(safe, message)\n        const signature = await signer.signMessage(ethers.utils.arrayify(messageHash))\n\n        return adjustVInSignature(signingMethod, signature, messageHash, signerAddress)\n      }\n    } catch (error) {\n      const isLastSigningMethod = i === signingMethods.length - 1\n\n      if (isWalletRejection(asError(error)) || isLastSigningMethod) {\n        throw error\n      }\n    }\n  }\n\n  // Won't be reached, but TS otherwise complains\n  throw new Error('No supported signing methods')\n}\n","import { _TypedDataEncoder } from 'ethers/lib/utils'\nimport type { EIP712TypedData } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { TypedDataDomain } from 'ethers'\n\nexport type EIP712Normalized = EIP712TypedData & { primaryType: string }\n\nexport const hashTypedData = (typedData: EIP712TypedData): string => {\n  // `ethers` doesn't require `EIP712Domain` and otherwise throws\n  const { EIP712Domain: _, ...types } = typedData.types\n  return _TypedDataEncoder.hash(typedData.domain as TypedDataDomain, types, typedData.message)\n}\n\nexport const normalizeTypedData = (typedData: EIP712TypedData): EIP712Normalized => {\n  const { EIP712Domain: _, ...types } = typedData.types\n  return _TypedDataEncoder.getPayload(typedData.domain as TypedDataDomain, types, typedData.message)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nestedMsg\":\"styles_nestedMsg__4_qWU\",\"container\":\"styles_container__HF_HV\",\"scrollable\":\"styles_scrollable__pPR_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__yZtKk\",\"message\":\"styles_message__8UdwV\",\"details\":\"styles_details__wpZax\",\"divider\":\"styles_divider__OOqFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"msg\":\"styles_msg__xlVmi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"styles_icon__XTesF\",\"dot\":\"styles_dot__M3mmD\",\"signers\":\"styles_signers__kNlNy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__SA5Sq\",\"message\":\"styles_message__lg5if\",\"details\":\"styles_details__TnoMf\"};"],"names":["Box","onLoadMore","elementRef","useRef","isVisible","useOnceVisible","useEffect","div","ref","label","Skeleton","variant","width","sx","mt","mb","item","i","height","String","Array","from","keys","map","isTxValid","txs","length","every","t","includes","value","test","undefined","validateAddress","to","data","validateTransaction","getInteractionTitle","chain","nativeCurrency","decimals","symbol","Number","formatVisualAmount","getDecodedMessage","message","isHexString","toUtf8String","e","getLegacyChainName","chainName","chainId","network","getEmptySafeApp","url","id","Math","random","name","iconUrl","description","chainIds","accessControl","type","SafeAppAccessPolicyTypes","tags","safeAppsPermissions","features","socialProfiles","developerWebsite","getOrigin","URL","origin","isOptimizedForBatchTransactions","safeApp","SafeAppFeatures","filterInternalCategories","categories","internalCategories","Object","values","SafeAppsTag","filter","tag","some","internalCategory","getUniqueTags","apps","reduce","result","app","forEach","add","Set","sort","isTextMessage","readableData","useMemo","JSON","stringify","TextField","maxRows","multiline","disabled","fullWidth","className","css","inputProps","EIP712_DOMAIN_TYPE","DecodedTypedObject","displayedType","eip712Msg","types","domain","Typography","textTransform","fontWeight","palette","color","border","main","entries","msg","param","index","paramName","paramValue","find","paramType","findType","isArrayValueParam","isArray","isNested","typeName","inlineType","isAddress","isByte","paramValueAsString","TxDataRow","title","borderRadius","theme","shape","Value","method","generateDataRowValue","DecodedMsg","isInModal","Msg","normalizedMsg","normalizeTypedData","classNames","ErrorBoundary","fallback","primaryType","_path","_excluded","_extends","assign","bind","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref","titleId","props","viewBox","fill","xmlns","d","Created","SvgIcon","component","CreatedIcon","inheritViewBox","background","paper","Signed","SignedIcon","Dot","DotIcon","showOnlyConfirmations","showMissingSignatures","backgroundColor","useState","status","SafeMessageStatus","confirmations","shouldHideConfirmations","hideConfirmations","setHideConfirmations","confirmationsRequired","confirmationsSubmitted","missingConfirmations","max","isConfirmed","List","ListItem","ListItemIcon","ListItemText","primaryTypographyProps","txSignersCss","owner","py","EthHashInfo","address","hasExplorer","showCopyButton","Link","onClick","prev","fontSize","_","idx","CircleOutlinedIcon","display","flexDirection","alignItems","gap","extends_","_path2","_path3","fillRule","clipRule","safe","decodedMessage","safeMessageMessage","generateSafeMessageMessage","safeMessageHash","generateSafeMessageHash","isMessageFullySigned","preparedSignature","dispatchPreparedSignature","onClose","requestId","fetchedMessage","getSafeMessage","SafeMessageListItemType","logError","Errors","safeMsgDispatch","SafeMsgEvent","messageHash","signature","dispatchSafeMsgProposal","onboard","safeAppId","signer","normalizedMessage","getAssertedChainSigner","tryOffChainMsgSigning","isObjectEIP712TypedData","proposeSafeMessage","error","asError","dispatchSafeMsgConfirmation","confirmSafeMessage","submitError","setSubmitError","useOnboard","useSafeInfo","onSign","useCallback","threshold","children","CheckIcon","InfoIcon","Divider","MessageHashField","hashValue","showAvatar","shortAddress","DialogHeader","textAlign","RequiredIcon","gutterBottom","b","MessageDialogError","isOwner","wallet","useWallet","errorMessage","ErrorMessage","AlreadySignedByOwnerMessage","hasSigned","SuccessMessage","Grid","container","direction","justifyContent","xs","Button","size","switchWallet","useContext","TxModalContext","setTxFlow","useTheme","useIsSafeOwner","useDecodedSafeMessage","ongoingMessage","useSafeMessage","useHighlightHiddenTab","decodedMessageAsString","isDisabled","useSyncSafeMessageSigner","TxCard","CardContent","CopyButton","text","InfoBox","MsgSigners","creationTimestamp","logoUri","modifiedTimestamp","proposedBy","info","WrongChainWarning","CardActions","AppTitle","appName","appLogo","SafeAppIconCard","src","alt","pl","TxLayout","subtitle","step","hideNonce","SignMessage","ALT_FAVICON","setFavicon","favicon","href","interval","document","querySelector","originalHref","handleVisibilityChange","hidden","isBlinking","setInterval","blinkFavicon","clearInterval","addEventListener","removeEventListener","EIP1271_FALLBACK_HANDLER_SUPPORTED_SAFE_VERSION","hashMessage","hashTypedData","generateSafeMessageTypedData","version","Error","gte","verifyingContract","SafeMessage","typedData","isOffchainEIP1271Supported","sdkVersion","fallbackHandler","hasFeature","FEATURES","isValidAddress","signingMethods","signingMethod","signerAddress","isLastSigningMethod","getSupportedSigningMethods","_signTypedData","adjustVInSignature","getAddress","signMessage","ethers","isWalletRejection","EIP712Domain","_TypedDataEncoder","module","exports"],"sourceRoot":""}