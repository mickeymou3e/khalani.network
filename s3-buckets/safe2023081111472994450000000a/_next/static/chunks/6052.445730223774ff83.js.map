{"version":3,"file":"static/chunks/6052.445730223774ff83.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/index.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/types.js","webpack://_N_E/./node_modules/@ethereumjs/tx/dist.browser/util.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nvar common_1 = __importStar(require(\"@ethereumjs/common\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nvar BaseTransaction = /** @class */ (function () {\n    function BaseTransaction(txData, opts) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;\n        var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type = txData.type;\n        this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();\n        this.txOptions = opts;\n        var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);\n        var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);\n        var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);\n        var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);\n        this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;\n        this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));\n        this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;\n        this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;\n        this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n    }\n    Object.defineProperty(BaseTransaction.prototype, \"transactionType\", {\n        /**\n         * Alias for {@link BaseTransaction.type}\n         *\n         * @deprecated Use `type` instead\n         */\n        get: function () {\n            return this.type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTransaction.prototype, \"type\", {\n        /**\n         * Returns the transaction type.\n         *\n         * Note: legacy txs will return tx type `0`.\n         */\n        get: function () {\n            return this._type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    BaseTransaction.prototype.supports = function (capability) {\n        return this.activeCapabilities.includes(capability);\n    };\n    BaseTransaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (this.getBaseFee().gt(this.gasLimit)) {\n            errors.push(\"gasLimit is too low. given \".concat(this.gasLimit, \", need at least \").concat(this.getBaseFee()));\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        return stringError ? errors : errors.length === 0;\n    };\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    BaseTransaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    BaseTransaction.prototype.getDataFee = function () {\n        var txDataZero = this.common.param('gasPrices', 'txDataZero');\n        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        var cost = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        cost = new ethereumjs_util_1.BN(cost);\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            var dataLength = Math.ceil(this.data.length / 32);\n            var initCodeCost = new ethereumjs_util_1.BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(dataLength);\n            cost.iadd(initCodeCost);\n        }\n        return cost;\n    };\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    BaseTransaction.prototype.toCreationAddress = function () {\n        return this.to === undefined || this.to.buf.length === 0;\n    };\n    BaseTransaction.prototype.isSigned = function () {\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        if (this.type === 0) {\n            if (!v || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (v === undefined || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    BaseTransaction.prototype.verifySignature = function () {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            var publicKey = this.getSenderPublicKey();\n            return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Returns the sender's address\n     */\n    BaseTransaction.prototype.getSenderAddress = function () {\n        return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));\n    };\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    BaseTransaction.prototype.sign = function (privateKey) {\n        if (privateKey.length !== 32) {\n            var msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        var hackApplied = false;\n        if (this.type === 0 &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        var msgHash = this.getMessageToSign(true);\n        var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;\n        var tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    };\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    BaseTransaction.prototype._getCommon = function (common, chainId) {\n        var _a;\n        // Chain ID provided\n        if (chainId) {\n            var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));\n            if (common) {\n                if (!common.chainIdBN().eq(chainIdBN)) {\n                    var msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.default.isSupportedChainId(chainIdBN)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {\n                        name: 'custom-chain',\n                        networkId: chainIdBN,\n                        chainId: chainIdBN,\n                    }, this.DEFAULT_HARDFORK);\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return ((_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));\n        }\n    };\n    /**\n     * Validates that an object with BN values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BN values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits, cannotEqual) {\n        var e_1, _a;\n        if (bits === void 0) { bits = 256; }\n        if (cannotEqual === void 0) { cannotEqual = false; }\n        try {\n            for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                switch (bits) {\n                    case 64:\n                        if (cannotEqual) {\n                            if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_UINT64)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        else {\n                            if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_UINT64)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        break;\n                    case 256:\n                        if (cannotEqual) {\n                            if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_INTEGER)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        else {\n                            if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        break;\n                    default: {\n                        var msg = this._errorMsg('unimplemented bits value');\n                        throw new Error(msg);\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    BaseTransaction.prototype._getSharedErrorPostfix = function () {\n        var hash = '';\n        try {\n            hash = this.isSigned() ? (0, ethereumjs_util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        var isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        var hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        var postfix = \"tx type=\".concat(this.type, \" hash=\").concat(hash, \" nonce=\").concat(this.nonce, \" value=\").concat(this.value, \" \");\n        postfix += \"signed=\".concat(isSigned, \" hf=\").concat(hf);\n        return postfix;\n    };\n    return BaseTransaction;\n}());\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nvar FeeMarketEIP1559Transaction = /** @class */ (function (_super) {\n    __extends(FeeMarketEIP1559Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function FeeMarketEIP1559Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a, _b;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'london';\n        var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        if (!_this.common.isActivatedEIP(1559)) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        _this._validateCannotExceedMaxInteger({\n            maxFeePerGas: _this.maxFeePerGas,\n            maxPriorityFeePerGas: _this.maxPriorityFeePerGas,\n        });\n        if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n            var msg = _this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized\n                .slice(0, 1)\n                .toString('hex')));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n     */\n    FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, maxPriorityFeePerGas: maxPriorityFeePerGas, maxFeePerGas: maxFeePerGas, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            maxPriorityFeePerGas: maxPriorityFeePerGas,\n            maxFeePerGas: maxFeePerGas,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n        if (baseFee === void 0) { baseFee = new ethereumjs_util_1.BN(0); }\n        var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n        var gasPrice = inclusionFeePerGas.add(baseFee);\n        return this.gasLimit.mul(gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    FeeMarketEIP1559Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    FeeMarketEIP1559Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 9);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.keccak256)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    FeeMarketEIP1559Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.keccak256)(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = __assign(__assign({}, this.txOptions), { common: this.common });\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    FeeMarketEIP1559Transaction.prototype.errorStr = function () {\n        var errorStr = this._getSharedErrorPostfix();\n        errorStr += \" maxFeePerGas=\".concat(this.maxFeePerGas, \" maxPriorityFeePerGas=\").concat(this.maxPriorityFeePerGas);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    FeeMarketEIP1559Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nvar AccessListEIP2930Transaction = /** @class */ (function (_super) {\n    __extends(AccessListEIP2930Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function AccessListEIP2930Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a, _b;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'berlin';\n        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        // EIP-2718 check is done in Common\n        if (!_this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n        _this._validateCannotExceedMaxInteger({\n            gasPrice: _this.gasPrice,\n        });\n        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new AccessListEIP2930Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized\n                .slice(0, 1)\n                .toString('hex')));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n     */\n    AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        var emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    AccessListEIP2930Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    AccessListEIP2930Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    AccessListEIP2930Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 8);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.keccak256)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    AccessListEIP2930Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.keccak256)(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = __assign(__assign({}, this.txOptions), { common: this.common });\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    AccessListEIP2930Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    AccessListEIP2930Transaction.prototype.errorStr = function () {\n        var _a, _b;\n        var errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += \" gasPrice=\".concat(this.gasPrice, \" accessListCount=\").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    AccessListEIP2930Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = AccessListEIP2930Transaction;\n//# sourceMappingURL=eip2930Transaction.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeMarketEIP1559Transaction = exports.TransactionFactory = exports.AccessListEIP2930Transaction = exports.Transaction = void 0;\nvar legacyTransaction_1 = require(\"./legacyTransaction\");\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return __importDefault(legacyTransaction_1).default; } });\nvar eip2930Transaction_1 = require(\"./eip2930Transaction\");\nObject.defineProperty(exports, \"AccessListEIP2930Transaction\", { enumerable: true, get: function () { return __importDefault(eip2930Transaction_1).default; } });\nvar transactionFactory_1 = require(\"./transactionFactory\");\nObject.defineProperty(exports, \"TransactionFactory\", { enumerable: true, get: function () { return __importDefault(transactionFactory_1).default; } });\nvar eip1559Transaction_1 = require(\"./eip1559Transaction\");\nObject.defineProperty(exports, \"FeeMarketEIP1559Transaction\", { enumerable: true, get: function () { return __importDefault(eip1559Transaction_1).default; } });\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */ (function (_super) {\n    __extends(Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;\n        _this.common = _this._validateTxV(_this.v, opts.common);\n        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.common.gteHardfork('spuriousDragon')) {\n            if (!_this.isSigned()) {\n                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                var v = _this.v;\n                var chainIdDoubled = _this.common.chainIdBN().muln(2);\n                // v and chain ID meet EIP-155 conditions\n                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link Transaction.fromSerializedTx})\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link Transaction.fromSerializedTx} constructor\n     */\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        return new Transaction({\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            v: v,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    Transaction.prototype._getMessageToSign = function () {\n        var values = [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n        }\n        return values;\n    };\n    Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var message = this._getMessageToSign();\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.rlphash)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: _super.prototype.getDataFee.call(this),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return _super.prototype.getDataFee.call(this);\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    Transaction.prototype.hash = function () {\n        // In contrast to the tx type transaction implementations the `hash()` function\n        // for the legacy tx does not throw if the tx is not signed.\n        // This has been considered for inclusion but lead to unexpected backwards\n        // compatibility problems (no concrete reference found, needs validation).\n        //\n        // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n        // September, 2021 as well as work done before.\n        //\n        // This should be updated along the next major version release by adding:\n        //\n        //if (!this.isSigned()) {\n        //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n        //  throw new Error(msg)\n        //}\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.rlphash)(this.raw());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var message = this._getMessageToSign();\n        return (0, ethereumjs_util_1.rlphash)(message);\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    Transaction.prototype._processSignature = function (v, r, s) {\n        var vBN = new ethereumjs_util_1.BN(v);\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n        }\n        var opts = __assign(__assign({}, this.txOptions), { common: this.common });\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: vBN,\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v, common) {\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n                throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n            }\n        }\n        var chainIdBN;\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            !v.eqn(27) &&\n            !v.eqn(28)) {\n            if (common) {\n                var chainIdDoubled = common.chainIdBN().muln(2);\n                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n                if (!isValidEIP155V) {\n                    throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n                }\n            }\n            else {\n                // Derive the original chain ID\n                var numSub = void 0;\n                if (v.subn(35).isEven()) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBN = v.subn(numSub).divn(2);\n            }\n        }\n        return this._getCommon(common, chainIdBN);\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = this.v;\n        var chainIdDoubled = this.common.chainIdBN().muln(2);\n        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    Transaction.prototype.errorStr = function () {\n        var errorStr = this._getSharedErrorPostfix();\n        errorStr += \" gasPrice=\".concat(this.gasPrice);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */ (function () {\n    // It is not possible to instantiate a TransactionFactory object.\n    function TransactionFactory() {\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    TransactionFactory.fromTxData = function (txData, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n            if (txType === 0) {\n                return _1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n            }\n        }\n    };\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromSerializedData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            var EIP = void 0;\n            switch (data[0]) {\n                case 1:\n                    EIP = 2930;\n                    break;\n                case 2:\n                    EIP = 1559;\n                    break;\n                default:\n                    throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n            }\n            if (EIP === 1559) {\n                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n            }\n            else {\n                // EIP === 2930\n                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n            }\n        }\n        else {\n            return _1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    };\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    };\n    /**\n     * This helper method allows one to retrieve the class which matches the transactionID\n     * If transactionID is undefined, returns the legacy transaction class.\n     * @deprecated - This method is deprecated and will be removed on the next major release\n     * @param transactionID\n     * @param _common - This option is not used\n     */\n    TransactionFactory.getTransactionClass = function (transactionID, _common) {\n        if (transactionID === void 0) { transactionID = 0; }\n        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);\n        if (legacyTxn) {\n            return _1.Transaction;\n        }\n        switch (transactionID) {\n            case 1:\n                return _1.AccessListEIP2930Transaction;\n            case 2:\n                return _1.FeeMarketEIP1559Transaction;\n            default:\n                throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n        }\n    };\n    return TransactionFactory;\n}());\nexports.default = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechansim\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\nfunction isAccessListBuffer(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    var firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAccessListBuffer = isAccessListBuffer;\nfunction isAccessList(input) {\n    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAccessList = isAccessList;\n/**\n * A const defining secp256k1n/2\n */\nexports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n    if (length > common.param('vm', 'maxInitCodeSize')) {\n        throw new Error(\"the initcode size of this transaction is too large: it is \".concat(length, \" while the max is \").concat(common.param('vm', 'maxInitCodeSize')));\n    }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nvar AccessLists = /** @class */ (function () {\n    function AccessLists() {\n    }\n    AccessLists.getAccessListData = function (accessList) {\n        var AccessListJSON;\n        var bufferAccessList;\n        if (accessList && (0, types_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            var newAccessList = [];\n            for (var i = 0; i < accessList.length; i++) {\n                var item = accessList[i];\n                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n                var storageItems = [];\n                for (var index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n            // build the JSON\n            var json = [];\n            for (var i = 0; i < bufferAccessList.length; i++) {\n                var data = bufferAccessList[i];\n                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n                var storageKeys = [];\n                for (var item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n                }\n                var jsonItem = {\n                    address: address,\n                    storageKeys: storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON: AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    };\n    AccessLists.verifyAccessList = function (accessList) {\n        for (var key = 0; key < accessList.length; key++) {\n            var accessListItem = accessList[key];\n            var address = accessListItem[0];\n            var storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length != 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length != 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    };\n    AccessLists.getAccessListJSON = function (accessList) {\n        var accessListJSON = [];\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var JSONItem = {\n                address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            var storageSlots = item[1];\n            for (var slot = 0; slot < storageSlots.length; slot++) {\n                var storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    };\n    AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        var slots = 0;\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        var addresses = accessList.length;\n        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n    };\n    return AccessLists;\n}());\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=util.js.map"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__values","s","Symbol","iterator","i","length","next","done","TypeError","__read","n","r","e","ar","push","error","exports","BaseTransaction","common_1","ethereumjs_util_1","types_1","txData","opts","cache","hash","dataFee","activeCapabilities","DEFAULT_CHAIN","Chain","Mainnet","DEFAULT_HARDFORK","Hardfork","Istanbul","nonce","gasLimit","to","data","type","_type","BN","toBuffer","toNumber","txOptions","toB","vB","rB","sB","Address","_validateCannotExceedMaxInteger","supports","capability","includes","validate","stringError","errors","getBaseFee","gt","concat","isSigned","verifySignature","fee","getDataFee","addn","common","param","gteHardfork","toCreationAddress","iaddn","txDataZero","txDataNonZero","cost","isActivatedEIP","dataLength","Math","ceil","initCodeCost","imuln","iadd","buf","_a","publicKey","getSenderPublicKey","unpadBuffer","getSenderAddress","publicToAddress","sign","privateKey","msg","_errorMsg","Error","hackApplied","Capability","EIP155ReplayProtection","msgHash","getMessageToSign","ecsign","tx","_processSignature","index","indexOf","splice","_getCommon","chainId","chainIdBN","eq","copy","default","isSupportedChainId","chain","hardfork","forCustomChain","name","networkId","values","bits","cannotEqual","e_1","_b","entries","_c","_d","key","gte","MAX_UINT64","MAX_INTEGER","e_1_1","return","_getSharedErrorPostfix","bufferToHex","toString","hf","postfix","__extends","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","String","__","constructor","__assign","assign","t","arguments","apply","baseTransaction_1","util_1","TRANSACTION_TYPE_BUFFER","Buffer","from","padStart","FeeMarketEIP1559Transaction","_super","_this","accessList","maxFeePerGas","maxPriorityFeePerGas","accessListData","AccessLists","getAccessListData","AccessListJSON","verifyAccessList","mul","lt","eqn","N_DIV_2","checkMaxInitCodeSize","freeze","fromTxData","fromSerializedTx","serialized","slice","equals","rlp","decode","isArray","fromValuesArray","fromRlpSerializedTx","validateNoLeadingZeroes","getDataFeeEIP2930","isFrozen","getUpfrontCost","baseFee","gasPrice","min","sub","add","raw","bnToUnpaddedBuffer","serialize","base","encode","hashMessage","message","keccak256","getMessageToVerifySignature","ecrecover","toJSON","accessListJSON","getAccessListJSON","bnToHex","errorStr","AccessListEIP2930Transaction","yParity","__exportStar","__importDefault","TransactionFactory","Transaction","legacyTransaction_1","eip2930Transaction_1","transactionFactory_1","eip1559Transaction_1","_validateTxV","chainIdDoubled","muln","_getMessageToSign","rlphash","vBN","ltn","numSub","subn","isEven","divn","_unsignedTxImplementsEIP155","_signedTxImplementsEIP155","onEIP155BlockOrLater","_1","txType","fromSerializedData","EIP","fromBlockBodyData","isBuffer","getTransactionClass","transactionID","_common","isAccessList","isAccessListBuffer","input","firstItem","bufferAccessList","newAccessList","item","addressBuffer","address","storageItems","storageKeys","json","jsonItem","accessListItem","storageSlots","storageSlot","JSONItem","setLengthLeft","slot","accessListStorageKeyCost","accessListAddressCost","slots"],"sourceRoot":""}