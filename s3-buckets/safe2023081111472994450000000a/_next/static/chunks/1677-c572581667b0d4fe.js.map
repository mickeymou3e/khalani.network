{"version":3,"file":"static/chunks/1677-c572581667b0d4fe.js","mappings":"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","sources":["webpack://_N_E/./public/images/common/owners.svg","webpack://_N_E/./src/components/common/DateTime/index.tsx","webpack://_N_E/./src/components/transactions/BatchExecuteButton/BatchExecuteHoverProvider.tsx","webpack://_N_E/./src/components/transactions/GroupLabel/index.tsx","webpack://_N_E/./src/components/transactions/TxConfirmations/index.tsx","webpack://_N_E/./src/components/transactions/TxDateLabel/index.tsx","webpack://_N_E/./src/components/transactions/TxListItem/index.tsx","webpack://_N_E/./src/components/transactions/GroupedTxListItems/index.tsx","webpack://_N_E/./src/components/transactions/TxList/index.tsx","webpack://_N_E/./src/components/transactions/TxSummary/index.tsx","webpack://_N_E/./src/components/transactions/SafeCreationTx/index.tsx","webpack://_N_E/./src/components/transactions/TxListItem/ExpandableTransactionItem.tsx","webpack://_N_E/./src/components/transactions/GroupLabel/styles.module.css","webpack://_N_E/./src/components/transactions/GroupedTxListItems/styles.module.css","webpack://_N_E/./src/components/transactions/SafeCreationTx/styles.module.css","webpack://_N_E/./src/components/transactions/TxDateLabel/styles.module.css","webpack://_N_E/./src/components/transactions/TxList/styles.module.css","webpack://_N_E/./src/components/transactions/TxListItem/styles.module.css","webpack://_N_E/./src/components/transactions/TxSummary/styles.module.css"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nvar SvgOwners = function SvgOwners(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M16.0001 8.999C17.1031 8.999 18.0001 9.896 18.0001 10.999C18.0001 12.102 17.1031 12.999 16.0001 12.999C14.8971 12.999 14.0001 12.102 14.0001 10.999C14.0001 9.896 14.8971 8.999 16.0001 8.999ZM7.99809 4C9.10109 4 9.99809 4.897 9.99809 6C9.99809 7.103 9.10109 8 7.99809 8C6.89609 8 5.99809 7.103 5.99809 6C5.99809 4.897 6.89609 4 7.99809 4ZM22.9571 20.719C22.2691 18.357 21.0441 15.363 18.1661 14.353C19.2671 13.64 20.0001 12.406 20.0001 10.999C20.0001 8.793 18.2061 6.999 16.0001 6.999C13.9771 6.999 12.3171 8.514 12.0541 10.466C11.5261 10.008 10.8961 9.623 10.1511 9.36C11.2591 8.648 11.9981 7.412 11.9981 6C11.9981 3.794 10.2041 2 7.99809 2C5.79209 2 3.99809 3.794 3.99809 6C3.99809 7.407 4.73209 8.642 5.83409 9.354C2.95409 10.364 1.72909 13.359 1.04009 15.722C0.886092 16.252 1.18909 16.808 1.72009 16.962C1.81309 16.989 1.90709 17.002 2.00009 17.002C2.43409 17.002 2.83309 16.719 2.96009 16.282C4.04009 12.581 5.54709 11.002 8.00009 11.002C10.1631 11.002 11.5521 12.206 12.5931 14.961C10.5781 16.283 9.61809 18.727 9.03709 20.719C8.88309 21.249 9.18809 21.805 9.71709 21.959C9.81109 21.986 9.90509 21.999 9.99709 21.999C10.4311 21.999 10.8301 21.716 10.9571 21.279C12.0361 17.578 13.5431 15.999 15.9971 15.999C18.4501 15.999 19.9571 17.578 21.0371 21.279C21.1911 21.808 21.7391 22.113 22.2771 21.959C22.8081 21.805 23.1111 21.249 22.9571 20.719Z\"\n  })));\n};\nexport default SvgOwners;","import type { ReactElement } from 'react'\nimport { Tooltip } from '@mui/material'\nimport { formatDateTime, formatTime, formatTimeInWords } from '@/utils/date'\nimport { useRouter } from 'next/router'\nimport { AppRoutes } from '@/config/routes'\nimport { useTxFilter } from '@/utils/tx-history-filter'\n\nconst DAYS_THRESHOLD = 60\n\n/**\n * If queue, show relative time until threshold then show full date and time\n * If history, show time (as date labels are present)\n * If filter, show full date and time\n */\n\nconst DateTime = ({ value }: { value: number }): ReactElement => {\n  const [filter] = useTxFilter()\n  const router = useRouter()\n\n  // (non-filtered) history is the endpoint that returns date labels\n  const showTime = router.pathname === AppRoutes.transactions.history && !filter\n\n  const isOld = Math.floor((Date.now() - value) / 1000 / 60 / 60 / 24) > DAYS_THRESHOLD\n  const showDateTime = isOld\n\n  return (\n    <Tooltip title={showDateTime ? '' : formatDateTime(value)} placement=\"top\">\n      <span>{showTime ? formatTime(value) : showDateTime ? formatDateTime(value) : formatTimeInWords(value)}</span>\n    </Tooltip>\n  )\n}\n\nexport default DateTime\n","import type { ReactElement, ReactNode } from 'react'\nimport { createContext, useState } from 'react'\n\nexport const BatchExecuteHoverContext = createContext<{\n  activeHover: string[]\n  setActiveHover: (activeHover: string[]) => void\n}>({\n  activeHover: [],\n  setActiveHover: () => {},\n})\n\n// Used for highlighting transactions that will be included when executing them as a batch\nexport const BatchExecuteHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [activeHover, setActiveHover] = useState<string[]>([])\n\n  return (\n    <BatchExecuteHoverContext.Provider value={{ activeHover, setActiveHover }}>\n      {children}\n    </BatchExecuteHoverContext.Provider>\n  )\n}\n","import type { ReactElement } from 'react'\nimport type { Label } from '@safe-global/safe-gateway-typescript-sdk'\nimport { LabelValue } from '@safe-global/safe-gateway-typescript-sdk'\nimport css from './styles.module.css'\nimport useSafeInfo from '@/hooks/useSafeInfo'\n\nconst GroupLabel = ({ item }: { item: Label }): ReactElement => {\n  const { safe } = useSafeInfo()\n\n  const label =\n    item.label === LabelValue.Queued\n      ? `${item.label} - transaction with nonce ${safe.nonce} needs to be executed first`\n      : item.label\n\n  return <div className={css.container}>{label}</div>\n}\n\nexport default GroupLabel\n","import { SvgIcon, Typography } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport OwnersIcon from '@/public/images/common/owners.svg'\n\nconst TxConfirmations = ({\n  requiredConfirmations,\n  submittedConfirmations,\n}: {\n  requiredConfirmations: number\n  submittedConfirmations: number\n}): ReactElement => {\n  const confirmationColor = requiredConfirmations > submittedConfirmations ? 'border' : 'primary'\n\n  return (\n    <>\n      <SvgIcon component={OwnersIcon} inheritViewBox fontSize=\"small\" color={confirmationColor} />\n      <Typography variant=\"caption\" fontWeight=\"bold\" color={confirmationColor}>\n        {submittedConfirmations} out of {requiredConfirmations}\n      </Typography>\n    </>\n  )\n}\n\nexport default TxConfirmations\n","import type { DateLabel, SafeMessageDateLabel } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { ReactElement } from 'react'\n\nimport { formatWithSchema } from '@/utils/date'\n\nimport css from './styles.module.css'\n\nconst TxDateLabel = ({ item }: { item: DateLabel | SafeMessageDateLabel }): ReactElement => {\n  return (\n    <div className={css.container}>\n      <span>{formatWithSchema(item.timestamp, 'MMM d, yyyy')}</span>\n    </div>\n  )\n}\n\nexport default TxDateLabel\n","import { type ReactElement } from 'react'\nimport type { TransactionListItem } from '@safe-global/safe-gateway-typescript-sdk'\nimport { isDateLabel, isLabelListItem, isTransactionListItem } from '@/utils/transaction-guards'\nimport GroupLabel from '@/components/transactions/GroupLabel'\nimport TxDateLabel from '@/components/transactions/TxDateLabel'\nimport ExpandableTransactionItem from './ExpandableTransactionItem'\n\ntype TxListItemProps = {\n  item: TransactionListItem\n}\n\nconst TxListItem = ({ item }: TxListItemProps): ReactElement | null => {\n  if (isLabelListItem(item)) {\n    return <GroupLabel item={item} />\n  }\n  if (isTransactionListItem(item)) {\n    return <ExpandableTransactionItem item={item} />\n  }\n  if (isDateLabel(item)) {\n    return <TxDateLabel item={item} />\n  }\n  return null\n}\n\nexport default TxListItem\n","import type { ReactElement } from 'react'\nimport { useContext } from 'react'\nimport { Box, Paper, Typography } from '@mui/material'\nimport type { Transaction } from '@safe-global/safe-gateway-typescript-sdk'\nimport { isMultisigExecutionInfo } from '@/utils/transaction-guards'\nimport ExpandableTransactionItem from '@/components/transactions/TxListItem/ExpandableTransactionItem'\nimport css from './styles.module.css'\nimport { ReplaceTxHoverContext, ReplaceTxHoverProvider } from './ReplaceTxHoverProvider'\nimport ExternalLink from '@/components/common/ExternalLink'\nimport { HelpCenterArticle } from '@/config/constants'\n\nconst Disclaimer = ({ nonce }: { nonce?: number }) => (\n  <Box className={css.disclaimerContainer}>\n    <Typography alignSelf=\"flex-start\">{nonce}</Typography>\n    <Typography>\n      These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).\n    </Typography>\n\n    <ExternalLink\n      href={HelpCenterArticle.CONFLICTING_TRANSACTIONS}\n      title=\"Why are transactions with the same nonce conflicting with each other?\"\n      className={css.link}\n    >\n      Learn more\n    </ExternalLink>\n  </Box>\n)\n\nconst TxGroup = ({ groupedListItems }: { groupedListItems: Transaction[] }): ReactElement => {\n  const nonce = isMultisigExecutionInfo(groupedListItems[0].transaction.executionInfo)\n    ? groupedListItems[0].transaction.executionInfo.nonce\n    : undefined\n\n  const { replacedTxIds } = useContext(ReplaceTxHoverContext)\n\n  return (\n    <Paper className={css.container} variant=\"outlined\">\n      <Disclaimer nonce={nonce} />\n      {groupedListItems.map((tx) => (\n        <div key={tx.transaction.id} className={replacedTxIds.includes(tx.transaction.id) ? css.willBeReplaced : ''}>\n          <ExpandableTransactionItem item={tx} isGrouped />\n        </div>\n      ))}\n    </Paper>\n  )\n}\n\nconst GroupedTxListItems = ({ groupedListItems }: { groupedListItems: Transaction[] }): ReactElement | null => {\n  if (groupedListItems.length === 0) return null\n\n  return (\n    <ReplaceTxHoverProvider groupedListItems={groupedListItems}>\n      <TxGroup groupedListItems={groupedListItems} />\n    </ReplaceTxHoverProvider>\n  )\n}\n\nexport default GroupedTxListItems\n","import type { ReactElement, ReactNode } from 'react'\nimport { useMemo } from 'react'\nimport { Box } from '@mui/material'\nimport type { TransactionListPage } from '@safe-global/safe-gateway-typescript-sdk'\nimport TxListItem from '../TxListItem'\nimport GroupedTxListItems from '@/components/transactions/GroupedTxListItems'\nimport { groupConflictingTxs } from '@/utils/tx-list'\nimport css from './styles.module.css'\n\ntype TxListProps = {\n  items: TransactionListPage['results']\n}\n\nexport const TxListGrid = ({ children }: { children: ReactNode }): ReactElement => {\n  return <Box className={css.container}>{children}</Box>\n}\n\nconst TxList = ({ items }: TxListProps): ReactElement => {\n  const groupedItems = useMemo(() => groupConflictingTxs(items), [items])\n\n  const transactions = groupedItems.map((item, index) => {\n    if (Array.isArray(item)) {\n      return <GroupedTxListItems key={index} groupedListItems={item} />\n    }\n\n    return <TxListItem key={index} item={item} />\n  })\n\n  return <TxListGrid>{transactions}</TxListGrid>\n}\n\nexport default TxList\n","import type { Palette } from '@mui/material'\nimport { Box, CircularProgress, Typography } from '@mui/material'\nimport type { ReactElement } from 'react'\nimport { type Transaction, TransactionStatus } from '@safe-global/safe-gateway-typescript-sdk'\n\nimport DateTime from '@/components/common/DateTime'\nimport TxInfo from '@/components/transactions/TxInfo'\nimport SignTxButton from '@/components/transactions/SignTxButton'\nimport ExecuteTxButton from '@/components/transactions/ExecuteTxButton'\nimport css from './styles.module.css'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { isAwaitingExecution, isMultisigExecutionInfo, isTxQueued } from '@/utils/transaction-guards'\nimport RejectTxButton from '@/components/transactions/RejectTxButton'\nimport useTransactionStatus from '@/hooks/useTransactionStatus'\nimport TxType from '@/components/transactions/TxType'\nimport TxConfirmations from '../TxConfirmations'\nimport useIsPending from '@/hooks/useIsPending'\n\nconst getStatusColor = (value: TransactionStatus, palette: Palette) => {\n  switch (value) {\n    case TransactionStatus.SUCCESS:\n      return palette.success.main\n    case TransactionStatus.FAILED:\n    case TransactionStatus.CANCELLED:\n      return palette.error.main\n    case TransactionStatus.AWAITING_CONFIRMATIONS:\n    case TransactionStatus.AWAITING_EXECUTION:\n      return palette.warning.main\n    default:\n      return palette.primary.main\n  }\n}\n\ntype TxSummaryProps = {\n  isGrouped?: boolean\n  item: Transaction\n}\n\nconst TxSummary = ({ item, isGrouped }: TxSummaryProps): ReactElement => {\n  const tx = item.transaction\n  const wallet = useWallet()\n  const txStatusLabel = useTransactionStatus(tx)\n  const isPending = useIsPending(tx.id)\n  const isQueue = isTxQueued(tx.txStatus)\n  const awaitingExecution = isAwaitingExecution(tx.txStatus)\n  const nonce = isMultisigExecutionInfo(tx.executionInfo) ? tx.executionInfo.nonce : undefined\n  const requiredConfirmations = isMultisigExecutionInfo(tx.executionInfo)\n    ? tx.executionInfo.confirmationsRequired\n    : undefined\n  const submittedConfirmations = isMultisigExecutionInfo(tx.executionInfo)\n    ? tx.executionInfo.confirmationsSubmitted\n    : undefined\n\n  const displayConfirmations = isQueue && !!submittedConfirmations && !!requiredConfirmations\n\n  return (\n    <Box\n      className={`${css.gridContainer} ${\n        isQueue\n          ? nonce && !isGrouped\n            ? css.columnTemplate\n            : css.columnTemplateWithoutNonce\n          : css.columnTemplateTxHistory\n      }`}\n      id={tx.id}\n    >\n      {nonce && !isGrouped && <Box gridArea=\"nonce\">{nonce}</Box>}\n\n      <Box gridArea=\"type\" className={css.columnWrap}>\n        <TxType tx={tx} />\n      </Box>\n\n      <Box gridArea=\"info\" className={css.columnWrap}>\n        <TxInfo info={tx.txInfo} />\n      </Box>\n\n      <Box gridArea=\"date\">\n        <DateTime value={tx.timestamp} />\n      </Box>\n\n      {displayConfirmations && (\n        <Box gridArea=\"confirmations\" display=\"flex\" alignItems=\"center\" gap={1}>\n          <TxConfirmations\n            submittedConfirmations={submittedConfirmations}\n            requiredConfirmations={requiredConfirmations}\n          />\n        </Box>\n      )}\n\n      {wallet && isQueue && (\n        <Box gridArea=\"actions\" display=\"flex\" justifyContent={{ sm: 'center' }} gap={1}>\n          {awaitingExecution ? (\n            <ExecuteTxButton txSummary={item.transaction} compact />\n          ) : (\n            <SignTxButton txSummary={item.transaction} compact />\n          )}\n          <RejectTxButton txSummary={item.transaction} compact />\n        </Box>\n      )}\n\n      <Box\n        gridArea=\"status\"\n        marginLeft={{ sm: 'auto' }}\n        marginRight={1}\n        display=\"flex\"\n        alignItems=\"center\"\n        gap={1}\n        color={({ palette }) => getStatusColor(tx.txStatus, palette)}\n      >\n        {isPending && <CircularProgress size={14} color=\"inherit\" />}\n\n        <Typography variant=\"caption\" fontWeight=\"bold\" color={({ palette }) => getStatusColor(tx.txStatus, palette)}>\n          {txStatusLabel}\n        </Typography>\n      </Box>\n    </Box>\n  )\n}\n\nexport default TxSummary\n","import React from 'react'\nimport type { TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport { Box } from '@mui/system'\nimport css from './styles.module.css'\nimport { InfoDetails } from '@/components/transactions/InfoDetails'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { generateDataRowValue, TxDataRow } from '@/components/transactions/TxDetails/Summary/TxDataRow'\nimport { dateString } from '@/utils/formatters'\nimport { isCreationTxInfo } from '@/utils/transaction-guards'\nimport { NOT_AVAILABLE } from '@/components/transactions/TxDetails'\n\ntype SafeCreationTxProps = {\n  txSummary: TransactionSummary\n}\n\nconst SafeCreationTx = ({ txSummary }: SafeCreationTxProps) => {\n  if (!isCreationTxInfo(txSummary.txInfo)) return null\n\n  const timestamp = txSummary.timestamp\n  const { creator, factory, implementation, transactionHash } = txSummary.txInfo\n\n  return (\n    <>\n      <Box className={css.txCreation}>\n        <InfoDetails title=\"Creator:\">\n          <EthHashInfo address={creator.value} shortAddress={false} showCopyButton hasExplorer />\n        </InfoDetails>\n        <InfoDetails title=\"Factory:\">\n          {factory ? (\n            <EthHashInfo name={factory.name} address={factory.value} shortAddress={false} showCopyButton hasExplorer />\n          ) : (\n            NOT_AVAILABLE\n          )}\n        </InfoDetails>\n        <InfoDetails title=\"Mastercopy:\">\n          {implementation ? (\n            <EthHashInfo\n              name={implementation.name}\n              address={implementation.value}\n              shortAddress={false}\n              showCopyButton\n              hasExplorer\n            />\n          ) : (\n            NOT_AVAILABLE\n          )}\n        </InfoDetails>\n      </Box>\n      <Box className={css.txSummary}>\n        <TxDataRow title=\"Transaction hash:\">{generateDataRowValue(transactionHash, 'hash', true)}</TxDataRow>\n        <TxDataRow title=\"Created:\">{timestamp ? dateString(timestamp) : null}</TxDataRow>\n      </Box>\n    </>\n  )\n}\n\nexport default SafeCreationTx\n","import { type Transaction, type TransactionDetails } from '@safe-global/safe-gateway-typescript-sdk'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Skeleton } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport TxSummary from '@/components/transactions/TxSummary'\nimport TxDetails from '@/components/transactions/TxDetails'\nimport CreateTxInfo from '@/components/transactions/SafeCreationTx'\nimport { isCreationTxInfo } from '@/utils/transaction-guards'\nimport { useContext } from 'react'\nimport { BatchExecuteHoverContext } from '@/components/transactions/BatchExecuteButton/BatchExecuteHoverProvider'\nimport css from './styles.module.css'\nimport classNames from 'classnames'\n\ntype ExpandableTransactionItemProps = {\n  isGrouped?: boolean\n  item: Transaction\n  txDetails?: TransactionDetails\n}\n\nexport const ExpandableTransactionItem = ({\n  isGrouped = false,\n  item,\n  txDetails,\n  testId,\n}: ExpandableTransactionItemProps & { testId?: string }) => {\n  const hoverContext = useContext(BatchExecuteHoverContext)\n\n  const isBatched = hoverContext.activeHover.includes(item.transaction.id)\n\n  return (\n    <Accordion\n      disableGutters\n      TransitionProps={{\n        mountOnEnter: true,\n        unmountOnExit: false,\n      }}\n      elevation={0}\n      defaultExpanded={!!txDetails}\n      className={classNames(css.accordion, { [css.batched]: isBatched })}\n      data-testid={testId}\n    >\n      <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ justifyContent: 'flex-start', overflowX: 'auto' }}>\n        <TxSummary item={item} isGrouped={isGrouped} />\n      </AccordionSummary>\n\n      <AccordionDetails sx={{ padding: 0 }}>\n        {isCreationTxInfo(item.transaction.txInfo) ? (\n          <CreateTxInfo txSummary={item.transaction} />\n        ) : (\n          <TxDetails txSummary={item.transaction} txDetails={txDetails} />\n        )}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n\nexport const TransactionSkeleton = () => (\n  <>\n    <Box pt=\"20px\" pb=\"4px\">\n      <Skeleton variant=\"text\" width=\"35px\" />\n    </Box>\n\n    <Accordion disableGutters elevation={0} defaultExpanded className={css.accordion}>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />} sx={{ justifyContent: 'flex-start', overflowX: 'auto' }}>\n        <Skeleton width=\"100%\" />\n      </AccordionSummary>\n\n      <AccordionDetails sx={{ padding: 0 }}>\n        <Skeleton variant=\"rounded\" width=\"100%\" height=\"325px\" />\n      </AccordionDetails>\n    </Accordion>\n  </>\n)\n\nexport default ExpandableTransactionItem\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__xJKBg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__XIM9b\",\"disclaimerContainer\":\"styles_disclaimerContainer__ypGa1\",\"link\":\"styles_link__aartU\",\"willBeReplaced\":\"styles_willBeReplaced__lbNiu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txCreation\":\"styles_txCreation__n_ScU\",\"txSummary\":\"styles_txSummary__62A4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__wty_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__dsZLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordion\":\"styles_accordion__6YItT\",\"closed\":\"styles_closed__KXaYB\",\"batched\":\"styles_batched__bpwu5\",\"expanded\":\"styles_expanded__jvb_k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"styles_gridContainer__o1D2G\",\"columnTemplate\":\"styles_columnTemplate__upRzQ\",\"columnTemplateWithoutNonce\":\"styles_columnTemplateWithoutNonce__MY_ud\",\"columnTemplateTxHistory\":\"styles_columnTemplateTxHistory__iOgPH\",\"columnWrap\":\"styles_columnWrap__3lPnN\"};"],"names":["_path","_excluded","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref","title","titleId","props","width","height","viewBox","fill","xmlns","id","fillRule","clipRule","d","value","filter","useTxFilter","showTime","useRouter","pathname","AppRoutes","showDateTime","Math","floor","Date","now","Tooltip","formatDateTime","placement","span","formatTime","formatTimeInWords","BatchExecuteHoverContext","createContext","activeHover","setActiveHover","BatchExecuteHoverProvider","children","useState","Provider","item","useSafeInfo","safe","label","LabelValue","nonce","div","className","css","requiredConfirmations","submittedConfirmations","confirmationColor","SvgIcon","component","OwnersIcon","inheritViewBox","fontSize","color","Typography","variant","fontWeight","formatWithSchema","timestamp","isLabelListItem","GroupLabel","isTransactionListItem","ExpandableTransactionItem","isDateLabel","TxDateLabel","Disclaimer","Box","alignSelf","ExternalLink","href","HelpCenterArticle","TxGroup","groupedListItems","isMultisigExecutionInfo","transaction","executionInfo","undefined","useContext","ReplaceTxHoverContext","replacedTxIds","Paper","map","tx","includes","isGrouped","ReplaceTxHoverProvider","TxListGrid","items","transactions","useMemo","groupConflictingTxs","index","Array","isArray","GroupedTxListItems","TxListItem","getStatusColor","palette","TransactionStatus","success","main","error","warning","primary","wallet","useWallet","txStatusLabel","useTransactionStatus","isPending","useIsPending","isQueue","isTxQueued","txStatus","awaitingExecution","isAwaitingExecution","confirmationsRequired","confirmationsSubmitted","displayConfirmations","gridArea","TxType","TxInfo","info","txInfo","DateTime","display","alignItems","gap","TxConfirmations","justifyContent","sm","ExecuteTxButton","txSummary","compact","SignTxButton","RejectTxButton","marginLeft","marginRight","CircularProgress","size","isCreationTxInfo","creator","factory","implementation","transactionHash","InfoDetails","EthHashInfo","address","shortAddress","showCopyButton","hasExplorer","name","NOT_AVAILABLE","TxDataRow","generateDataRowValue","dateString","TransactionSkeleton","pt","pb","Skeleton","Accordion","disableGutters","elevation","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","sx","overflowX","AccordionDetails","padding","txDetails","testId","isBatched","TransitionProps","mountOnEnter","unmountOnExit","classNames","data-testid","TxSummary","CreateTxInfo","TxDetails","module","exports"],"sourceRoot":""}