{"version":3,"file":"static/chunks/pages/transactions/tx-e6ec6385d51b4d0d.js","mappings":"mGAIA,MAAMA,GAAM,E,SAAA,KAoBZ,O,uBCvBKC,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,mBACA,WACE,OAAO,EAAQ,U,mPCajBC,EAAe,Y,IAAGC,EAAS,EAATA,UAChBC,GAAkBC,EAAAA,EAAAA,IAAkBF,GAGpC,GAAWG,EAAAA,EAAAA,KAATC,KACFC,GAAQC,EAAAA,EAAAA,IAAyC,OAATN,QAAS,IAATA,OAAAA,EAAAA,EAAWO,uBAC5C,OAATP,QAAS,IAATA,OAAAA,EAAAA,EAAWO,sBAAsBF,OAChC,EACCG,EAAQH,IAAUD,EAAKC,MAAQI,EAAAA,WAAAA,KAAkBJ,EAAQD,EAAKC,MAAQI,EAAAA,WAAAA,YAAoBC,EAEhG,OACE,UAACC,EAAAA,EAAU,C,UACRH,GAAQ,SAACI,EAAAA,EAAU,CAACC,KAAM,CAAEL,MAAAA,KAAuB,MAEpD,SAACM,EAAAA,GAAyB,CAACD,KAAMZ,EAAID,UAAWA,QAwCtD,EAnCiB,WACf,IACM,GADSe,EAAAA,EAAAA,aACOC,MAAdC,GACFC,EAAgBC,MAAMC,QAAQH,GAAMA,EAAG,GAAKA,EACpBd,GAAAA,EAAAA,EAAAA,KAAtBC,EAAsBD,EAAtBC,KAAMiB,EAAgBlB,EAAhBkB,YAEsBC,GAenC,QAfmCA,EAAAA,EAAAA,IAClC,WACE,GAAKJ,GAAkBG,EAEvB,OAAOE,EAAAA,EAAAA,uBAAsBnB,EAAKoB,QAASN,GAAeO,MAAK,SAACC,GAE9D,OAAKC,EAAAA,EAAAA,IAAYD,EAAQL,YAAaA,GAG/BK,EAFEE,QAAQC,OAAO,IAAIC,MAAM,qEAMtC,CAACZ,EAAed,EAAKoB,QAASpB,EAAK2B,YAAa3B,EAAK4B,aAAcX,IACnE,GACD,GAfMrB,EAA6BsB,EAenC,GAfiBW,EAAkBX,EAenC,GAED,OAAIW,GACK,SAACC,EAAAA,EAAY,CAACC,MAAOF,E,SAAgB,+BAG1CjC,GACK,SAACD,EAAY,CAACC,UAAWA,KAI3B,SAACoC,EAAAA,GAAmB,K,WC5C7B,EAlBoC,WAClC,OACE,sB,WACE,SAACC,IAAI,C,UACH,SAACC,QAAK,C,SAAE,+CAGV,UAACC,OAAI,C,WACH,SAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAY,IAAKC,GAAI,EAAGC,GAAI,E,SAAG,yBAIxD,SAACC,EAAQ,a","sources":["webpack://_N_E/./node_modules/@mui/system/esm/Box/Box.js","webpack://_N_E/?e20b","webpack://_N_E/./src/components/transactions/SingleTx/index.tsx","webpack://_N_E/./src/pages/transactions/tx.tsx"],"sourcesContent":["'use client';\n\nimport PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/transactions/tx\",\n      function () {\n        return require(\"private-next-pages/transactions/tx.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/transactions/tx\"])\n      });\n    }\n  ","import ErrorMessage from '@/components/tx/ErrorMessage'\nimport { useRouter } from 'next/router'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport useAsync from '@/hooks/useAsync'\nimport type { Label, Transaction, TransactionDetails } from '@safe-global/safe-gateway-typescript-sdk'\nimport { LabelValue } from '@safe-global/safe-gateway-typescript-sdk'\nimport { getTransactionDetails } from '@safe-global/safe-gateway-typescript-sdk'\nimport { sameAddress } from '@/utils/addresses'\nimport type { ReactElement } from 'react'\nimport { makeTxFromDetails } from '@/utils/transactions'\nimport { TxListGrid } from '@/components/transactions/TxList'\nimport ExpandableTransactionItem, {\n  TransactionSkeleton,\n} from '@/components/transactions/TxListItem/ExpandableTransactionItem'\nimport GroupLabel from '../GroupLabel'\nimport { isMultisigDetailedExecutionInfo } from '@/utils/transaction-guards'\n\nconst SingleTxGrid = ({ txDetails }: { txDetails: TransactionDetails }): ReactElement => {\n  const tx: Transaction = makeTxFromDetails(txDetails)\n\n  // Show a label for the transaction if it's a queued transaction\n  const { safe } = useSafeInfo()\n  const nonce = isMultisigDetailedExecutionInfo(txDetails?.detailedExecutionInfo)\n    ? txDetails?.detailedExecutionInfo.nonce\n    : -1\n  const label = nonce === safe.nonce ? LabelValue.Next : nonce > safe.nonce ? LabelValue.Queued : undefined\n\n  return (\n    <TxListGrid>\n      {label ? <GroupLabel item={{ label } as Label} /> : null}\n\n      <ExpandableTransactionItem item={tx} txDetails={txDetails} />\n    </TxListGrid>\n  )\n}\n\nconst SingleTx = () => {\n  const router = useRouter()\n  const { id } = router.query\n  const transactionId = Array.isArray(id) ? id[0] : id\n  const { safe, safeAddress } = useSafeInfo()\n\n  const [txDetails, txDetailsError] = useAsync<TransactionDetails>(\n    () => {\n      if (!transactionId || !safeAddress) return\n\n      return getTransactionDetails(safe.chainId, transactionId).then((details) => {\n        // If the transaction is not related to the current safe, throw an error\n        if (!sameAddress(details.safeAddress, safeAddress)) {\n          return Promise.reject(new Error('Transaction with this id was not found in this Safe Account'))\n        }\n        return details\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transactionId, safe.chainId, safe.txQueuedTag, safe.txHistoryTag, safeAddress],\n    false,\n  )\n\n  if (txDetailsError) {\n    return <ErrorMessage error={txDetailsError}>Failed to load transaction</ErrorMessage>\n  }\n\n  if (txDetails) {\n    return <SingleTxGrid txDetails={txDetails} />\n  }\n\n  // Loading skeleton\n  return <TransactionSkeleton />\n}\n\nexport default SingleTx\n","import type { NextPage } from 'next'\nimport Head from 'next/head'\n\nimport SingleTx from '@/components/transactions/SingleTx'\nimport Typography from '@mui/material/Typography'\n\nconst SingleTransaction: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>{'Safe{Wallet} â€“ Transaction details'}</title>\n      </Head>\n\n      <main>\n        <Typography variant=\"h3\" fontWeight={700} pt={1} mb={3}>\n          Transaction details\n        </Typography>\n\n        <SingleTx />\n      </main>\n    </>\n  )\n}\n\nexport default SingleTransaction\n"],"names":["Box","window","__NEXT_P","push","SingleTxGrid","txDetails","tx","makeTxFromDetails","useSafeInfo","safe","nonce","isMultisigDetailedExecutionInfo","detailedExecutionInfo","label","LabelValue","undefined","TxListGrid","GroupLabel","item","ExpandableTransactionItem","useRouter","query","id","transactionId","Array","isArray","safeAddress","useAsync","getTransactionDetails","chainId","then","details","sameAddress","Promise","reject","Error","txQueuedTag","txHistoryTag","txDetailsError","ErrorMessage","error","TransactionSkeleton","Head","title","main","Typography","variant","fontWeight","pt","mb","SingleTx"],"sourceRoot":""}