{"version":3,"file":"static/chunks/pages/404-81b96f3554d2ee30.js","mappings":"sFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,OACA,WACE,OAAO,EAAQ,W,mJCEVC,EAAkB,SAACC,GAC9B,IAAQC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OACZC,EAAK,8BACFC,GAAoC,OAAxBH,EAASI,MAAMF,IAAO,GAAE,MAE7C,GAAIC,EAAU,CACZ,IAAIE,EAAUL,EAASM,QAAQJ,EAAI,KAAO,IACtCK,EAAYN,EAAS,IAAMA,EAAOO,MAAM,GAAK,GAGjD,GAAIH,EAAQI,WAAWC,EAAAA,EAAAA,aAAAA,OAErB,IADqBC,OAAOC,OAAOF,EAAAA,EAAAA,cAAwBG,MAAK,SAACC,G,OAAUA,IAAUT,KAClE,C,IACJA,EAAPU,EAA+C,QAAxCV,EAAAA,EAAQD,MAAM,kCAA0B,IAAxCC,OAAAA,EAAAA,EAA2C,GACxDA,EAAUK,EAAAA,EAAAA,aAAAA,GACVH,EAAY,GAAmBQ,OAAhBR,EAAU,QAAW,OAALQ,GAInC,GAAIV,IAAYL,EACd,MAAO,GAAmBG,OAAhBE,EAAQ,UAAmBE,OAAXJ,GAAqB,OAAVI,KAwB3C,UAnB4B,WAC1B,IAAMS,GAASC,EAAAA,EAAAA,aAC2BC,GAAAA,EAAAA,EAAAA,WAAkB,GAArDC,EAAmCD,EAAuB,GAA3CE,EAAoBF,EAAuB,GAcjE,OAZAG,EAAAA,EAAAA,YAAU,WACR,GAAwB,qBAAbtB,SAAX,CAEA,IAAMuB,EAAcxB,EAAgBC,UAEhCuB,EACFN,EAAOV,QAAQgB,GAEfF,GAAiB,MAElB,CAACJ,KAEG,SAACO,OAAI,C,UAAGJ,IAAiB,SAACK,KAAE,C,SAAC,8B","sources":["webpack://_N_E/?9cea","webpack://_N_E/./src/pages/404.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/404\",\n      function () {\n        return require(\"private-next-pages/404.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/404\"])\n      });\n    }\n  ","import { useEffect, useState } from 'react'\nimport type { NextPage } from 'next'\nimport { useRouter } from 'next/router'\nimport { AppRoutes } from '@/config/routes'\n\n// Rewrite the URL to put the Safe address into the query.\nexport const _getRedirectUrl = (location: Location): string | undefined => {\n  const { pathname, search } = location\n  const re = /^\\/([^/]+?:0x[0-9a-f]{40})/i\n  const [, pathSafe] = pathname.match(re) || []\n\n  if (pathSafe) {\n    let newPath = pathname.replace(re, '') || '/'\n    let newSearch = search ? '&' + search.slice(1) : ''\n\n    // TxId used to be in the path, rewrite it to the query\n    if (newPath.startsWith(AppRoutes.transactions.index)) {\n      const isStaticPath = Object.values(AppRoutes.transactions).some((route) => route === newPath)\n      if (!isStaticPath) {\n        const txId = newPath.match(/\\/transactions\\/([^/]+)/)?.[1]\n        newPath = AppRoutes.transactions.tx\n        newSearch = `${newSearch}&id=${txId}`\n      }\n    }\n\n    if (newPath !== pathname) {\n      return `${newPath}?safe=${pathSafe}${newSearch}`\n    }\n  }\n}\n\nconst Custom404: NextPage = () => {\n  const router = useRouter()\n  const [isRedirecting, setIsRedirecting] = useState<boolean>(true)\n\n  useEffect(() => {\n    if (typeof location === 'undefined') return\n\n    const redirectUrl = _getRedirectUrl(location)\n\n    if (redirectUrl) {\n      router.replace(redirectUrl)\n    } else {\n      setIsRedirecting(false)\n    }\n  }, [router])\n\n  return <main>{!isRedirecting && <h1>404 - Page not found</h1>}</main>\n}\n\nexport default Custom404\n"],"names":["window","__NEXT_P","push","_getRedirectUrl","location","pathname","search","re","pathSafe","match","newPath","replace","newSearch","slice","startsWith","AppRoutes","Object","values","some","route","txId","router","useRouter","useState","isRedirecting","setIsRedirecting","useEffect","redirectUrl","main","h1"],"sourceRoot":""}