{"version":3,"file":"static/chunks/5986.4d3032a694fb4821.js","mappings":"gVAqDmF,E,4IArC7EA,EAAkB,W,MACtB,OAAyD,QAAlDC,EAAM,OAANA,aAAM,IAANA,YAAAA,EAAAA,OAAQC,WAAW,uCAA+B,WAAlDD,EAA2D,EAAPE,SAMhDC,EAAgC,mBA8BvCC,GAA6E,EAUlF,IATC,OADiF,EAChFC,EAAAA,EAAAA,UAAuB,W,OAAMC,EAAAA,EAAAA,UAC9B,OAFiF,EAEhFD,EAAAA,EAAAA,SAAsB,W,OAAME,EAAAA,EAAAA,SAC7B,OAHiF,EAGhFF,EAAAA,EAAAA,eAA4B,W,OA/BtB,SAACG,GACN,IAAMC,GAAsBC,EAAAA,EAAAA,GAAc,CAAEC,QAAS,EAAGC,OAAQC,EAAAA,IAApCH,CAAiDF,GAI7E,OAFAC,EAAoBK,MAAQX,EAErBM,OA2BT,OAJiF,EAIhFJ,EAAAA,EAAAA,kBAA+B,SAACU,G,OAvBX,SAACA,GAEvB,OAAKC,EAAAA,IAIEN,EAAAA,EAAAA,GAAc,CACnBC,QAAS,EACTM,UAAWD,EAAAA,GACXE,eAAgB,CACdC,eAAgB,CACd,gBAAiB,QAEnBC,UAAWrB,IAAoB,OAAS,SAE1CsB,eAAgB,CAACC,SAASP,EAAMQ,YAZzB,W,OAAM,MAoB4BC,CAAgBT,OAC3D,OALiF,EAKhFV,EAAAA,EAAAA,QAAqB,W,OAAMoB,EAAAA,EAAAA,SAC5B,OANiF,EAMhFpB,EAAAA,EAAAA,QAAqB,W,OAAMqB,EAAAA,EAAAA,GAAa,CAAEC,OAAQC,EAAAA,GAAgBC,MAAOC,EAAAA,SAC1E,OAPiF,EAOhFzB,EAAAA,EAAAA,UAAuB,W,OAAM0B,EAAAA,EAAAA,SAC9B,OARiF,EAQhF1B,EAAAA,EAAAA,MAAmB,W,OAAM2B,EAAAA,EAAAA,SAC1B,OATiF,EAShF3B,EAAAA,EAAAA,UAAuB,W,OAAM4B,EAAAA,EAAAA,GAAe,CAAEC,SAAUnC,SATwB,GAYtEoC,EAAgB,SAACpB,GAC5B,OAAOqB,OAAOC,OAAOjC,GAAgBkC,KAAI,SAACC,G,OAAWA,EAAOxB,OAGjDyB,EAAgC,WAC3C,MAAO,CAAC,CAAEC,KAAMC,EAAAA,GAAAA,SAAwBC,IAAK,yBAGlCC,EAAoB,SAACC,EAA2BC,GAC3D,IAAMC,EAA4B,OAATC,EAAAA,QAAS,IAATA,EAAAA,OAAAA,EAAAA,EAAAA,EAAYF,EAAYG,eACjD,OAAQJ,EAAgBK,SAASH,GAAoBD,IAG1CK,EAAsB,SAACpC,GAClC,GAAIf,OAAOoD,SAAWC,EAAAA,GACpB,MAAO,EAACC,EAAAA,EAAAA,GAAgBvC,EAAMwC,SAEhC,IAAMC,EAAiBpB,OAAOqB,QAAQrD,GAAgBsD,QAAO,Y,IAAEC,G,YAAG,G,OAAMf,EAAkB7B,EAAM8B,gBAAiBc,MAEjH,OAA8B,IAA1BH,EAAeI,OACV,CAACxD,EAAeyD,SAAS9C,IAG3ByC,EAAelB,KAAI,Y,OAAgBC,G,YAAN,IAAaxB,Q","sources":["webpack://_N_E/./src/hooks/wallets/wallets.ts"],"sourcesContent":["import { CYPRESS_MNEMONIC, TREZOR_APP_URL, TREZOR_EMAIL, WC_BRIDGE, WC_PROJECT_ID } from '@/config/constants'\nimport type { RecommendedInjectedWallets, WalletInit, WalletModule } from '@web3-onboard/common/dist/types.d'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\n\nimport coinbaseModule from '@web3-onboard/coinbase'\nimport injectedWalletModule, { ProviderLabel } from '@web3-onboard/injected-wallets'\nimport keystoneModule from '@web3-onboard/keystone/dist/index'\nimport ledgerModule from '@web3-onboard/ledger/dist/index'\nimport trezorModule from '@web3-onboard/trezor'\nimport walletConnect from '@web3-onboard/walletconnect'\nimport tahoModule from '@web3-onboard/taho'\n\nimport pairingModule from '@/services/pairing/module'\nimport e2eWalletModule from '@/tests/e2e-wallet'\nimport { CGW_NAMES, WALLET_KEYS } from './consts'\n\nconst prefersDarkMode = (): boolean => {\n  return window?.matchMedia('(prefers-color-scheme: dark)')?.matches\n}\n\n// We need to modify the module name as onboard dedupes modules with the same label and the WC v1 and v2 modules have the same\n// @see https://github.com/blocknative/web3-onboard/blob/d399e0b76daf7b363d6a74b100b2c96ccb14536c/packages/core/src/store/actions.ts#L419\n// TODO: When removing this, also remove the associated CSS in `onboard.css`\nexport const WALLET_CONNECT_V1_MODULE_NAME = 'WalletConnect v1'\nconst walletConnectV1 = (): WalletInit => {\n  return (helpers) => {\n    const walletConnectModule = walletConnect({ version: 1, bridge: WC_BRIDGE })(helpers) as WalletModule\n\n    walletConnectModule.label = WALLET_CONNECT_V1_MODULE_NAME\n\n    return walletConnectModule\n  }\n}\n\nconst walletConnectV2 = (chain: ChainInfo): WalletInit => {\n  // WalletConnect v2 requires a project ID\n  if (!WC_PROJECT_ID) {\n    return () => null\n  }\n\n  return walletConnect({\n    version: 2,\n    projectId: WC_PROJECT_ID,\n    qrModalOptions: {\n      themeVariables: {\n        '--wcm-z-index': '1302',\n      },\n      themeMode: prefersDarkMode() ? 'dark' : 'light',\n    },\n    requiredChains: [parseInt(chain.chainId)],\n  })\n}\n\nconst WALLET_MODULES: { [key in WALLET_KEYS]: (chain: ChainInfo) => WalletInit } = {\n  [WALLET_KEYS.INJECTED]: () => injectedWalletModule(),\n  [WALLET_KEYS.PAIRING]: () => pairingModule(),\n  [WALLET_KEYS.WALLETCONNECT]: () => walletConnectV1(),\n  [WALLET_KEYS.WALLETCONNECT_V2]: (chain) => walletConnectV2(chain),\n  [WALLET_KEYS.LEDGER]: () => ledgerModule(),\n  [WALLET_KEYS.TREZOR]: () => trezorModule({ appUrl: TREZOR_APP_URL, email: TREZOR_EMAIL }),\n  [WALLET_KEYS.KEYSTONE]: () => keystoneModule(),\n  [WALLET_KEYS.TAHO]: () => tahoModule(),\n  [WALLET_KEYS.COINBASE]: () => coinbaseModule({ darkMode: prefersDarkMode() }),\n}\n\nexport const getAllWallets = (chain: ChainInfo): WalletInit[] => {\n  return Object.values(WALLET_MODULES).map((module) => module(chain))\n}\n\nexport const getRecommendedInjectedWallets = (): RecommendedInjectedWallets[] => {\n  return [{ name: ProviderLabel.MetaMask, url: 'https://metamask.io' }]\n}\n\nexport const isWalletSupported = (disabledWallets: string[], walletLabel: string): boolean => {\n  const legacyWalletName = CGW_NAMES?.[walletLabel.toUpperCase() as WALLET_KEYS]\n  return !disabledWallets.includes(legacyWalletName || walletLabel)\n}\n\nexport const getSupportedWallets = (chain: ChainInfo): WalletInit[] => {\n  if (window.Cypress && CYPRESS_MNEMONIC) {\n    return [e2eWalletModule(chain.rpcUri)]\n  }\n  const enabledWallets = Object.entries(WALLET_MODULES).filter(([key]) => isWalletSupported(chain.disabledWallets, key))\n\n  if (enabledWallets.length === 0) {\n    return [WALLET_MODULES.INJECTED(chain)]\n  }\n\n  return enabledWallets.map(([, module]) => module(chain))\n}\n"],"names":["prefersDarkMode","window","matchMedia","matches","WALLET_CONNECT_V1_MODULE_NAME","WALLET_MODULES","WALLET_KEYS","injectedWalletModule","pairingModule","helpers","walletConnectModule","walletConnect","version","bridge","WC_BRIDGE","label","chain","WC_PROJECT_ID","projectId","qrModalOptions","themeVariables","themeMode","requiredChains","parseInt","chainId","walletConnectV2","ledgerModule","trezorModule","appUrl","TREZOR_APP_URL","email","TREZOR_EMAIL","keystoneModule","tahoModule","coinbaseModule","darkMode","getAllWallets","Object","values","map","module","getRecommendedInjectedWallets","name","ProviderLabel","url","isWalletSupported","disabledWallets","walletLabel","legacyWalletName","CGW_NAMES","toUpperCase","includes","getSupportedWallets","Cypress","CYPRESS_MNEMONIC","e2eWalletModule","rpcUri","enabledWallets","entries","filter","key","length","INJECTED"],"sourceRoot":""}