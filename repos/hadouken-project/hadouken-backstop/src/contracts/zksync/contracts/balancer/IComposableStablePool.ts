/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IComposableStablePoolInterface extends utils.Interface {
  functions: {
    "getAmplificationParameter()": FunctionFragment;
    "getBptIndex()": FunctionFragment;
    "getScalingFactors()": FunctionFragment;
    "getSwapFeePercentage()": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAmplificationParameter"
      | "getBptIndex"
      | "getScalingFactors"
      | "getSwapFeePercentage"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmplificationParameter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBptIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmplificationParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBptIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IComposableStablePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IComposableStablePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAmplificationParameter(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        value: BigNumber;
        isUpdating: boolean;
        precision: BigNumber;
      }
    >;

    getBptIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getScalingFactors(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getAmplificationParameter(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      value: BigNumber;
      isUpdating: boolean;
      precision: BigNumber;
    }
  >;

  getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getAmplificationParameter(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        value: BigNumber;
        isUpdating: boolean;
        precision: BigNumber;
      }
    >;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAmplificationParameter(overrides?: CallOverrides): Promise<BigNumber>;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmplificationParameter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBptIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScalingFactors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
