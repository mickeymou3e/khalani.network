/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LiquidationMock,
  LiquidationMockInterface,
} from "../../../contracts/mocks/LiquidationMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidationToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "liquidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "backstop",
        type: "address",
      },
    ],
    name: "setBackstop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sendAmount",
        type: "uint256",
      },
    ],
    name: "setSendAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0004000000000002000100000000000200000000030100190000006003300270000000540430019700030000004103550002000000010355000000540030019d000100000000001f0000000101200190000000330000c13d0000008001000039000000400010043f0000000001000031000000040110008c000000f90000413d0000000201000367000000000101043b000000e0011002700000005b0210009c000000960000613d0000005c0210009c0000007b0000613d0000005d0110009c000000f90000c13d0000000001000416000000000101004b000000f90000c13d000000040100008a00000000011000310000005602000041000000200310008c000000000300001900000000030240190000005601100197000000000401004b000000000200a019000000560110009c00000000010300190000000001026019000000000101004b000000f90000c13d00000004010000390000000201100367000000000101043b0000000202000039000000000012041b000000000100001900000000020000190000000003000019014901280000040f0000000001000416000000000101004b000000f90000c13d00000000010000310000009f02100039000000200300008a000000000232016f000000550320009c000000430000413d0000005a0100004100000000001004350000004101000039000000040010043f00000024020000390000000001000019014901320000040f000000400020043f0000001f0210018f00000002030003670000000504100272000000510000613d00000000050000190000000506500210000000000763034f000000000707043b000000800660003900000000007604350000000105500039000000000645004b000000490000413d000000000502004b000000600000613d0000000504400210000000000343034f00000003022002100000008004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f00000000002404350000005602000041000000200310008c000000000300001900000000030240190000005601100197000000000401004b000000000200a019000000560110009c00000000010300190000000001026019000000000101004b000000f90000c13d000000800100043d000000570210009c000000f90000213d0000000102000039000000000302041a0000005803300197000000000113019f000000000012041b000000200100003900000100001004430000012000000443000001000100003900000040020000390000005903000041014901280000040f0000000001000416000000000101004b000000f90000c13d000000040100008a00000000011000310000005602000041000000200310008c000000000300001900000000030240190000005601100197000000000401004b000000000200a019000000560110009c00000000010300190000000001026019000000000101004b000000f90000c13d0149013b0000040f0000005701100197000000000200041a0000005802200197000000000112019f000000000010041b000000000100001900000000020000190000000003000019014901280000040f0000000001000416000000000101004b000000f90000c13d000000040100008a00000000011000310000005602000041000000800310008c000000000300001900000000030240190000005601100197000000000401004b000000000200a019000000560110009c00000000010300190000000001026019000000000101004b000000f90000c13d00000002010003670000000402100370000000000202043b000000570220009c000000f90000213d0000002402100370000000000202043b000000570220009c000000f90000213d0000004401100370000000000101043b000000570110009c000000f90000213d0000000101000039000000000201041a0000000205000039000000000105041a000000000300041a0000005e04000041000000800040043f0000005703300197000000840030043f000000a40010043f00000000010004140000005702200197000000040320008c000000e70000613d000100000005001d014900fc0000040f0000000105000029000000000101004b000000e70000c13d0000000302000367000000400100043d00000001040000310000001f0340018f0000000504400272000000d60000613d000000000500001900000005065002100000000007610019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b000000ce0000413d000000000503004b000000e50000613d0000000504400210000000000242034f00000000044100190000000303300210000000000504043300000000053501cf000000000535022f000000000202043b0000010003300089000000000232022f00000000023201cf000000000252019f00000000002404350000000102000031014901320000040f0000000101000031000000200210008c00000020010080390000009f01100039000000e00110018f000000400010043f000000f90000413d000000800200043d000000000302004b0000000003000019000000010300c039000000000232004b000000f90000c13d000000000205041a000000000021043500000020020000390000000003000019014901280000040f00000000010000190000000002000019014901320000040f0000005403000041000000540410009c0000000001038019000000c0011002100000005f011001c7014901440000040f000000000301001900000060033002700000005403300197000000200430008c000000200500003900000000050340190000001f0450018f0000000505500272000001140000613d00000000060000190000000507600210000000000871034f000000000808043b000000800770003900000000008704350000000106600039000000000756004b0000010c0000413d000000010220018f000000000604004b000001240000613d0000000505500210000000000651034f00000003044002100000008005500039000000000705043300000000074701cf000000000747022f000000000606043b0000010004400089000000000646022f00000000044601cf000000000474019f0000000000450435000100000003001f00030000000103550000000001020019000000000001042d0000005404000041000000540510009c000000000104801900000040011002100000000001310019000000540320009c0000000002048019000000600220021000000000012100190000014a0001042e0000005403000041000000540420009c0000000002038019000000540410009c000000000103801900000040011002100000006002200210000000000112019f0000014b0001043000000004010000390000000201100367000000000101043b000000600210009c000001410000813d000000000001042d00000000010000190000000002000019014901320000040f00000147002104210000000102000039000000000001042d0000000002000019000000000001042d00000149000004320000014a0001042e0000014b00010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000100000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aab3f86800000000000000000000000000000000000000000000000000000000916c2b8700000000000000000000000000000000000000000000000000000000266b059ea9059cbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440000008000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084224eda8a95cf2a7260d87f0cd637f68b864e88928171825952a079fe43c052";

type LiquidationMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidationMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidationMock__factory extends ContractFactory {
  constructor(...args: LiquidationMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    liquidationToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidationMock> {
    return super.deploy(
      liquidationToken,
      overrides || {}
    ) as Promise<LiquidationMock>;
  }
  override getDeployTransaction(
    liquidationToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(liquidationToken, overrides || {});
  }
  override attach(address: string): LiquidationMock {
    return super.attach(address) as LiquidationMock;
  }
  override connect(signer: Signer): LiquidationMock__factory {
    return super.connect(signer) as LiquidationMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidationMockInterface {
    return new utils.Interface(_abi) as LiquidationMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidationMock {
    return new Contract(address, _abi, signerOrProvider) as LiquidationMock;
  }
}
