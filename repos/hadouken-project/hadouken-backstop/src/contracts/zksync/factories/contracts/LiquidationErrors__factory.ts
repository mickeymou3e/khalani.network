/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LiquidationErrors,
  LiquidationErrorsInterface,
} from "../../contracts/LiquidationErrors";

const _abi = [
  {
    inputs: [],
    name: "ADDRESS_NOT_FOUND",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NOT_ENOUGHT_BALANCE_IN_BACKSTOP",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NOT_ENOUGHT_DEBT_TOKENS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NO_STEPS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_ADDRESS_FOR_WRAPPED_TOKENS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_CONFIGURATION_OR_UNDERYLING_TOKEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_UNDERYLING_TOKEN_TO_LINEAR_TOKEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_UNDERYLING_TOKEN_TO_POOL_ID",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000000000200010000000103550000006001100270000000520010019d0000008001000039000000400010043f0000000101200190000000390000c13d0000000001000031000000040210008c000000ec0000413d0000000102000367000000000202043b000000e002200270000000540320009c000000df0000613d000000550320009c000000430000613d000000560320009c0000005d0000613d000000570320009c000000770000613d000000580320009c000000910000613d000000590320009c000000ab0000613d0000005a0320009c000000c50000613d0000005b0220009c000000ec0000c13d000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142010f0000040f0000000002010019000000200120003900000064030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f0000000001000416000000000101004b000000ec0000c13d000000200100003900000100001004430000012000000443000001000100003900000040020000390000005303000041014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142011e0000040f0000000002010019000000200120003900000063030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142010f0000040f0000000002010019000000200120003900000062030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142011e0000040f0000000002010019000000200120003900000061030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142011e0000040f0000000002010019000000200120003900000060030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142011e0000040f000000000201001900000020012000390000005f030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ec0000c13d0142011e0000040f000000000201001900000020012000390000005e030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f000000040110008a0000005c02000041000000000301004b000000000300001900000000030240190000005c01100197000000000401004b000000000200a0190000005c0110009c00000000010300190000000001026019000000000101004b000000ef0000613d00000000010000190000000002000019014201060000040f0142011e0000040f000000000201001900000020012000390000005d030000410000000000310435000000400100043d000100000001001d0142012d0000040f0000000103000029000000000231004900000000010300190000000003000019014200fc0000040f0000005204000041000000520510009c000000000104801900000040011002100000000001310019000000520320009c000000000204801900000060022002100000000001210019000001430001042e0000005203000041000000520420009c0000000002038019000000520410009c000000000103801900000040011002100000006002200210000000000112019f0000014400010430000000400100043d000000650210009c000001170000813d0000004002100039000000400020043f00000002020000390000000000210435000000000001042d000000660100004100000000001004350000004101000039000000040010043f00000024020000390000000001000019014201060000040f000000400100043d000000650210009c000001260000813d0000004002100039000000400020043f00000001020000390000000000210435000000000001042d000000660100004100000000001004350000004101000039000000040010043f00000024020000390000000001000019014201060000040f000000200300003900000000043104360000000003020433000000000034043500000040011000390000000004000019000000000534004b0000013b0000813d00000000054100190000002004400039000000000624001900000000060604330000000000650435000001330000013d000000000231001900000000000204350000001f02300039000000200300008a000000000232016f0000000001210019000000000001042d0000014200000432000001430001042e000001440001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d441e9bf00000000000000000000000000000000000000000000000000000000128176ef000000000000000000000000000000000000000000000000000000001ef93962000000000000000000000000000000000000000000000000000000004a9001ae000000000000000000000000000000000000000000000000000000007e16d91f000000000000000000000000000000000000000000000000000000007f0c12d700000000000000000000000000000000000000000000000000000000b1de8cc700000000000000000000000000000000000000000000000000000000064c274bffffffffffffffc04e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020c87ca9f3f77cccca16314dca546e5c217d326bc5a3f9eee65fc64ed6719045";

type LiquidationErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidationErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidationErrors__factory extends ContractFactory {
  constructor(...args: LiquidationErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidationErrors> {
    return super.deploy(overrides || {}) as Promise<LiquidationErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidationErrors {
    return super.attach(address) as LiquidationErrors;
  }
  override connect(signer: Signer): LiquidationErrors__factory {
    return super.connect(signer) as LiquidationErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidationErrorsInterface {
    return new utils.Interface(_abi) as LiquidationErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidationErrors {
    return new Contract(address, _abi, signerOrProvider) as LiquidationErrors;
  }
}
