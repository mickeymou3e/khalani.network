/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidationMock,
  LiquidationMockInterface,
} from "../LiquidationMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidationToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "liquidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "backstop",
        type: "address",
      },
    ],
    name: "setBackstop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sendAmount",
        type: "uint256",
      },
    ],
    name: "setSendAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461007457601f61026138819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600180546001600160a01b0319169190911790556040516101d190816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c8063266b059e14610165578063916c2b871461012f5763aab3f8681461004057600080fd5b3461010557608036600319011261010557610059610180565b50816001600160a01b036024358181160361010557604435818116036101055760448360209383829460015416908254166002549063a9059cbb60e01b8552600485015260248401525af18015610124576100bc575b6020600254604051908152f35b60203d811161011d575b601f8101601f1916820167ffffffffffffffff8111838210176101095760209183916040528101031261010557518015150361010257806100af565b80fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b503d6100c6565b6040513d84823e3d90fd5b8234610102576020366003190112610102576001600160a01b03610151610180565b82546001600160a01b031916911617815580f35b82346101025760203660031901126101025760043560025580f35b600435906001600160a01b038216820361019657565b600080fdfea26469706673582212208bfadea9595dcb2ee3705ece3bc96c5bb9cd89d606d8b6203d533c34b6569b7e64736f6c63430008130033";

export class LiquidationMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    liquidationToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidationMock> {
    return super.deploy(
      liquidationToken,
      overrides || {}
    ) as Promise<LiquidationMock>;
  }
  getDeployTransaction(
    liquidationToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(liquidationToken, overrides || {});
  }
  attach(address: string): LiquidationMock {
    return super.attach(address) as LiquidationMock;
  }
  connect(signer: Signer): LiquidationMock__factory {
    return super.connect(signer) as LiquidationMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidationMockInterface {
    return new utils.Interface(_abi) as LiquidationMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidationMock {
    return new Contract(address, _abi, signerOrProvider) as LiquidationMock;
  }
}
