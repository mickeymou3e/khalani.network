/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidationErrors,
  LiquidationErrorsInterface,
} from "../LiquidationErrors";

const _abi = [
  {
    inputs: [],
    name: "ADDRESS_NOT_FOUND",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NOT_ENOUGHT_BALANCE_IN_BACKSTOP",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NOT_ENOUGHT_DEBT_TOKENS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NO_STEPS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_ADDRESS_FOR_WRAPPED_TOKENS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_CONFIGURATION_OR_UNDERYLING_TOKEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_UNDERYLING_TOKEN_TO_LINEAR_TOKEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WRONG_UNDERYLING_TOKEN_TO_POOL_ID",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a576102c59081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c8063064c274b146101ba578063128176ef1461018d5780631ef939621461015f5780634a9001ae146101325780637e16d91f146101055780637f0c12d7146100d8578063b1de8cc7146100ab5763d441e9bf1461007757600080fd5b816003193601126100a7576100a39061008e610222565b90603760f81b60208301525191829182610246565b0390f35b5080fd5b50816003193601126100a7576100a3906100c3610222565b90600760fb1b60208301525191829182610246565b50816003193601126100a7576100a3906100f0610222565b90603960f81b60208301525191829182610246565b50816003193601126100a7576100a39061011d610222565b90603160f81b60208301525191829182610246565b50816003193601126100a7576100a39061014a610222565b90601960f91b60208301525191829182610246565b50816003193601126100a7576100a3906101776101e8565b9061313160f01b60208301525191829182610246565b50816003193601126100a7576100a3906101a5610222565b90600d60fa1b60208301525191829182610246565b50816003193601126100a7576100a3906101d26101e8565b9061031360f41b60208301525191829182610246565b604051906040820182811067ffffffffffffffff82111761020c5760405260028252565b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761020c5760405260018252565b6020808252825181830181905290939260005b82811061027b57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161025956fea264697066735822122012988db58e1bb73369cc9f0b26c19ae9f6b96160796ad8895c049b55e1321c7964736f6c63430008130033";

export class LiquidationErrors__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidationErrors> {
    return super.deploy(overrides || {}) as Promise<LiquidationErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidationErrors {
    return super.attach(address) as LiquidationErrors;
  }
  connect(signer: Signer): LiquidationErrors__factory {
    return super.connect(signer) as LiquidationErrors__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidationErrorsInterface {
    return new utils.Interface(_abi) as LiquidationErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidationErrors {
    return new Contract(address, _abi, signerOrProvider) as LiquidationErrors;
  }
}
