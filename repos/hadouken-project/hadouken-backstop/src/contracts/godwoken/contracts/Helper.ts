/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IVault {
  export type FundManagementStruct = {
    sender: PromiseOrValue<string>;
    fromInternalBalance: PromiseOrValue<boolean>;
    recipient: PromiseOrValue<string>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type FundManagementStructOutput = [
    string,
    boolean,
    string,
    boolean
  ] & {
    sender: string;
    fromInternalBalance: boolean;
    recipient: string;
    toInternalBalance: boolean;
  };
}

export interface HelperInterface extends utils.Interface {
  functions: {
    "encodeExitPoolUserData(uint256,uint256,uint256)": FunctionFragment;
    "encodeJoinPoolUserData(uint256,uint256[],uint256)": FunctionFragment;
    "getFundManagement(address)": FunctionFragment;
    "skipBptIndex(uint256,uint256)": FunctionFragment;
    "toString(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "encodeExitPoolUserData"
      | "encodeJoinPoolUserData"
      | "getFundManagement"
      | "skipBptIndex"
      | "toString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeExitPoolUserData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeJoinPoolUserData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundManagement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "skipBptIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeExitPoolUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeJoinPoolUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skipBptIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;

  events: {};
}

export interface Helper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeExitPoolUserData(
      kind: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeJoinPoolUserData(
      stablePoolJoinKind: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      minimumBpt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFundManagement(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVault.FundManagementStructOutput]>;

    skipBptIndex(
      index: PromiseOrValue<BigNumberish>,
      bptIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  encodeExitPoolUserData(
    kind: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeJoinPoolUserData(
    stablePoolJoinKind: PromiseOrValue<BigNumberish>,
    amounts: PromiseOrValue<BigNumberish>[],
    minimumBpt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFundManagement(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVault.FundManagementStructOutput>;

  skipBptIndex(
    index: PromiseOrValue<BigNumberish>,
    bptIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toString(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    encodeExitPoolUserData(
      kind: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeJoinPoolUserData(
      stablePoolJoinKind: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      minimumBpt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFundManagement(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVault.FundManagementStructOutput>;

    skipBptIndex(
      index: PromiseOrValue<BigNumberish>,
      bptIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    encodeExitPoolUserData(
      kind: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeJoinPoolUserData(
      stablePoolJoinKind: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      minimumBpt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundManagement(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skipBptIndex(
      index: PromiseOrValue<BigNumberish>,
      bptIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeExitPoolUserData(
      kind: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeJoinPoolUserData(
      stablePoolJoinKind: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      minimumBpt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundManagement(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skipBptIndex(
      index: PromiseOrValue<BigNumberish>,
      bptIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
