/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidationInterface extends ethers.utils.Interface {
  functions: {
    "_ckbPools(uint256)": FunctionFragment;
    "_ethPools(uint256)": FunctionFragment;
    "_lendingPool()": FunctionFragment;
    "_poolIds(uint256)": FunctionFragment;
    "_triCryptoPool()": FunctionFragment;
    "_triCryptoPoolId()": FunctionFragment;
    "_triCryptoPoolTokens(uint256)": FunctionFragment;
    "_usdPools(uint256)": FunctionFragment;
    "_vault()": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getTriCryptoPoolTokens()": FunctionFragment;
    "liquidate(address,address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_ckbPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_ethPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_poolIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_triCryptoPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_triCryptoPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_triCryptoPoolTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_usdPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTriCryptoPoolTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_ckbPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ethPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_poolIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_triCryptoPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_triCryptoPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_triCryptoPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_usdPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTriCryptoPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Liquidation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidationInterface;

  functions: {
    _ckbPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _ethPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _lendingPool(overrides?: CallOverrides): Promise<[string]>;

    _poolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _triCryptoPool(overrides?: CallOverrides): Promise<[string]>;

    _triCryptoPoolId(overrides?: CallOverrides): Promise<[string]>;

    _triCryptoPoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _usdPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _vault(overrides?: CallOverrides): Promise<[string]>;

    getAllPools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        ckbPools: string[];
        ethPools: string[];
        usdPools: string[];
      }
    >;

    getTriCryptoPoolTokens(overrides?: CallOverrides): Promise<[string[]]>;

    liquidate(
      debtToken: string,
      collateralToken: string,
      user: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _ckbPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _ethPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _lendingPool(overrides?: CallOverrides): Promise<string>;

  _poolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _triCryptoPool(overrides?: CallOverrides): Promise<string>;

  _triCryptoPoolId(overrides?: CallOverrides): Promise<string>;

  _triCryptoPoolTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _usdPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _vault(overrides?: CallOverrides): Promise<string>;

  getAllPools(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string[]] & {
      ckbPools: string[];
      ethPools: string[];
      usdPools: string[];
    }
  >;

  getTriCryptoPoolTokens(overrides?: CallOverrides): Promise<string[]>;

  liquidate(
    debtToken: string,
    collateralToken: string,
    user: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _ckbPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _ethPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _lendingPool(overrides?: CallOverrides): Promise<string>;

    _poolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _triCryptoPool(overrides?: CallOverrides): Promise<string>;

    _triCryptoPoolId(overrides?: CallOverrides): Promise<string>;

    _triCryptoPoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _usdPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _vault(overrides?: CallOverrides): Promise<string>;

    getAllPools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        ckbPools: string[];
        ethPools: string[];
        usdPools: string[];
      }
    >;

    getTriCryptoPoolTokens(overrides?: CallOverrides): Promise<string[]>;

    liquidate(
      debtToken: string,
      collateralToken: string,
      user: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _ckbPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _ethPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    _poolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _triCryptoPool(overrides?: CallOverrides): Promise<BigNumber>;

    _triCryptoPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    _triCryptoPoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _usdPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _vault(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getTriCryptoPoolTokens(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      debtToken: string,
      collateralToken: string,
      user: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _ckbPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _ethPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _poolIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _triCryptoPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _triCryptoPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _triCryptoPoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _usdPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTriCryptoPoolTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      debtToken: string,
      collateralToken: string,
      user: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
