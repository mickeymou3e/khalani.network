/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { UserBalances } from "../UserBalances";

export class UserBalances__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UserBalances> {
    return super.deploy(overrides || {}) as Promise<UserBalances>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UserBalances {
    return super.attach(address) as UserBalances;
  }
  connect(signer: Signer): UserBalances__factory {
    return super.connect(signer) as UserBalances__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserBalances {
    return new Contract(address, _abi, signerOrProvider) as UserBalances;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "balancesOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061035b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e098e84414610030575b600080fd5b61004361003e3660046101af565b610059565b6040516100509190610289565b60405180910390f35b6060815167ffffffffffffffff81111561007557610075610189565b60405190808252806020026020018201604052801561009e578160200160208202803683370190505b50905060005b825181101561016a5760008382815181106100c1576100c16102cd565b60209081029190910101516040516370a0823160e01b81526001600160a01b038781166004830152919250908216906370a0823190602401602060405180830381865afa158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a91906102e3565b83838151811061014c5761014c6102cd565b60209081029190910101525080610162816102fc565b9150506100a4565b5092915050565b6001600160a01b038116811461018657600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80356101aa81610171565b919050565b600080604083850312156101c257600080fd5b82356101cd81610171565b915060208381013567ffffffffffffffff808211156101eb57600080fd5b818601915086601f8301126101ff57600080fd5b81358181111561021157610211610189565b8060051b604051601f19603f8301168101818110858211171561023657610236610189565b60405291825284820192508381018501918983111561025457600080fd5b938501935b828510156102795761026a8561019f565b84529385019392850192610259565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156102c1578351835292840192918401916001016102a5565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156102f557600080fd5b5051919050565b600060001982141561031e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220f0b7e503921af1e3189c17f376e52af99b68df8114e2f379e23729e1cc6c34d964736f6c634300080a0033";
