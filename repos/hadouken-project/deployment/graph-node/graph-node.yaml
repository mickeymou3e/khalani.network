AWSTemplateFormatVersion: "2010-09-09"
Description: Container service on ECS cluster

Parameters:
  Environment:
    Type: String
  ApplicationName:
    Type: String
  ServiceName:
    Type: String

  LogGroupName:
    Type: String

  VpcId:
    Type: String
  Subnets:
    Type: String

  GraphNodeName:
    Type: String
  IPFSName:
    Type: String
  GraphNodeAdminPort:
    Type: Number
    Default: 8020
  GraphNodeHttpGraphQLPort:
    Type: Number
    Default: 8000
  GraphNodeCleanupBlocks:
    Type: String
    Default: false
  GraphNodeWsGraphQLPort:
    Type: Number
    Default: 8001
  GraphNodeIndexerPort:
    Type: Number
    Default: 8030
  ChainsNames:
    Type: String
  ChainsRpcUrls:
    Type: String
  GraphConfigFilePath:
    Type: String
    Default: /etc/graph-node
  IPFSPort:
    Type: Number
    Default: 5001
  GraphNodeAdminRoute:
    Description: Graph Node Admin Route
    Type: String
  GraphNodeIndexerRoute:
    Description: Graph Node Indexer Route
    Type: String
  GraphNodeHttpClientRoute:
    Description: Graph Node HTTP Client Route
    Type: String
  GraphNodeWsClientRoute:
    Description: Graph Node HTTP Client Route
    Type: String
  IPFSRoute:
    Description: IPFS Route
    Type: String
  GraphNodeGraphQLHealthCheckPath:
    Type: String
    Default: /subgraphs/name/example/graphql
  IPFSHealthCheckPath:
    Type: String
    Default: /webui/
  LoadBalancerSecurityGroup:
    Type: String
  LoadBalancerListenerArn:
    Type: String

  IPFSImageTag:
    Type: String
    Description: IPFS docker image tag
  GraphNodeImageTag:
    Type: String
    Description: Graph node docker image tag

  DBHost:
    Type: String
  DBName:
    Type: String
  DBSecret:
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["", [!Ref ApplicationName, ECSCluster]]

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: ECS Containers Security Group
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecs:DescribeTasks
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:*:*:secret:/${ApplicationName}/${Environment}/*
  IPFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Ref ECSCluster

  IPFSFileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ContainerSecurityGroup
          IpProtocol: -1

  MountTargetSubnet0:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - IPFSFileSystem
      - IPFSFileSystemSecurityGroup
    Properties:
      FileSystemId: !Ref IPFSFileSystem
      SecurityGroups:
        - !Ref IPFSFileSystemSecurityGroup
      SubnetId: !Select [0, !Split [",", !Ref Subnets]]

  MountTargetSubnet1:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - IPFSFileSystem
      - IPFSFileSystemSecurityGroup
    Properties:
      FileSystemId: !Ref IPFSFileSystem
      SecurityGroups:
        - !Ref IPFSFileSystemSecurityGroup
      SubnetId: !Select [1, !Split [",", !Ref Subnets]]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - IPFSFileSystem
    Properties:
      NetworkMode: awsvpc
      Cpu: 2048
      Memory: 4096
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Image: !Ref IPFSImageTag
          Name: !Ref IPFSName
          Essential: true
          Memory: 1024
          MemoryReservation: 1024
          PortMappings:
            - ContainerPort: !Ref IPFSPort
              Protocol: tcp
          MountPoints:
            - SourceVolume: !Sub ${IPFSName}-efs
              ContainerPath: /data/ipfs
              ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref IPFSName

        - Image: !Ref GraphNodeImageTag
          Name: !Ref GraphNodeName
          Essential: true
          Memory: 3072
          MemoryReservation: 3072
          Command:
            - /bin/sh
            - "-c"
            - !Sub >-
              mkdir -p ${GraphConfigFilePath} && 
              echo $GRAPH_CONFIG_FILE_CONTENT | base64 -d > ${GraphConfigFilePath}/config.toml && 
              sed -i "s/PG_USERNAME/$PG_USERNAME/g; s/PG_PASSWORD/$PG_PASSWORD/g" ${GraphConfigFilePath}/config.toml && 
              cat ${GraphConfigFilePath}/config.toml && 
              start
          DependsOn:
            - Condition: START
              ContainerName: !Ref IPFSName
          Environment:
            - Name: node_id
              Value: index_node_0
            - Name: GRAPH_NODE_ID
              Value: index_node_0
            - Name: ipfs
              Value: !Sub 127.0.0.1:${IPFSPort}
            - Name: GRAPH_NODE_CONFIG
              Value: !Sub ${GraphConfigFilePath}/config.toml
            - Name: GRAPH_LOG
              Value: debug
            - Name: GRAPH_EXPERIMENTAL_FETCH_TXN_RECEIPTS_CONCURRENTLY
              Value: true
            - Name: PG_USERNAME
              Value: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:username}}"
            - Name: GRAPH_ETHEREUM_CLEANUP_BLOCKS
              Value: !Ref GraphNodeCleanupBlocks
            - Name: GRAPH_GETH_ETH_CALL_ERRORS
              Value: 'revert;Error;cannot estimate gas;Failed to submit transaction: cannot estimate gas;ServerError(3);Failed to submit transaction;String("cannot estimate gas")'
            - Name: PG_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${DBSecret}:SecretString:password}}"
            - Name: GRAPH_CONFIG_FILE_CONTENT
              Value: !Base64
                Fn::Sub:
                  - |-
                    [store]
                    [store.primary]
                    connection = "postgresql://PG_USERNAME:PG_PASSWORD@${DBHost}/${DBName}"
                    pool_size=10

                    [chains]
                    ingestor = "block_ingestor_node"
                    [chains.${ChainName_0}]
                    shard = "primary"
                    provider = [ 
                      { label = "${ChainName_0}", url = "${ChainRpcUrl_0}", features = [ "archive", "traces", "no_eip1898" ]  } 
                    ]
                    [chains.${ChainName_1}]
                    shard = "primary"
                    provider = [ 
                      { label = "${ChainName_1}", url = "${ChainRpcUrl_1}", features = [ "archive", "traces", "no_eip1898" ]  } 
                    ]
                    [chains.${ChainName_2}]
                    shard = "primary"
                    provider = [
                      { label = "${ChainName_2}", url = "${ChainRpcUrl_2}", features = [ "archive", "traces", "no_eip1898" ]  } 
                    ]

                    [deployment]
                    [[deployment.rule]]
                    indexers = [ "index_node_0" ]
                  - ChainName_0: !Select [0, !Split [",", !Ref ChainsNames]]
                    ChainName_1: !Select [1, !Split [",", !Ref ChainsNames]]
                    ChainName_2: !Select [2, !Split [",", !Ref ChainsNames]]
                    ChainRpcUrl_0: !Select [0, !Split [",", !Ref ChainsRpcUrls]]
                    ChainRpcUrl_1: !Select [1, !Split [",", !Ref ChainsRpcUrls]]
                    ChainRpcUrl_2: !Select [2, !Split [",", !Ref ChainsRpcUrls]]

          PortMappings:
            - ContainerPort: !Ref GraphNodeHttpGraphQLPort
              Protocol: tcp
            - ContainerPort: !Ref GraphNodeWsGraphQLPort
              Protocol: tcp
            - ContainerPort: !Ref GraphNodeAdminPort
              Protocol: tcp
            - ContainerPort: !Ref GraphNodeIndexerPort
              Protocol: tcp
            - ContainerPort: 8040
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref GraphNodeName
      Volumes:
        - Name: !Sub ${IPFSName}-efs
          EFSVolumeConfiguration:
            FilesystemId: !Ref IPFSFileSystem
            RootDirectory: /

  SubgraphSecretDefinition:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /${ApplicationName}/${Environment}/secrets
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "ACCESS_TOKEN"
        ExcludeCharacters: '"@/\'
        ExcludePunctuation: true
        PasswordLength: 32

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - GraphNodeAdminListenerRule
      - GraphNodeIndexerListenerRule
      - GraphNodeHttpGraphQLListenerRule
      - GraphNodeWsGraphQLListenerRule
      - IPFSListenerRule
    Properties:
      ServiceName: !Join ["", [!Ref ServiceName, Service]]
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        - TargetGroupArn: !Ref GraphNodeHttpGraphQLTargetGroup
          ContainerName: !Ref GraphNodeName
          ContainerPort: !Ref GraphNodeHttpGraphQLPort

        - TargetGroupArn: !Ref GraphNodeWsGraphQLTargetGroup
          ContainerName: !Ref GraphNodeName
          ContainerPort: !Ref GraphNodeWsGraphQLPort

        - TargetGroupArn: !Ref GraphNodeAdminTargetGroup
          ContainerName: !Ref GraphNodeName
          ContainerPort: !Ref GraphNodeAdminPort

        - TargetGroupArn: !Ref GraphNodeIndexerTargetGroup
          ContainerName: !Ref GraphNodeName
          ContainerPort: !Ref GraphNodeIndexerPort

        - TargetGroupArn: !Ref IPFSTargetGroup
          ContainerName: !Ref IPFSName
          ContainerPort: !Ref IPFSPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split [",", !Ref Subnets]
          SecurityGroups:
            - !Ref ContainerSecurityGroup

  GraphNodeAdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${GraphNodeName}-admin-tg
      VpcId: !Ref VpcId
      Port: !Ref GraphNodeAdminPort
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      Matcher:
        HttpCode: 405

  GraphNodeHttpGraphQLTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${GraphNodeName}-http-graphql-tg
      VpcId: !Ref VpcId
      Port: !Ref GraphNodeHttpGraphQLPort
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      HealthCheckPort: !Ref GraphNodeHttpGraphQLPort
      HealthCheckPath: !Ref GraphNodeGraphQLHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      Matcher:
        HttpCode: 200

  GraphNodeWsGraphQLTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${GraphNodeName}-ws-graphql-tg
      VpcId: !Ref VpcId
      Port: !Ref GraphNodeWsGraphQLPort
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      HealthCheckPort: !Ref GraphNodeHttpGraphQLPort
      HealthCheckPath: !Ref GraphNodeGraphQLHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      Matcher:
        HttpCode: 200

  GraphNodeIndexerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${GraphNodeName}-indexer-tg
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      Port: !Ref GraphNodeIndexerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10

  IPFSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${IPFSName}-tg
      VpcId: !Ref VpcId
      HealthCheckPath: !Ref IPFSHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      Port: !Ref IPFSPort
      Protocol: HTTP
      Matcher:
        HttpCode: 302
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10

  GraphNodeAdminListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 1
      Conditions:
        - Field: host-header
          Values:
            - !Ref GraphNodeAdminRoute
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: Authorization
            Values:
              - !Sub
                - "Bearer ${Token}"
                - Token: !Sub "{{resolve:secretsmanager:${SubgraphSecretDefinition}:SecretString:ACCESS_TOKEN}}"
      Actions:
        - TargetGroupArn: !Ref GraphNodeAdminTargetGroup
          Type: forward

  GraphNodeHttpGraphQLListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 2
      Conditions:
        - Field: host-header
          Values:
            - !Ref GraphNodeHttpClientRoute
      Actions:
        - TargetGroupArn: !Ref GraphNodeHttpGraphQLTargetGroup
          Type: forward

  GraphNodeWsGraphQLListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 3
      Conditions:
        - Field: host-header
          Values:
            - !Ref GraphNodeWsClientRoute
      Actions:
        - TargetGroupArn: !Ref GraphNodeWsGraphQLTargetGroup
          Type: forward

  GraphNodeIndexerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 4
      Conditions:
        - Field: host-header
          Values:
            - !Ref GraphNodeIndexerRoute
      Actions:
        - TargetGroupArn: !Ref GraphNodeIndexerTargetGroup
          Type: forward

  IPFSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 5
      Conditions:
        - Field: host-header
          Values:
            - !Ref IPFSRoute
      Actions:
        - TargetGroupArn: !Ref IPFSTargetGroup
          Type: forward

  GraphNodeHttpGraphQLListenerRuleRestricted:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 6
      Conditions:
        - Field: host-header
          Values:
            - !Ref GraphNodeAdminRoute
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Unauthorized"
            StatusCode: 401
