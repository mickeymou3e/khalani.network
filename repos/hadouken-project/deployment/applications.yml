Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
  ApplicationsBucketName:
    Type: String
  CertificateArn:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  ApplicationsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref ApplicationsBucketName

  ApplicationsOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${DomainName}

  FrontendCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - POST
            - HEAD
            - OPTIONS
            - DELETE
            - PUT
            - PATCH
          Compress: True
          ForwardedValues:
            QueryString: False
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          TargetOriginId:
            Fn::Join:
              - "-"
              - - S3
                - Ref: ApplicationsBucket
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref RewriteDirectoryRootFunction.Version
            - EventType: viewer-request
              LambdaFunctionARN: !Ref RedirectRootFunction.Version

        Enabled: True
        HttpVersion: http2
        IPV6Enabled: True
        Origins:
          - DomainName:
              Fn::GetAtt: [ ApplicationsBucket, RegionalDomainName ]
            Id:
              Fn::Join:
                - "-"
                - - S3
                  - Ref: ApplicationsBucket
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - "/"
                  - - origin-access-identity/cloudfront
                    - Ref: ApplicationsOriginAccessIdentity
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86000
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 86000
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"

  ApplicationAllowFromCloudFrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ApplicationsBucket
      PolicyDocument:
        Statement:
          - Sid: 1
            Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: ApplicationsBucket
                  - "/*"
            Principal:
              AWS:
                Fn::Join:
                  - " "
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                    - Ref: ApplicationsOriginAccessIdentity

  RewriteDirectoryRootFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.rewriteDirectoryRoot = (event, context, callback) => {
          const request = event.Records[0].cf.request;
          if (request.uri.match(/\./)) {
            return callback(null, request);
          }
          console.log(request);
          if (request.uri.match(/^\/lend/)) {
            request.uri = '/lend/index.html';
            return callback(null, request);
          }
          if (request.uri.match(/^\/swap/)) {
            request.uri = '/swap/index.html';
            return callback(null, request);
          }
          if (request.uri.match(/^\/bridge/)) {
            request.uri = '/bridge/index.html';
            return callback(null, request);
          }
          return callback(null, request);
        }

      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs14.x
      Handler: index.rewriteDirectoryRoot
      Timeout: 5
      AutoPublishAlias: live

  RedirectRootFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.redirectRoot = (event, context, callback) => {
          const request = event.Records[0].cf.request;

          if (request.uri.match(/^\/(lend|bridge|swap)/)) {
            return callback(null, request);
          } else {
            return callback(null, {
              status: '301',
              statusDescription: 'Moved permanently',
              headers: {
                location: [{key: 'Location', value: `/swap${request.uri}`}]
              }
            });
          }
        }
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs14.x
      Handler: index.redirectRoot
      Timeout: 5
      AutoPublishAlias: live

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

  CiDeployerUser:
    Type: AWS::IAM::User
    Properties:
      Path: "/"
      Policies:
        -
          PolicyName: allow-ci-to-update-website
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudfront:CreateInvalidation"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${ApplicationsBucket}
                  - !Sub arn:aws:s3:::${ApplicationsBucket}/**
  CiDeployerCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CiDeployerUser

  FrontendRoute53:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt: [ FrontendCloudFront, DomainName ]
        HostedZoneId: Z2FDTNDATAQYW2 # Static for CloudFront
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A

Outputs:
  CloudFrontDistributionId:
    Value: !Ref FrontendCloudFront
  DeployerAccessKeyId:
    Value: !Ref CiDeployerCredentials
  DeployerSecretAccessKey:
    Value: !GetAtt CiDeployerCredentials.SecretAccessKey
