{
  "address": "0xDaB633289973fB6a258cC100fc5C1F1493DEd394",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pCKBAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WCKBAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "baseTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum ArbitrageSwap.SwapOrder",
              "name": "order",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "batchSwapCalldata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "yokaiPoolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ArbitrageSwap.ArbitrageParams",
          "name": "arbitrageParams",
          "type": "tuple"
        }
      ],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "batchSwapCalldata",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "changeAmountInHadoukenCallData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x218309aad76db4f39b1f0b4aace6348dd963be8b1722f2ed7aa06f9414ab2d87",
  "receipt": {
    "to": null,
    "from": "0xA14d06ee65f19EA64548CA2effCc26925823827d",
    "contractAddress": "0xDaB633289973fB6a258cC100fc5C1F1493DEd394",
    "transactionIndex": 0,
    "gasUsed": "334463",
    "logsBloom": "0x
    "blockHash": "0x1e7a3bccca962e2545e8e2a5e945ded000d13f74891e06a392f31d27550615fe",
    "transactionHash": "0x218309aad76db4f39b1f0b4aace6348dd963be8b1722f2ed7aa06f9414ab2d87",
    "logs": [],
    "blockNumber": 2186816,
    "cumulativeGasUsed": "334463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd69FAC6C632eF023afCe7471Bda724b228237570",
    "0x72ddd1eca2af73024e0823C9a80B00de8e3f0070",
    "0xf3476352D9DcD38CCE088Ef6bf0812D23a58611B",
    "0xD3a77b082cF44a31B31768148539314Ac802c96C"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d361f96e7a8947cb8d0c9aebf475ac9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pCKBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WCKBAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum ArbitrageSwap.SwapOrder\",\"name\":\"order\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"batchSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"yokaiPoolAddress\",\"type\":\"address\"}],\"internalType\":\"struct ArbitrageSwap.ArbitrageParams\",\"name\":\"arbitrageParams\",\"type\":\"tuple\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"batchSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalance\",\"type\":\"uint256\"}],\"name\":\"changeAmountInHadoukenCallData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbitrageSwap.sol\":\"ArbitrageSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ArbitrageSwap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport {IFlashLoanReceiver} from './interfaces/IFlashLoanReceiver.sol';\\nimport {IYokaiRouter02} from './interfaces/IYokaiRouter02.sol';\\nimport {ILendingPool} from './interfaces/ILendingPool.sol';\\nimport {IVault} from './interfaces/IVault.sol';\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {IAsset} from './interfaces/IAsset.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport {IWETH} from './interfaces/IWETH.sol';\\n\\ncontract ArbitrageSwap is IFlashLoanReceiver {\\n  uint256 constant UINT256_MAX = type(uint256).max;\\n  ILendingPool private lendingPool;\\n  address private vaultAddress;\\n  IWETH private WCKB;\\n  IERC20 private pCKB;\\n\\n  enum SwapOrder {\\n    HADOUKEN_FIRST,\\n    YOKAI_FIRST\\n  }\\n\\n  struct ArbitrageParams {\\n    uint256 quoteAmount;\\n    address baseTokenAddress;\\n    address quoteTokenAddress;\\n    SwapOrder order;\\n    bytes batchSwapCalldata;\\n    address yokaiPoolAddress;\\n  }\\n\\n  constructor(\\n    address _vaultAddress,\\n    address lendingPoolAddress,\\n    address pCKBAddress,\\n    address WCKBAddress\\n  ) public {\\n    vaultAddress = _vaultAddress;\\n    lendingPool = ILendingPool(lendingPoolAddress);\\n    pCKB = IERC20(pCKBAddress);\\n    WCKB = IWETH(WCKBAddress);\\n  }\\n\\n  function arbitrage(ArbitrageParams memory arbitrageParams) external {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = arbitrageParams.quoteTokenAddress;\\n\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = arbitrageParams.quoteAmount;\\n\\n    uint256[] memory modes = new uint256[](1);\\n    modes[0] = 0;\\n\\n    bytes memory params = abi.encode(msg.sender, arbitrageParams);\\n\\n    lendingPool.flashLoan(\\n      address(this),\\n      tokens,\\n      amounts,\\n      modes,\\n      address(this),\\n      params,\\n      0\\n    );\\n  }\\n\\n  function swapYokai(\\n    IERC20 buyToken,\\n    IERC20 sellToken,\\n    uint256 amount,\\n    ArbitrageParams memory arbitrageParams\\n  ) private {\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = address(sellToken);\\n    tokens[1] = address(buyToken);\\n    sellToken.approve(arbitrageParams.yokaiPoolAddress, amount);\\n    IYokaiRouter02 yokaiPool = IYokaiRouter02(arbitrageParams.yokaiPoolAddress);\\n\\n    if (address(buyToken) == address(pCKB)) {\\n      tokens[1] = address(WCKB);\\n      yokaiPool.swapExactTokensForETH(\\n        amount,\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    } else if (address(sellToken) == address(pCKB)) {\\n      tokens[0] = address(WCKB);\\n      yokaiPool.swapExactETHForTokens{value: amount}(\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    } else {\\n      yokaiPool.swapExactTokensForTokens(\\n        amount,\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    }\\n  }\\n\\n  function swapHadouken(\\n    bytes memory batchSwapCalldata,\\n    IERC20 sellToken\\n  ) private {\\n    sellToken.approve(vaultAddress, sellToken.balanceOf(address(this)));\\n    (bool success, bytes memory result) = vaultAddress.call(batchSwapCalldata);\\n    if (!success) {\\n      assembly {\\n        revert(add(result, 32), result)\\n      }\\n    }\\n  }\\n\\n  function changeAmountInHadoukenCallData(\\n    bytes memory batchSwapCalldata,\\n    uint256 baseTokenBalance\\n  ) public view returns (bytes memory) {\\n    IVault.SwapKind kind;\\n    IVault.BatchSwapStep[] memory swaps;\\n    IAsset[] memory assets;\\n    IVault.FundManagement memory funds;\\n    int256[] memory limits;\\n    uint256 deadline;\\n    (kind, swaps, assets, funds, limits, deadline) = abi.decode(\\n      batchSwapCalldata,\\n      (\\n        IVault.SwapKind,\\n        IVault.BatchSwapStep[],\\n        IAsset[],\\n        IVault.FundManagement,\\n        int256[],\\n        uint256\\n      )\\n    );\\n\\n    uint256 totalIn = 0;\\n    for (uint i = 0; i < swaps.length; i++) {\\n      if (swaps[i].assetInIndex == 0) {\\n        totalIn += swaps[i].amount;\\n      }\\n    }\\n\\n    if (totalIn > baseTokenBalance) {\\n      swaps[0].amount -= totalIn - baseTokenBalance;\\n    } else if (totalIn < baseTokenBalance) {\\n      swaps[0].amount += baseTokenBalance - totalIn;\\n    }\\n\\n    return abi.encode(kind, swaps, assets, funds, limits, deadline);\\n  }\\n\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    address originalSender;\\n    ArbitrageParams memory arbitrageParams;\\n    (originalSender, arbitrageParams) = abi.decode(\\n      params,\\n      (address, ArbitrageParams)\\n    );\\n\\n    IERC20 baseToken = IERC20(arbitrageParams.baseTokenAddress);\\n    IERC20 quoteToken = IERC20(arbitrageParams.quoteTokenAddress);\\n\\n    if (arbitrageParams.order == SwapOrder.HADOUKEN_FIRST) {\\n      uint256 baseTokenAmount = baseToken.balanceOf(address(this));\\n      swapHadouken(arbitrageParams.batchSwapCalldata, quoteToken);\\n      uint256 baseTokenDelta = baseToken.balanceOf(address(this)) -\\n        baseTokenAmount;\\n      swapYokai(quoteToken, baseToken, baseTokenDelta, arbitrageParams);\\n    } else if (arbitrageParams.order == SwapOrder.YOKAI_FIRST) {\\n      uint256 baseTokenAmount = baseToken.balanceOf(address(this));\\n      swapYokai(baseToken, quoteToken, amounts[0], arbitrageParams);\\n      uint256 baseTokenDelta = baseToken.balanceOf(address(this)) -\\n        baseTokenAmount;\\n      bytes memory batchSwapCallData = changeAmountInHadoukenCallData(\\n        arbitrageParams.batchSwapCalldata,\\n        baseTokenDelta\\n      );\\n      swapHadouken(batchSwapCallData, baseToken);\\n    }\\n\\n    uint256 currentBalance = quoteToken.balanceOf(address(this));\\n    uint256 returnValue = amounts[0] + premiums[0];\\n\\n    if (returnValue > currentBalance) {\\n      revert(\\n        string.concat(\\n          'Negative profit! ',\\n          Strings.toString(returnValue - currentBalance)\\n        )\\n      );\\n    } else if (returnValue < currentBalance) {\\n      quoteToken.transfer(originalSender, currentBalance - returnValue);\\n    }\\n\\n    quoteToken.approve(address(lendingPool), returnValue);\\n\\n    return true;\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5067fbfcabae3871c7cef49963b0561f5e29843a475fbd132f56a1a31ad7b2a3\"},\"contracts/interfaces/DataTypes.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115: borrow cap\\n    //bit 116-151: deposit cap\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\",\"keccak256\":\"0x29c3f38a1db77a8204116c7ad5de876f4e9a5282fff066448b8a6912176dd21f\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n  // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5c0cbed4276476fdd8e9675d590ce1d549345a7413caeecbf3f9428152b75c95\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6ec6743aec8ac37526825d21adf54ff70c4c108d7f53f23757df45cb826dc0d7\"},\"contracts/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4f96bc2c0c080fdf63acd58041c9fc6036c9b24eed7ea891072b97c952d77e35\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"pragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\nimport './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function getReserveData(\\n    address asset\\n  ) external view returns (DataTypes.ReserveData memory);\\n}\\n\",\"keccak256\":\"0x7ab416b9861e7528ea34183a6c037c3b161473b201b7ba2af1e64f4fbadda657\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\nimport './IERC20.sol';\\nimport './IAsset.sol';\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n   *\\n   * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n   * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n   * equals the sum of `cash` and `managed`.\\n   *\\n   * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n   * `managed` or `total` balance to be greater than 2^112 - 1.\\n   *\\n   * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n   * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n   * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n   * change for this purpose, and will update `lastChangeBlock`.\\n   *\\n   * `assetManager` is the Pool's token Asset Manager.\\n   */\\n  function getPoolTokenInfo(\\n    bytes32 poolId,\\n    IERC20 token\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 cash,\\n      uint256 managed,\\n      uint256 lastChangeBlock,\\n      address assetManager\\n    );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n   * the tokens' `balances` changed.\\n   *\\n   * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n   * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n   *\\n   * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n   * order as passed to `registerTokens`.\\n   *\\n   * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n   * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n   * instead.\\n   */\\n  function getPoolTokens(\\n    bytes32 poolId\\n  )\\n    external\\n    view\\n    returns (\\n      IERC20[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 lastChangeBlock\\n    );\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n   *\\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n   * taken from the Pool, which must be greater than or equal to `limit`.\\n   *\\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n   * sent to the Pool, which must be less than or equal to `limit`.\\n   *\\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\\n   *\\n   * Emits a `Swap` event.\\n   */\\n  function swap(\\n    SingleSwap memory singleSwap,\\n    FundManagement memory funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n   * the `kind` value.\\n   *\\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n   * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n   *\\n   * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n   * the same index in the `assets` array.\\n   *\\n   * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n   * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n   * `amountOut` depending on the swap kind.\\n   *\\n   * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n   * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n   * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n   *\\n   * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n   * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n   * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n   * or unwrapped from WETH by the Vault.\\n   *\\n   * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n   * the minimum or maximum amount of each token the vault is allowed to transfer.\\n   *\\n   * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n   * equivalent `swap` call.\\n   *\\n   * Emits `Swap` events.\\n   */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    IAsset[] memory assets,\\n    FundManagement memory funds,\\n    int256[] memory limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n   * `assets` array passed to that function, and ETH assets are converted to WETH.\\n   *\\n   * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n   * from the previous swap, depending on the swap kind.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n   */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n   * `recipient` account.\\n   *\\n   * If the caller is not `sender`, it must be an authorized relayer for them.\\n   *\\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n   * `joinPool`.\\n   *\\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n   * transferred. This matches the behavior of `exitPool`.\\n   *\\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n   * revert.\\n   */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n   * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n   *\\n   * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n   * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n   * receives are the same that an equivalent `batchSwap` call would receive.\\n   *\\n   * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n   * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n   * approve them for the Vault, or even know a user's address.\\n   *\\n   * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n   * eth_call instead of eth_sendTransaction.\\n   */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    IAsset[] memory assets,\\n    FundManagement memory funds\\n  ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0x21429eef2966036d3b605520324366b414f12e12b4ab72c18ea8a22da7433281\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.12;\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint value) external override returns (bool);\\n\\n  function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x0f126f576265171363f7a1b14b61e9bbe23d29f6565ec625c8ae7333a5a702b2\"},\"contracts/interfaces/IYokaiRouter01.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\ninterface IYokaiRouter01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  ) external view returns (uint[] memory amounts);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  ) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd90f4e77a4f56f9c61054e2d55f7d423494f849515e84d4f85fa48146384f951\"},\"contracts/interfaces/IYokaiRouter02.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\nimport './IYokaiRouter01.sol';\\n\\ninterface IYokaiRouter02 is IYokaiRouter01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4a4e541ff17572dda4aa6a1d41d8581d5149848e7ce0b617fd4f592fadc01ec2\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80630bd6430514610044578063516a00dc14610081578063920f5c84146100aa5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906115b3565b6100e7565b6040516100789190611697565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190611802565b610269565b005b3480156100b657600080fd5b506100d160048036038101906100cc9190611957565b6104b2565b6040516100de9190611a6e565b60405180910390f35b606060006060806100f6611341565b606060008880602001905181019061010e9190611fe3565b809650819750829850839950849a50859b505050505050506000805b865181101561019a576000878281518110610148576101476120c6565b5b60200260200101516020015114156101875786818151811061016d5761016c6120c6565b5b602002602001015160600151826101849190612124565b91505b80806101929061217a565b91505061012a565b50888111156101e75788816101af91906121c3565b866000815181106101c3576101c26120c6565b5b60200260200101516060018181516101db91906121c3565b91508181525050610230565b8881101561022f5780896101fb91906121c3565b8660008151811061020f5761020e6120c6565b5b60200260200101516060018181516102279190612124565b915081815250505b5b86868686868660405160200161024b9695949392919061266b565b60405160208183030381529060405297505050505050505092915050565b6000600167ffffffffffffffff81111561028657610285611452565b5b6040519080825280602002602001820160405280156102b45781602001602082028036833780820191505090505b5090508160400151816000815181106102d0576102cf6120c6565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff81111561032757610326611452565b5b6040519080825280602002602001820160405280156103555781602001602082028036833780820191505090505b509050826000015181600081518110610371576103706120c6565b5b6020026020010181815250506000600167ffffffffffffffff81111561039a57610399611452565b5b6040519080825280602002602001820160405280156103c85781602001602082028036833780820191505090505b5090506000816000815181106103e1576103e06120c6565b5b602002602001018181525050600033856040516020016104029291906127c3565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b81526004016104799796959493929190612989565b600060405180830381600087803b15801561049357600080fd5b505af11580156104a7573d6000803e3d6000fd5b505050505050505050565b6000806104bd611399565b84848101906104cc9190612a29565b8092508193505050600081602001519050600082604001519050600060018111156104fa576104f96121f7565b5b83606001516001811115610511576105106121f7565b5b141561063f5760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105529190612a85565b602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190612aa0565b90506105a3846080015183610a3f565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105df9190612a85565b602060405180830381865afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190612aa0565b61062a91906121c3565b905061063883858388610bfc565b50506107bd565b600180811115610652576106516121f7565b5b83606001516001811115610669576106686121f7565b5b14156107bc5760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106aa9190612a85565b602060405180830381865afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190612aa0565b905061071383838f8f6000818110610706576107056120c6565b5b9050602002013587610bfc565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161074f9190612a85565b602060405180830381865afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190612aa0565b61079a91906121c3565b905060006107ac8660800151836100e7565b90506107b88186610a3f565b5050505b5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107f89190612a85565b602060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108399190612aa0565b905060008b8b6000818110610851576108506120c6565b5b905060200201358e8e600081811061086c5761086b6120c6565b5b9050602002013561087d9190612124565b9050818111156108f65761089b828261089691906121c3565b611116565b6040516020016108ab9190612b3a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed9190612baa565b60405180910390fd5b81811015610989578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87838561092791906121c3565b6040518363ffffffff1660e01b8152600401610944929190612bcc565b6020604051808303816000875af1158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190612bf5565b505b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109e4929190612bcc565b6020604051808303816000875af1158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190612bf5565b50600196505050505050509998505050505050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab79190612a85565b602060405180830381865afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af89190612aa0565b6040518363ffffffff1660e01b8152600401610b15929190612bcc565b6020604051808303816000875af1158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190612bf5565b50600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610ba39190612c5e565b6000604051808303816000865af19150503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b509150915081610bf6578060208201fd5b50505050565b6000600267ffffffffffffffff811115610c1957610c18611452565b5b604051908082528060200260200182016040528015610c475781602001602082028036833780820191505090505b5090508381600081518110610c5f57610c5e6120c6565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481600181518110610cae57610cad6120c6565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360a00151856040518363ffffffff1660e01b8152600401610d27929190612bcc565b6020604051808303816000875af1158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a9190612bf5565b5060008260a001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610eeb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600181518110610e0157610e006120c6565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166318cbafe585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b8152600401610e9d959493929190612ca6565b6000604051808303816000875af1158015610ebc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ee59190612dc3565b5061110e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561106157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600081518110610f7857610f776120c6565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff16637ff36ab585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b81526004016110139493929190612e0c565b60006040518083038185885af1158015611031573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061105b9190612dc3565b5061110d565b8073ffffffffffffffffffffffffffffffffffffffff166338ed173985600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b81526004016110c3959493929190612ca6565b6000604051808303816000875af11580156110e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061110b9190612dc3565b505b5b505050505050565b606060006001611125846111ee565b01905060008167ffffffffffffffff81111561114457611143611452565b5b6040519080825280601f01601f1916602001820160405280156111765781602001600182028036833780820191505090505b509050600082602001820190505b6001156111e3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816111cd576111cc612e58565b5b04945060008514156111de576111e3565b611184565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061124c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161124257611241612e58565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611289576d04ee2d6d415b85acef8100000000838161127f5761127e612e58565b5b0492506020810190505b662386f26fc1000083106112b857662386f26fc1000083816112ae576112ad612e58565b5b0492506010810190505b6305f5e10083106112e1576305f5e10083816112d7576112d6612e58565b5b0492506008810190505b61271083106113065761271083816112fc576112fb612e58565b5b0492506004810190505b60648310611329576064838161131f5761131e612e58565b5b0492506002810190505b600a8310611338576001810190505b80915050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060018111156113f9576113f86121f7565b5b815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61148a82611441565b810181811067ffffffffffffffff821117156114a9576114a8611452565b5b80604052505050565b60006114bc611423565b90506114c88282611481565b919050565b600067ffffffffffffffff8211156114e8576114e7611452565b5b6114f182611441565b9050602081019050919050565b82818337600083830152505050565b600061152061151b846114cd565b6114b2565b90508281526020810184848401111561153c5761153b61143c565b5b6115478482856114fe565b509392505050565b600082601f83011261156457611563611437565b5b813561157484826020860161150d565b91505092915050565b6000819050919050565b6115908161157d565b811461159b57600080fd5b50565b6000813590506115ad81611587565b92915050565b600080604083850312156115ca576115c961142d565b5b600083013567ffffffffffffffff8111156115e8576115e7611432565b5b6115f48582860161154f565b92505060206116058582860161159e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561164957808201518184015260208101905061162e565b83811115611658576000848401525b50505050565b60006116698261160f565b611673818561161a565b935061168381856020860161162b565b61168c81611441565b840191505092915050565b600060208201905081810360008301526116b1818461165e565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ee826116c3565b9050919050565b6116fe816116e3565b811461170957600080fd5b50565b60008135905061171b816116f5565b92915050565b6002811061172e57600080fd5b50565b60008135905061174081611721565b92915050565b600060c0828403121561175c5761175b6116b9565b5b61176660c06114b2565b905060006117768482850161159e565b600083015250602061178a8482850161170c565b602083015250604061179e8482850161170c565b60408301525060606117b284828501611731565b606083015250608082013567ffffffffffffffff8111156117d6576117d56116be565b5b6117e28482850161154f565b60808301525060a06117f68482850161170c565b60a08301525092915050565b6000602082840312156118185761181761142d565b5b600082013567ffffffffffffffff81111561183657611835611432565b5b61184284828501611746565b91505092915050565b600080fd5b600080fd5b60008083601f84011261186b5761186a611437565b5b8235905067ffffffffffffffff8111156118885761188761184b565b5b6020830191508360208202830111156118a4576118a3611850565b5b9250929050565b60008083601f8401126118c1576118c0611437565b5b8235905067ffffffffffffffff8111156118de576118dd61184b565b5b6020830191508360208202830111156118fa576118f9611850565b5b9250929050565b60008083601f84011261191757611916611437565b5b8235905067ffffffffffffffff8111156119345761193361184b565b5b6020830191508360018202830111156119505761194f611850565b5b9250929050565b600080600080600080600080600060a08a8c0312156119795761197861142d565b5b60008a013567ffffffffffffffff81111561199757611996611432565b5b6119a38c828d01611855565b995099505060208a013567ffffffffffffffff8111156119c6576119c5611432565b5b6119d28c828d016118ab565b975097505060408a013567ffffffffffffffff8111156119f5576119f4611432565b5b611a018c828d016118ab565b95509550506060611a148c828d0161170c565b93505060808a013567ffffffffffffffff811115611a3557611a34611432565b5b611a418c828d01611901565b92509250509295985092959850929598565b60008115159050919050565b611a6881611a53565b82525050565b6000602082019050611a836000830184611a5f565b92915050565b60028110611a9657600080fd5b50565b600081519050611aa881611a89565b92915050565b600067ffffffffffffffff821115611ac957611ac8611452565b5b602082029050602081019050919050565b6000819050919050565b611aed81611ada565b8114611af857600080fd5b50565b600081519050611b0a81611ae4565b92915050565b600081519050611b1f81611587565b92915050565b6000611b38611b33846114cd565b6114b2565b905082815260208101848484011115611b5457611b5361143c565b5b611b5f84828561162b565b509392505050565b600082601f830112611b7c57611b7b611437565b5b8151611b8c848260208601611b25565b91505092915050565b600060a08284031215611bab57611baa6116b9565b5b611bb560a06114b2565b90506000611bc584828501611afb565b6000830152506020611bd984828501611b10565b6020830152506040611bed84828501611b10565b6040830152506060611c0184828501611b10565b606083015250608082015167ffffffffffffffff811115611c2557611c246116be565b5b611c3184828501611b67565b60808301525092915050565b6000611c50611c4b84611aae565b6114b2565b90508083825260208201905060208402830185811115611c7357611c72611850565b5b835b81811015611cba57805167ffffffffffffffff811115611c9857611c97611437565b5b808601611ca58982611b95565b85526020850194505050602081019050611c75565b5050509392505050565b600082601f830112611cd957611cd8611437565b5b8151611ce9848260208601611c3d565b91505092915050565b600067ffffffffffffffff821115611d0d57611d0c611452565b5b602082029050602081019050919050565b6000611d29826116e3565b9050919050565b611d3981611d1e565b8114611d4457600080fd5b50565b600081519050611d5681611d30565b92915050565b6000611d6f611d6a84611cf2565b6114b2565b90508083825260208201905060208402830185811115611d9257611d91611850565b5b835b81811015611dbb5780611da78882611d47565b845260208401935050602081019050611d94565b5050509392505050565b600082601f830112611dda57611dd9611437565b5b8151611dea848260208601611d5c565b91505092915050565b600081519050611e02816116f5565b92915050565b611e1181611a53565b8114611e1c57600080fd5b50565b600081519050611e2e81611e08565b92915050565b6000611e3f826116c3565b9050919050565b611e4f81611e34565b8114611e5a57600080fd5b50565b600081519050611e6c81611e46565b92915050565b600060808284031215611e8857611e876116b9565b5b611e9260806114b2565b90506000611ea284828501611df3565b6000830152506020611eb684828501611e1f565b6020830152506040611eca84828501611e5d565b6040830152506060611ede84828501611e1f565b60608301525092915050565b600067ffffffffffffffff821115611f0557611f04611452565b5b602082029050602081019050919050565b6000819050919050565b611f2981611f16565b8114611f3457600080fd5b50565b600081519050611f4681611f20565b92915050565b6000611f5f611f5a84611eea565b6114b2565b90508083825260208201905060208402830185811115611f8257611f81611850565b5b835b81811015611fab5780611f978882611f37565b845260208401935050602081019050611f84565b5050509392505050565b600082601f830112611fca57611fc9611437565b5b8151611fda848260208601611f4c565b91505092915050565b60008060008060008061012087890312156120015761200061142d565b5b600061200f89828a01611a99565b965050602087015167ffffffffffffffff8111156120305761202f611432565b5b61203c89828a01611cc4565b955050604087015167ffffffffffffffff81111561205d5761205c611432565b5b61206989828a01611dc5565b945050606061207a89828a01611e72565b93505060e087015167ffffffffffffffff81111561209b5761209a611432565b5b6120a789828a01611fb5565b9250506101006120b989828a01611b10565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061212f8261157d565b915061213a8361157d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561216f5761216e6120f5565b5b828201905092915050565b60006121858261157d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121b8576121b76120f5565b5b600182019050919050565b60006121ce8261157d565b91506121d98361157d565b9250828210156121ec576121eb6120f5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612237576122366121f7565b5b50565b600081905061224882612226565b919050565b60006122588261223a565b9050919050565b6122688161224d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122a381611ada565b82525050565b6122b28161157d565b82525050565b600082825260208201905092915050565b60006122d48261160f565b6122de81856122b8565b93506122ee81856020860161162b565b6122f781611441565b840191505092915050565b600060a08301600083015161231a600086018261229a565b50602083015161232d60208601826122a9565b50604083015161234060408601826122a9565b50606083015161235360608601826122a9565b506080830151848203608086015261236b82826122c9565b9150508091505092915050565b60006123848383612302565b905092915050565b6000602082019050919050565b60006123a48261226e565b6123ae8185612279565b9350836020820285016123c08561228a565b8060005b858110156123fc57848403895281516123dd8582612378565b94506123e88361238c565b925060208a019950506001810190506123c4565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600061245f61245a612455846116c3565b61243a565b6116c3565b9050919050565b600061247182612444565b9050919050565b600061248382612466565b9050919050565b61249381612478565b82525050565b60006124a5838361248a565b60208301905092915050565b6000602082019050919050565b60006124c98261240e565b6124d38185612419565b93506124de8361242a565b8060005b8381101561250f5781516124f68882612499565b9750612501836124b1565b9250506001810190506124e2565b5085935050505092915050565b612525816116e3565b82525050565b61253481611a53565b82525050565b61254381611e34565b82525050565b60808201600082015161255f600085018261251c565b506020820151612572602085018261252b565b506040820151612585604085018261253a565b506060820151612598606085018261252b565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125d381611f16565b82525050565b60006125e583836125ca565b60208301905092915050565b6000602082019050919050565b60006126098261259e565b61261381856125a9565b935061261e836125ba565b8060005b8381101561264f57815161263688826125d9565b9750612641836125f1565b925050600181019050612622565b5085935050505092915050565b6126658161157d565b82525050565b600061012082019050612681600083018961225f565b81810360208301526126938188612399565b905081810360408301526126a781876124be565b90506126b66060830186612549565b81810360e08301526126c881856125fe565b90506126d861010083018461265c565b979650505050505050565b6126ec816116e3565b82525050565b60028110612703576127026121f7565b5b50565b6000819050612714826126f2565b919050565b600061272482612706565b9050919050565b61273481612719565b82525050565b600060c08301600083015161275260008601826122a9565b506020830151612765602086018261251c565b506040830151612778604086018261251c565b50606083015161278b606086018261272b565b50608083015184820360808601526127a382826122c9565b91505060a08301516127b860a086018261251c565b508091505092915050565b60006040820190506127d860008301856126e3565b81810360208301526127ea818461273a565b90509392505050565b600081519050919050565b6000819050602082019050919050565b600061281a838361251c565b60208301905092915050565b6000602082019050919050565b600061283e826127f3565b6128488185612419565b9350612853836127fe565b8060005b8381101561288457815161286b888261280e565b975061287683612826565b925050600181019050612857565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006128c983836122a9565b60208301905092915050565b6000602082019050919050565b60006128ed82612891565b6128f7818561289c565b9350612902836128ad565b8060005b8381101561293357815161291a88826128bd565b9750612925836128d5565b925050600181019050612906565b5085935050505092915050565b6000819050919050565b600061ffff82169050919050565b600061297361296e61296984612940565b61243a565b61294a565b9050919050565b61298381612958565b82525050565b600060e08201905061299e600083018a6126e3565b81810360208301526129b08189612833565b905081810360408301526129c481886128e2565b905081810360608301526129d881876128e2565b90506129e760808301866126e3565b81810360a08301526129f9818561165e565b9050612a0860c083018461297a565b98975050505050505050565b600081359050612a2381611e46565b92915050565b60008060408385031215612a4057612a3f61142d565b5b6000612a4e85828601612a14565b925050602083013567ffffffffffffffff811115612a6f57612a6e611432565b5b612a7b85828601611746565b9150509250929050565b6000602082019050612a9a60008301846126e3565b92915050565b600060208284031215612ab657612ab561142d565b5b6000612ac484828501611b10565b91505092915050565b7f4e656761746976652070726f6669742120000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b6000612b1482612af3565b612b1e8185612afe565b9350612b2e81856020860161162b565b80840191505092915050565b6000612b4582612acd565b601182019150612b558284612b09565b915081905092915050565b600082825260208201905092915050565b6000612b7c82612af3565b612b868185612b60565b9350612b9681856020860161162b565b612b9f81611441565b840191505092915050565b60006020820190508181036000830152612bc48184612b71565b905092915050565b6000604082019050612be160008301856126e3565b612bee602083018461265c565b9392505050565b600060208284031215612c0b57612c0a61142d565b5b6000612c1984828501611e1f565b91505092915050565b600081905092915050565b6000612c388261160f565b612c428185612c22565b9350612c5281856020860161162b565b80840191505092915050565b6000612c6a8284612c2d565b915081905092915050565b6000612c90612c8b612c8684612940565b61243a565b61157d565b9050919050565b612ca081612c75565b82525050565b600060a082019050612cbb600083018861265c565b612cc86020830187612c97565b8181036040830152612cda8186612833565b9050612ce960608301856126e3565b612cf6608083018461265c565b9695505050505050565b600067ffffffffffffffff821115612d1b57612d1a611452565b5b602082029050602081019050919050565b6000612d3f612d3a84612d00565b6114b2565b90508083825260208201905060208402830185811115612d6257612d61611850565b5b835b81811015612d8b5780612d778882611b10565b845260208401935050602081019050612d64565b5050509392505050565b600082601f830112612daa57612da9611437565b5b8151612dba848260208601612d2c565b91505092915050565b600060208284031215612dd957612dd861142d565b5b600082015167ffffffffffffffff811115612df757612df6611432565b5b612e0384828501612d95565b91505092915050565b6000608082019050612e216000830187612c97565b8181036020830152612e338186612833565b9050612e4260408301856126e3565b612e4f606083018461265c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220c7033f5782fdfb98855d662bf3fa524a50fbc71ca4c989b8c0365f9283eb3bf064736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1069,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "lendingPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILendingPool)1945"
      },
      {
        "astId": 1071,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1074,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "WCKB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETH)2126"
      },
      {
        "astId": 1077,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "pCKB",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1874"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1874": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)1945": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)2126": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      }
    }
  }
}