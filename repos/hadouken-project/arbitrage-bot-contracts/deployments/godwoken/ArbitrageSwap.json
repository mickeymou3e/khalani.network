{
  "address": "0xAe911c4e1f7e281f882d6d3CB5B18F232ce88932",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pCKBAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WCKBAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "baseTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddress",
              "type": "address"
            },
            {
              "internalType": "enum ArbitrageSwap.SwapOrder",
              "name": "order",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "batchSwapCalldata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "yokaiPoolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ArbitrageSwap.ArbitrageParams",
          "name": "arbitrageParams",
          "type": "tuple"
        }
      ],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "batchSwapCalldata",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "baseTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "changeAmountInHadoukenCallData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdca9d008fefdb583c2d8c6a51c0e1fa7cf92f39eac09fecb56352c736df265b0",
  "receipt": {
    "to": null,
    "from": "0xA14d06ee65f19EA64548CA2effCc26925823827d",
    "contractAddress": "0xAe911c4e1f7e281f882d6d3CB5B18F232ce88932",
    "transactionIndex": 0,
    "gasUsed": "338122",
    "logsBloom": "0x
    "blockHash": "0xe0e7c345e62f86abcf4b9d4153258f629f31ff537ae6e238dbb6e78da875ba05",
    "transactionHash": "0xdca9d008fefdb583c2d8c6a51c0e1fa7cf92f39eac09fecb56352c736df265b0",
    "logs": [],
    "blockNumber": 482486,
    "cumulativeGasUsed": "338122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F8BDF24826EbcF649658147756115Ee867b7D63",
    "0x50ff8715E9882a6a184D51D0952Db1Eb311d1988",
    "0x7538c85cae4e4673253ffd2568c1f1b48a71558a",
    "0xc296f806d15e97243a08334256c705ba5c5754cd"
  ],
  "numDeployments": 32,
  "solcInputHash": "56ecb50a6a254460133eee8c8808daaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pCKBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WCKBAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"enum ArbitrageSwap.SwapOrder\",\"name\":\"order\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"batchSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"yokaiPoolAddress\",\"type\":\"address\"}],\"internalType\":\"struct ArbitrageSwap.ArbitrageParams\",\"name\":\"arbitrageParams\",\"type\":\"tuple\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"batchSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalance\",\"type\":\"uint256\"}],\"name\":\"changeAmountInHadoukenCallData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbitrageSwap.sol\":\"ArbitrageSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ArbitrageSwap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport {IFlashLoanReceiver} from './interfaces/IFlashLoanReceiver.sol';\\nimport {IYokaiRouter02} from './interfaces/IYokaiRouter02.sol';\\nimport {ILendingPool} from './interfaces/ILendingPool.sol';\\nimport {IVault} from './interfaces/IVault.sol';\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {IAsset} from './interfaces/IAsset.sol';\\nimport {IWETH} from './interfaces/IWETH.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'solidity-bytes-utils/contracts/BytesLib.sol';\\n\\ncontract ArbitrageSwap is IFlashLoanReceiver {\\n  using BytesLib for bytes;\\n  uint256 constant UINT256_MAX = type(uint256).max;\\n  ILendingPool private lendingPool;\\n  address private vaultAddress;\\n  IWETH private WCKB;\\n  IERC20 private pCKB;\\n\\n  enum SwapOrder {\\n    HADOUKEN_FIRST,\\n    YOKAI_FIRST\\n  }\\n\\n  struct ArbitrageParams {\\n    uint256 quoteAmount;\\n    address baseTokenAddress;\\n    address quoteTokenAddress;\\n    SwapOrder order;\\n    bytes batchSwapCalldata;\\n    address yokaiPoolAddress;\\n  }\\n\\n  constructor(\\n    address _vaultAddress,\\n    address lendingPoolAddress,\\n    address pCKBAddress,\\n    address WCKBAddress\\n  ) public {\\n    vaultAddress = _vaultAddress;\\n    lendingPool = ILendingPool(lendingPoolAddress);\\n    pCKB = IERC20(pCKBAddress);\\n    WCKB = IWETH(WCKBAddress);\\n  }\\n\\n  function arbitrage(ArbitrageParams memory arbitrageParams) external {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = arbitrageParams.quoteTokenAddress;\\n\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = arbitrageParams.quoteAmount;\\n\\n    uint256[] memory modes = new uint256[](1);\\n    modes[0] = 0;\\n\\n    bytes memory params = abi.encode(msg.sender, arbitrageParams);\\n\\n    lendingPool.flashLoan(\\n      address(this),\\n      tokens,\\n      amounts,\\n      modes,\\n      address(this),\\n      params,\\n      0\\n    );\\n  }\\n\\n  function swapYokai(\\n    IERC20 buyToken,\\n    IERC20 sellToken,\\n    uint256 amount,\\n    ArbitrageParams memory arbitrageParams\\n  ) private {\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = address(sellToken);\\n    tokens[1] = address(buyToken);\\n    sellToken.approve(arbitrageParams.yokaiPoolAddress, amount);\\n    IYokaiRouter02 yokaiPool = IYokaiRouter02(arbitrageParams.yokaiPoolAddress);\\n\\n    if (address(buyToken) == address(pCKB)) {\\n      tokens[1] = address(WCKB);\\n      yokaiPool.swapExactTokensForETH(\\n        amount,\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    } else if (address(sellToken) == address(pCKB)) {\\n      tokens[0] = address(WCKB);\\n      yokaiPool.swapExactETHForTokens{value: amount}(\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    } else {\\n      yokaiPool.swapExactTokensForTokens(\\n        amount,\\n        0,\\n        tokens,\\n        address(this),\\n        UINT256_MAX\\n      );\\n    }\\n  }\\n\\n  function swapHadouken(\\n    bytes memory batchSwapCalldata,\\n    IERC20 sellToken\\n  ) private {\\n    sellToken.approve(vaultAddress, sellToken.balanceOf(address(this)));\\n    (bool success, bytes memory result) = vaultAddress.call(batchSwapCalldata);\\n    if (!success) {\\n      assembly {\\n        revert(add(result, 32), result)\\n      }\\n    }\\n  }\\n\\n  function changeAmountInHadoukenCallData(\\n    bytes memory batchSwapCalldata,\\n    uint256 baseTokenBalance\\n  ) public pure returns (bytes memory) {\\n    uint8 kind;\\n    IVault.BatchSwapStep[] memory swaps;\\n    address[] memory assets;\\n    IVault.FundManagement memory funds;\\n    int256[] memory limits;\\n    uint256 deadline;\\n\\n    bytes memory calldataNoSig = batchSwapCalldata.slice(\\n      4,\\n      batchSwapCalldata.length - 4\\n    );\\n\\n    (kind, swaps, assets, funds, limits, deadline) = abi.decode(\\n      calldataNoSig,\\n      (\\n        uint8,\\n        IVault.BatchSwapStep[],\\n        address[],\\n        IVault.FundManagement,\\n        int256[],\\n        uint256\\n      )\\n    );\\n\\n    uint256 totalIn = 0;\\n    for (uint i = 0; i < swaps.length; i++) {\\n      if (swaps[i].assetInIndex == 0) {\\n        totalIn += swaps[i].amount;\\n      }\\n    }\\n\\n    if (totalIn > baseTokenBalance) {\\n      swaps[0].amount -= totalIn - baseTokenBalance;\\n    } else if (totalIn < baseTokenBalance) {\\n      swaps[0].amount += baseTokenBalance - totalIn;\\n    }\\n\\n    return\\n      abi.encodeWithSignature(\\n        'batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)',\\n        kind,\\n        swaps,\\n        assets,\\n        funds,\\n        limits,\\n        deadline\\n      );\\n  }\\n\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    address originalSender;\\n    ArbitrageParams memory arbitrageParams;\\n    (originalSender, arbitrageParams) = abi.decode(\\n      params,\\n      (address, ArbitrageParams)\\n    );\\n\\n    IERC20 baseToken = IERC20(arbitrageParams.baseTokenAddress);\\n    IERC20 quoteToken = IERC20(arbitrageParams.quoteTokenAddress);\\n\\n    if (arbitrageParams.order == SwapOrder.HADOUKEN_FIRST) {\\n      uint256 baseTokenAmount = baseToken.balanceOf(address(this));\\n      swapHadouken(arbitrageParams.batchSwapCalldata, quoteToken);\\n      uint256 baseTokenDelta = baseToken.balanceOf(address(this)) -\\n        baseTokenAmount;\\n      swapYokai(quoteToken, baseToken, baseTokenDelta, arbitrageParams);\\n    } else if (arbitrageParams.order == SwapOrder.YOKAI_FIRST) {\\n      uint256 baseTokenAmount = baseToken.balanceOf(address(this));\\n      swapYokai(baseToken, quoteToken, amounts[0], arbitrageParams);\\n      uint256 baseTokenDelta = baseToken.balanceOf(address(this)) -\\n        baseTokenAmount;\\n      bytes memory batchSwapCallData = changeAmountInHadoukenCallData(\\n        arbitrageParams.batchSwapCalldata,\\n        baseTokenDelta\\n      );\\n      swapHadouken(batchSwapCallData, baseToken);\\n    }\\n\\n    uint256 currentBalance = quoteToken.balanceOf(address(this));\\n    uint256 returnValue = amounts[0] + premiums[0];\\n\\n    if (returnValue > currentBalance) {\\n      revert(\\n        string.concat(\\n          'Negative profit! ',\\n          Strings.toString(returnValue - currentBalance)\\n        )\\n      );\\n    } else if (returnValue < currentBalance) {\\n      quoteToken.transfer(originalSender, currentBalance - returnValue);\\n    }\\n\\n    quoteToken.approve(address(lendingPool), returnValue);\\n\\n    return true;\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb07fcf94cdc609e63a9cf354b835aa2134467e5fd08ace5b9dd9798b74ba2995\"},\"contracts/interfaces/DataTypes.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115: borrow cap\\n    //bit 116-151: deposit cap\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\",\"keccak256\":\"0x29c3f38a1db77a8204116c7ad5de876f4e9a5282fff066448b8a6912176dd21f\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n  // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5c0cbed4276476fdd8e9675d590ce1d549345a7413caeecbf3f9428152b75c95\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6ec6743aec8ac37526825d21adf54ff70c4c108d7f53f23757df45cb826dc0d7\"},\"contracts/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4f96bc2c0c080fdf63acd58041c9fc6036c9b24eed7ea891072b97c952d77e35\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"pragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\nimport './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function getReserveData(\\n    address asset\\n  ) external view returns (DataTypes.ReserveData memory);\\n}\\n\",\"keccak256\":\"0x7ab416b9861e7528ea34183a6c037c3b161473b201b7ba2af1e64f4fbadda657\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\nimport './IERC20.sol';\\nimport './IAsset.sol';\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n   *\\n   * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n   * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n   * equals the sum of `cash` and `managed`.\\n   *\\n   * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n   * `managed` or `total` balance to be greater than 2^112 - 1.\\n   *\\n   * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n   * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n   * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n   * change for this purpose, and will update `lastChangeBlock`.\\n   *\\n   * `assetManager` is the Pool's token Asset Manager.\\n   */\\n  function getPoolTokenInfo(\\n    bytes32 poolId,\\n    IERC20 token\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 cash,\\n      uint256 managed,\\n      uint256 lastChangeBlock,\\n      address assetManager\\n    );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n   * the tokens' `balances` changed.\\n   *\\n   * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n   * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n   *\\n   * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n   * order as passed to `registerTokens`.\\n   *\\n   * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n   * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n   * instead.\\n   */\\n  function getPoolTokens(\\n    bytes32 poolId\\n  )\\n    external\\n    view\\n    returns (\\n      IERC20[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 lastChangeBlock\\n    );\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n   *\\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n   * taken from the Pool, which must be greater than or equal to `limit`.\\n   *\\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n   * sent to the Pool, which must be less than or equal to `limit`.\\n   *\\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\\n   *\\n   * Emits a `Swap` event.\\n   */\\n  function swap(\\n    SingleSwap memory singleSwap,\\n    FundManagement memory funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n   * the `kind` value.\\n   *\\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n   * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n   *\\n   * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n   * the same index in the `assets` array.\\n   *\\n   * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n   * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n   * `amountOut` depending on the swap kind.\\n   *\\n   * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n   * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n   * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n   *\\n   * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n   * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n   * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n   * or unwrapped from WETH by the Vault.\\n   *\\n   * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n   * the minimum or maximum amount of each token the vault is allowed to transfer.\\n   *\\n   * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n   * equivalent `swap` call.\\n   *\\n   * Emits `Swap` events.\\n   */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    IAsset[] memory assets,\\n    FundManagement memory funds,\\n    int256[] memory limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n   * `assets` array passed to that function, and ETH assets are converted to WETH.\\n   *\\n   * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n   * from the previous swap, depending on the swap kind.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n   */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n   * `recipient` account.\\n   *\\n   * If the caller is not `sender`, it must be an authorized relayer for them.\\n   *\\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n   * `joinPool`.\\n   *\\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n   * transferred. This matches the behavior of `exitPool`.\\n   *\\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n   * revert.\\n   */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n   * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n   *\\n   * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n   * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n   * receives are the same that an equivalent `batchSwap` call would receive.\\n   *\\n   * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n   * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n   * approve them for the Vault, or even know a user's address.\\n   *\\n   * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n   * eth_call instead of eth_sendTransaction.\\n   */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    IAsset[] memory assets,\\n    FundManagement memory funds\\n  ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0x21429eef2966036d3b605520324366b414f12e12b4ab72c18ea8a22da7433281\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.12;\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint value) external override returns (bool);\\n\\n  function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x0f126f576265171363f7a1b14b61e9bbe23d29f6565ec625c8ae7333a5a702b2\"},\"contracts/interfaces/IYokaiRouter01.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\ninterface IYokaiRouter01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] calldata path\\n  ) external view returns (uint[] memory amounts);\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] calldata path\\n  ) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd90f4e77a4f56f9c61054e2d55f7d423494f849515e84d4f85fa48146384f951\"},\"contracts/interfaces/IYokaiRouter02.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\nimport './IYokaiRouter01.sol';\\n\\ninterface IYokaiRouter02 is IYokaiRouter01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4a4e541ff17572dda4aa6a1d41d8581d5149848e7ce0b617fd4f592fadc01ec2\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003221380380620032218339818101604052810190620000379190620001ae565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000220565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001768262000149565b9050919050565b620001888162000169565b81146200019457600080fd5b50565b600081519050620001a8816200017d565b92915050565b60008060008060808587031215620001cb57620001ca62000144565b5b6000620001db8782880162000197565b9450506020620001ee8782880162000197565b9350506040620002018782880162000197565b9250506060620002148782880162000197565b91505092959194509250565b612ff180620002306000396000f3fe6080604052600436106100385760003560e01c80630bd6430514610044578063516a00dc14610081578063920f5c84146100aa5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190611765565b6100e7565b6040516100789190611849565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906119b4565b6102fd565b005b3480156100b657600080fd5b506100d160048036038101906100cc9190611b09565b610546565b6040516100de9190611c20565b60405180910390f35b606060006060806100f66114f3565b606060008061011d6004808c5161010d9190611c6a565b8c610ad39092919063ffffffff16565b90508080602001905181019061013391906121ce565b809750819850829950839a50849b50859c505050505050506000805b87518110156101bf57600088828151811061016d5761016c6122b1565b5b60200260200101516020015114156101ac57878181518110610192576101916122b1565b5b602002602001015160600151826101a991906122e0565b91505b80806101b790612336565b91505061014f565b508981111561020c5789816101d49190611c6a565b876000815181106101e8576101e76122b1565b5b60200260200101516060018181516102009190611c6a565b91508181525050610255565b8981101561025457808a6102209190611c6a565b87600081518110610234576102336122b1565b5b602002602001015160600181815161024c91906122e0565b915081815250505b5b8787878787876040516024016102709695949392919061272c565b6040516020818303038152906040527f945bcec9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509850505050505050505092915050565b6000600167ffffffffffffffff81111561031a57610319611604565b5b6040519080825280602002602001820160405280156103485781602001602082028036833780820191505090505b509050816040015181600081518110610364576103636122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156103bb576103ba611604565b5b6040519080825280602002602001820160405280156103e95781602001602082028036833780820191505090505b509050826000015181600081518110610405576104046122b1565b5b6020026020010181815250506000600167ffffffffffffffff81111561042e5761042d611604565b5b60405190808252806020026020018201604052801561045c5781602001602082028036833780820191505090505b509050600081600081518110610475576104746122b1565b5b602002602001018181525050600033856040516020016104969291906128b3565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b815260040161050d97969594939291906129e5565b600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b505050505050505050565b60008061055161154b565b84848101906105609190612a85565b80925081935050506000816020015190506000826040015190506000600181111561058e5761058d6127b3565b5b836060015160018111156105a5576105a46127b3565b5b14156106d35760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105e69190612ae1565b602060405180830381865afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190612afc565b9050610637846080015183610bf1565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106739190612ae1565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190612afc565b6106be9190611c6a565b90506106cc83858388610dae565b5050610851565b6001808111156106e6576106e56127b3565b5b836060015160018111156106fd576106fc6127b3565b5b14156108505760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161073e9190612ae1565b602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190612afc565b90506107a783838f8f600081811061079a576107996122b1565b5b9050602002013587610dae565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e39190612ae1565b602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612afc565b61082e9190611c6a565b905060006108408660800151836100e7565b905061084c8186610bf1565b5050505b5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161088c9190612ae1565b602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612afc565b905060008b8b60008181106108e5576108e46122b1565b5b905060200201358e8e6000818110610900576108ff6122b1565b5b9050602002013561091191906122e0565b90508181111561098a5761092f828261092a9190611c6a565b6112c8565b60405160200161093f9190612b96565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109819190612c06565b60405180910390fd5b81811015610a1d578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8783856109bb9190611c6a565b6040518363ffffffff1660e01b81526004016109d8929190612c28565b6020604051808303816000875af11580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190612c51565b505b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a78929190612c28565b6020604051808303816000875af1158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190612c51565b50600196505050505050509998505050505050505050565b606081601f83610ae391906122e0565b1015610b24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1b90612cca565b60405180910390fd5b8183610b3091906122e0565b84511015610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90612d36565b60405180910390fd5b6060821560008114610b945760405191506000825260208201604052610be5565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610bd25780518352602083019250602081019050610bb5565b50868552601f19601f8301166040525050505b50809150509392505050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c699190612ae1565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190612afc565b6040518363ffffffff1660e01b8152600401610cc7929190612c28565b6020604051808303816000875af1158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612c51565b50600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d559190612d92565b6000604051808303816000865af19150503d8060008114610d92576040519150601f19603f3d011682016040523d82523d6000602084013e610d97565b606091505b509150915081610da8578060208201fd5b50505050565b6000600267ffffffffffffffff811115610dcb57610dca611604565b5b604051908082528060200260200182016040528015610df95781602001602082028036833780820191505090505b5090508381600081518110610e1157610e106122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481600181518110610e6057610e5f6122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360a00151856040518363ffffffff1660e01b8152600401610ed9929190612c28565b6020604051808303816000875af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190612c51565b5060008260a001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561109d57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600181518110610fb357610fb26122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166318cbafe585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b815260040161104f959493929190612dda565b6000604051808303816000875af115801561106e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110979190612ef7565b506112c0565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561121357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260008151811061112a576111296122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff16637ff36ab585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b81526004016111c59493929190612f40565b60006040518083038185885af11580156111e3573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061120d9190612ef7565b506112bf565b8073ffffffffffffffffffffffffffffffffffffffff166338ed173985600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b8152600401611275959493929190612dda565b6000604051808303816000875af1158015611294573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112bd9190612ef7565b505b5b505050505050565b6060600060016112d7846113a0565b01905060008167ffffffffffffffff8111156112f6576112f5611604565b5b6040519080825280601f01601f1916602001820160405280156113285781602001600182028036833780820191505090505b509050600082602001820190505b600115611395578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161137f5761137e612f8c565b5b049450600085141561139057611395565b611336565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106113fe577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816113f4576113f3612f8c565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061143b576d04ee2d6d415b85acef8100000000838161143157611430612f8c565b5b0492506020810190505b662386f26fc10000831061146a57662386f26fc1000083816114605761145f612f8c565b5b0492506010810190505b6305f5e1008310611493576305f5e100838161148957611488612f8c565b5b0492506008810190505b61271083106114b85761271083816114ae576114ad612f8c565b5b0492506004810190505b606483106114db57606483816114d1576114d0612f8c565b5b0492506002810190505b600a83106114ea576001810190505b80915050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060018111156115ab576115aa6127b3565b5b815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61163c826115f3565b810181811067ffffffffffffffff8211171561165b5761165a611604565b5b80604052505050565b600061166e6115d5565b905061167a8282611633565b919050565b600067ffffffffffffffff82111561169a57611699611604565b5b6116a3826115f3565b9050602081019050919050565b82818337600083830152505050565b60006116d26116cd8461167f565b611664565b9050828152602081018484840111156116ee576116ed6115ee565b5b6116f98482856116b0565b509392505050565b600082601f830112611716576117156115e9565b5b81356117268482602086016116bf565b91505092915050565b6000819050919050565b6117428161172f565b811461174d57600080fd5b50565b60008135905061175f81611739565b92915050565b6000806040838503121561177c5761177b6115df565b5b600083013567ffffffffffffffff81111561179a576117996115e4565b5b6117a685828601611701565b92505060206117b785828601611750565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117fb5780820151818401526020810190506117e0565b8381111561180a576000848401525b50505050565b600061181b826117c1565b61182581856117cc565b93506118358185602086016117dd565b61183e816115f3565b840191505092915050565b600060208201905081810360008301526118638184611810565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118a082611875565b9050919050565b6118b081611895565b81146118bb57600080fd5b50565b6000813590506118cd816118a7565b92915050565b600281106118e057600080fd5b50565b6000813590506118f2816118d3565b92915050565b600060c0828403121561190e5761190d61186b565b5b61191860c0611664565b9050600061192884828501611750565b600083015250602061193c848285016118be565b6020830152506040611950848285016118be565b6040830152506060611964848285016118e3565b606083015250608082013567ffffffffffffffff81111561198857611987611870565b5b61199484828501611701565b60808301525060a06119a8848285016118be565b60a08301525092915050565b6000602082840312156119ca576119c96115df565b5b600082013567ffffffffffffffff8111156119e8576119e76115e4565b5b6119f4848285016118f8565b91505092915050565b600080fd5b600080fd5b60008083601f840112611a1d57611a1c6115e9565b5b8235905067ffffffffffffffff811115611a3a57611a396119fd565b5b602083019150836020820283011115611a5657611a55611a02565b5b9250929050565b60008083601f840112611a7357611a726115e9565b5b8235905067ffffffffffffffff811115611a9057611a8f6119fd565b5b602083019150836020820283011115611aac57611aab611a02565b5b9250929050565b60008083601f840112611ac957611ac86115e9565b5b8235905067ffffffffffffffff811115611ae657611ae56119fd565b5b602083019150836001820283011115611b0257611b01611a02565b5b9250929050565b600080600080600080600080600060a08a8c031215611b2b57611b2a6115df565b5b60008a013567ffffffffffffffff811115611b4957611b486115e4565b5b611b558c828d01611a07565b995099505060208a013567ffffffffffffffff811115611b7857611b776115e4565b5b611b848c828d01611a5d565b975097505060408a013567ffffffffffffffff811115611ba757611ba66115e4565b5b611bb38c828d01611a5d565b95509550506060611bc68c828d016118be565b93505060808a013567ffffffffffffffff811115611be757611be66115e4565b5b611bf38c828d01611ab3565b92509250509295985092959850929598565b60008115159050919050565b611c1a81611c05565b82525050565b6000602082019050611c356000830184611c11565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c758261172f565b9150611c808361172f565b925082821015611c9357611c92611c3b565b5b828203905092915050565b600060ff82169050919050565b611cb481611c9e565b8114611cbf57600080fd5b50565b600081519050611cd181611cab565b92915050565b600067ffffffffffffffff821115611cf257611cf1611604565b5b602082029050602081019050919050565b6000819050919050565b611d1681611d03565b8114611d2157600080fd5b50565b600081519050611d3381611d0d565b92915050565b600081519050611d4881611739565b92915050565b6000611d61611d5c8461167f565b611664565b905082815260208101848484011115611d7d57611d7c6115ee565b5b611d888482856117dd565b509392505050565b600082601f830112611da557611da46115e9565b5b8151611db5848260208601611d4e565b91505092915050565b600060a08284031215611dd457611dd361186b565b5b611dde60a0611664565b90506000611dee84828501611d24565b6000830152506020611e0284828501611d39565b6020830152506040611e1684828501611d39565b6040830152506060611e2a84828501611d39565b606083015250608082015167ffffffffffffffff811115611e4e57611e4d611870565b5b611e5a84828501611d90565b60808301525092915050565b6000611e79611e7484611cd7565b611664565b90508083825260208201905060208402830185811115611e9c57611e9b611a02565b5b835b81811015611ee357805167ffffffffffffffff811115611ec157611ec06115e9565b5b808601611ece8982611dbe565b85526020850194505050602081019050611e9e565b5050509392505050565b600082601f830112611f0257611f016115e9565b5b8151611f12848260208601611e66565b91505092915050565b600067ffffffffffffffff821115611f3657611f35611604565b5b602082029050602081019050919050565b600081519050611f56816118a7565b92915050565b6000611f6f611f6a84611f1b565b611664565b90508083825260208201905060208402830185811115611f9257611f91611a02565b5b835b81811015611fbb5780611fa78882611f47565b845260208401935050602081019050611f94565b5050509392505050565b600082601f830112611fda57611fd96115e9565b5b8151611fea848260208601611f5c565b91505092915050565b611ffc81611c05565b811461200757600080fd5b50565b60008151905061201981611ff3565b92915050565b600061202a82611875565b9050919050565b61203a8161201f565b811461204557600080fd5b50565b60008151905061205781612031565b92915050565b6000608082840312156120735761207261186b565b5b61207d6080611664565b9050600061208d84828501611f47565b60008301525060206120a18482850161200a565b60208301525060406120b584828501612048565b60408301525060606120c98482850161200a565b60608301525092915050565b600067ffffffffffffffff8211156120f0576120ef611604565b5b602082029050602081019050919050565b6000819050919050565b61211481612101565b811461211f57600080fd5b50565b6000815190506121318161210b565b92915050565b600061214a612145846120d5565b611664565b9050808382526020820190506020840283018581111561216d5761216c611a02565b5b835b8181101561219657806121828882612122565b84526020840193505060208101905061216f565b5050509392505050565b600082601f8301126121b5576121b46115e9565b5b81516121c5848260208601612137565b91505092915050565b60008060008060008061012087890312156121ec576121eb6115df565b5b60006121fa89828a01611cc2565b965050602087015167ffffffffffffffff81111561221b5761221a6115e4565b5b61222789828a01611eed565b955050604087015167ffffffffffffffff811115612248576122476115e4565b5b61225489828a01611fc5565b945050606061226589828a0161205d565b93505060e087015167ffffffffffffffff811115612286576122856115e4565b5b61229289828a016121a0565b9250506101006122a489828a01611d39565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006122eb8261172f565b91506122f68361172f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561232b5761232a611c3b565b5b828201905092915050565b60006123418261172f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561237457612373611c3b565b5b600182019050919050565b61238881611c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123c381611d03565b82525050565b6123d28161172f565b82525050565b600082825260208201905092915050565b60006123f4826117c1565b6123fe81856123d8565b935061240e8185602086016117dd565b612417816115f3565b840191505092915050565b600060a08301600083015161243a60008601826123ba565b50602083015161244d60208601826123c9565b50604083015161246060408601826123c9565b50606083015161247360608601826123c9565b506080830151848203608086015261248b82826123e9565b9150508091505092915050565b60006124a48383612422565b905092915050565b6000602082019050919050565b60006124c48261238e565b6124ce8185612399565b9350836020820285016124e0856123aa565b8060005b8581101561251c57848403895281516124fd8582612498565b9450612508836124ac565b925060208a019950506001810190506124e4565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61256381611895565b82525050565b6000612575838361255a565b60208301905092915050565b6000602082019050919050565b60006125998261252e565b6125a38185612539565b93506125ae8361254a565b8060005b838110156125df5781516125c68882612569565b97506125d183612581565b9250506001810190506125b2565b5085935050505092915050565b6125f581611c05565b82525050565b6126048161201f565b82525050565b608082016000820151612620600085018261255a565b50602082015161263360208501826125ec565b50604082015161264660408501826125fb565b50606082015161265960608501826125ec565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61269481612101565b82525050565b60006126a6838361268b565b60208301905092915050565b6000602082019050919050565b60006126ca8261265f565b6126d4818561266a565b93506126df8361267b565b8060005b838110156127105781516126f7888261269a565b9750612702836126b2565b9250506001810190506126e3565b5085935050505092915050565b6127268161172f565b82525050565b600061012082019050612742600083018961237f565b818103602083015261275481886124b9565b90508181036040830152612768818761258e565b9050612777606083018661260a565b81810360e083015261278981856126bf565b905061279961010083018461271d565b979650505050505050565b6127ad81611895565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106127f3576127f26127b3565b5b50565b6000819050612804826127e2565b919050565b6000612814826127f6565b9050919050565b61282481612809565b82525050565b600060c08301600083015161284260008601826123c9565b506020830151612855602086018261255a565b506040830151612868604086018261255a565b50606083015161287b606086018261281b565b506080830151848203608086015261289382826123e9565b91505060a08301516128a860a086018261255a565b508091505092915050565b60006040820190506128c860008301856127a4565b81810360208301526128da818461282a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061291b83836123c9565b60208301905092915050565b6000602082019050919050565b600061293f826128e3565b61294981856128ee565b9350612954836128ff565b8060005b8381101561298557815161296c888261290f565b975061297783612927565b925050600181019050612958565b5085935050505092915050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b60006129cf6129ca6129c584612992565b6129aa565b61299c565b9050919050565b6129df816129b4565b82525050565b600060e0820190506129fa600083018a6127a4565b8181036020830152612a0c818961258e565b90508181036040830152612a208188612934565b90508181036060830152612a348187612934565b9050612a4360808301866127a4565b81810360a0830152612a558185611810565b9050612a6460c08301846129d6565b98975050505050505050565b600081359050612a7f81612031565b92915050565b60008060408385031215612a9c57612a9b6115df565b5b6000612aaa85828601612a70565b925050602083013567ffffffffffffffff811115612acb57612aca6115e4565b5b612ad7858286016118f8565b9150509250929050565b6000602082019050612af660008301846127a4565b92915050565b600060208284031215612b1257612b116115df565b5b6000612b2084828501611d39565b91505092915050565b7f4e656761746976652070726f6669742120000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b6000612b7082612b4f565b612b7a8185612b5a565b9350612b8a8185602086016117dd565b80840191505092915050565b6000612ba182612b29565b601182019150612bb18284612b65565b915081905092915050565b600082825260208201905092915050565b6000612bd882612b4f565b612be28185612bbc565b9350612bf28185602086016117dd565b612bfb816115f3565b840191505092915050565b60006020820190508181036000830152612c208184612bcd565b905092915050565b6000604082019050612c3d60008301856127a4565b612c4a602083018461271d565b9392505050565b600060208284031215612c6757612c666115df565b5b6000612c758482850161200a565b91505092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612cb4600e83612bbc565b9150612cbf82612c7e565b602082019050919050565b60006020820190508181036000830152612ce381612ca7565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612d20601183612bbc565b9150612d2b82612cea565b602082019050919050565b60006020820190508181036000830152612d4f81612d13565b9050919050565b600081905092915050565b6000612d6c826117c1565b612d768185612d56565b9350612d868185602086016117dd565b80840191505092915050565b6000612d9e8284612d61565b915081905092915050565b6000612dc4612dbf612dba84612992565b6129aa565b61172f565b9050919050565b612dd481612da9565b82525050565b600060a082019050612def600083018861271d565b612dfc6020830187612dcb565b8181036040830152612e0e818661258e565b9050612e1d60608301856127a4565b612e2a608083018461271d565b9695505050505050565b600067ffffffffffffffff821115612e4f57612e4e611604565b5b602082029050602081019050919050565b6000612e73612e6e84612e34565b611664565b90508083825260208201905060208402830185811115612e9657612e95611a02565b5b835b81811015612ebf5780612eab8882611d39565b845260208401935050602081019050612e98565b5050509392505050565b600082601f830112612ede57612edd6115e9565b5b8151612eee848260208601612e60565b91505092915050565b600060208284031215612f0d57612f0c6115df565b5b600082015167ffffffffffffffff811115612f2b57612f2a6115e4565b5b612f3784828501612ec9565b91505092915050565b6000608082019050612f556000830187612dcb565b8181036020830152612f67818661258e565b9050612f7660408301856127a4565b612f83606083018461271d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a7a5673fb2185e17228511e3ce8c1effa9dd3c96c3ebd75f3d69b9d5290a361f64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80630bd6430514610044578063516a00dc14610081578063920f5c84146100aa5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190611765565b6100e7565b6040516100789190611849565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906119b4565b6102fd565b005b3480156100b657600080fd5b506100d160048036038101906100cc9190611b09565b610546565b6040516100de9190611c20565b60405180910390f35b606060006060806100f66114f3565b606060008061011d6004808c5161010d9190611c6a565b8c610ad39092919063ffffffff16565b90508080602001905181019061013391906121ce565b809750819850829950839a50849b50859c505050505050506000805b87518110156101bf57600088828151811061016d5761016c6122b1565b5b60200260200101516020015114156101ac57878181518110610192576101916122b1565b5b602002602001015160600151826101a991906122e0565b91505b80806101b790612336565b91505061014f565b508981111561020c5789816101d49190611c6a565b876000815181106101e8576101e76122b1565b5b60200260200101516060018181516102009190611c6a565b91508181525050610255565b8981101561025457808a6102209190611c6a565b87600081518110610234576102336122b1565b5b602002602001015160600181815161024c91906122e0565b915081815250505b5b8787878787876040516024016102709695949392919061272c565b6040516020818303038152906040527f945bcec9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509850505050505050505092915050565b6000600167ffffffffffffffff81111561031a57610319611604565b5b6040519080825280602002602001820160405280156103485781602001602082028036833780820191505090505b509050816040015181600081518110610364576103636122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156103bb576103ba611604565b5b6040519080825280602002602001820160405280156103e95781602001602082028036833780820191505090505b509050826000015181600081518110610405576104046122b1565b5b6020026020010181815250506000600167ffffffffffffffff81111561042e5761042d611604565b5b60405190808252806020026020018201604052801561045c5781602001602082028036833780820191505090505b509050600081600081518110610475576104746122b1565b5b602002602001018181525050600033856040516020016104969291906128b3565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b815260040161050d97969594939291906129e5565b600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b505050505050505050565b60008061055161154b565b84848101906105609190612a85565b80925081935050506000816020015190506000826040015190506000600181111561058e5761058d6127b3565b5b836060015160018111156105a5576105a46127b3565b5b14156106d35760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105e69190612ae1565b602060405180830381865afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190612afc565b9050610637846080015183610bf1565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106739190612ae1565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190612afc565b6106be9190611c6a565b90506106cc83858388610dae565b5050610851565b6001808111156106e6576106e56127b3565b5b836060015160018111156106fd576106fc6127b3565b5b14156108505760008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161073e9190612ae1565b602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190612afc565b90506107a783838f8f600081811061079a576107996122b1565b5b9050602002013587610dae565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e39190612ae1565b602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612afc565b61082e9190611c6a565b905060006108408660800151836100e7565b905061084c8186610bf1565b5050505b5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161088c9190612ae1565b602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612afc565b905060008b8b60008181106108e5576108e46122b1565b5b905060200201358e8e6000818110610900576108ff6122b1565b5b9050602002013561091191906122e0565b90508181111561098a5761092f828261092a9190611c6a565b6112c8565b60405160200161093f9190612b96565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109819190612c06565b60405180910390fd5b81811015610a1d578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8783856109bb9190611c6a565b6040518363ffffffff1660e01b81526004016109d8929190612c28565b6020604051808303816000875af11580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190612c51565b505b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a78929190612c28565b6020604051808303816000875af1158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190612c51565b50600196505050505050509998505050505050505050565b606081601f83610ae391906122e0565b1015610b24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1b90612cca565b60405180910390fd5b8183610b3091906122e0565b84511015610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90612d36565b60405180910390fd5b6060821560008114610b945760405191506000825260208201604052610be5565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610bd25780518352602083019250602081019050610bb5565b50868552601f19601f8301166040525050505b50809150509392505050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c699190612ae1565b602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190612afc565b6040518363ffffffff1660e01b8152600401610cc7929190612c28565b6020604051808303816000875af1158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612c51565b50600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051610d559190612d92565b6000604051808303816000865af19150503d8060008114610d92576040519150601f19603f3d011682016040523d82523d6000602084013e610d97565b606091505b509150915081610da8578060208201fd5b50505050565b6000600267ffffffffffffffff811115610dcb57610dca611604565b5b604051908082528060200260200182016040528015610df95781602001602082028036833780820191505090505b5090508381600081518110610e1157610e106122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481600181518110610e6057610e5f6122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38360a00151856040518363ffffffff1660e01b8152600401610ed9929190612c28565b6020604051808303816000875af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190612c51565b5060008260a001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561109d57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600181518110610fb357610fb26122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166318cbafe585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b815260040161104f959493929190612dda565b6000604051808303816000875af115801561106e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110979190612ef7565b506112c0565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561121357600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260008151811061112a576111296122b1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff16637ff36ab585600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b81526004016111c59493929190612f40565b60006040518083038185885af11580156111e3573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061120d9190612ef7565b506112bf565b8073ffffffffffffffffffffffffffffffffffffffff166338ed173985600085307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518663ffffffff1660e01b8152600401611275959493929190612dda565b6000604051808303816000875af1158015611294573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112bd9190612ef7565b505b5b505050505050565b6060600060016112d7846113a0565b01905060008167ffffffffffffffff8111156112f6576112f5611604565b5b6040519080825280601f01601f1916602001820160405280156113285781602001600182028036833780820191505090505b509050600082602001820190505b600115611395578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161137f5761137e612f8c565b5b049450600085141561139057611395565b611336565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106113fe577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816113f4576113f3612f8c565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061143b576d04ee2d6d415b85acef8100000000838161143157611430612f8c565b5b0492506020810190505b662386f26fc10000831061146a57662386f26fc1000083816114605761145f612f8c565b5b0492506010810190505b6305f5e1008310611493576305f5e100838161148957611488612f8c565b5b0492506008810190505b61271083106114b85761271083816114ae576114ad612f8c565b5b0492506004810190505b606483106114db57606483816114d1576114d0612f8c565b5b0492506002810190505b600a83106114ea576001810190505b80915050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060018111156115ab576115aa6127b3565b5b815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61163c826115f3565b810181811067ffffffffffffffff8211171561165b5761165a611604565b5b80604052505050565b600061166e6115d5565b905061167a8282611633565b919050565b600067ffffffffffffffff82111561169a57611699611604565b5b6116a3826115f3565b9050602081019050919050565b82818337600083830152505050565b60006116d26116cd8461167f565b611664565b9050828152602081018484840111156116ee576116ed6115ee565b5b6116f98482856116b0565b509392505050565b600082601f830112611716576117156115e9565b5b81356117268482602086016116bf565b91505092915050565b6000819050919050565b6117428161172f565b811461174d57600080fd5b50565b60008135905061175f81611739565b92915050565b6000806040838503121561177c5761177b6115df565b5b600083013567ffffffffffffffff81111561179a576117996115e4565b5b6117a685828601611701565b92505060206117b785828601611750565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117fb5780820151818401526020810190506117e0565b8381111561180a576000848401525b50505050565b600061181b826117c1565b61182581856117cc565b93506118358185602086016117dd565b61183e816115f3565b840191505092915050565b600060208201905081810360008301526118638184611810565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118a082611875565b9050919050565b6118b081611895565b81146118bb57600080fd5b50565b6000813590506118cd816118a7565b92915050565b600281106118e057600080fd5b50565b6000813590506118f2816118d3565b92915050565b600060c0828403121561190e5761190d61186b565b5b61191860c0611664565b9050600061192884828501611750565b600083015250602061193c848285016118be565b6020830152506040611950848285016118be565b6040830152506060611964848285016118e3565b606083015250608082013567ffffffffffffffff81111561198857611987611870565b5b61199484828501611701565b60808301525060a06119a8848285016118be565b60a08301525092915050565b6000602082840312156119ca576119c96115df565b5b600082013567ffffffffffffffff8111156119e8576119e76115e4565b5b6119f4848285016118f8565b91505092915050565b600080fd5b600080fd5b60008083601f840112611a1d57611a1c6115e9565b5b8235905067ffffffffffffffff811115611a3a57611a396119fd565b5b602083019150836020820283011115611a5657611a55611a02565b5b9250929050565b60008083601f840112611a7357611a726115e9565b5b8235905067ffffffffffffffff811115611a9057611a8f6119fd565b5b602083019150836020820283011115611aac57611aab611a02565b5b9250929050565b60008083601f840112611ac957611ac86115e9565b5b8235905067ffffffffffffffff811115611ae657611ae56119fd565b5b602083019150836001820283011115611b0257611b01611a02565b5b9250929050565b600080600080600080600080600060a08a8c031215611b2b57611b2a6115df565b5b60008a013567ffffffffffffffff811115611b4957611b486115e4565b5b611b558c828d01611a07565b995099505060208a013567ffffffffffffffff811115611b7857611b776115e4565b5b611b848c828d01611a5d565b975097505060408a013567ffffffffffffffff811115611ba757611ba66115e4565b5b611bb38c828d01611a5d565b95509550506060611bc68c828d016118be565b93505060808a013567ffffffffffffffff811115611be757611be66115e4565b5b611bf38c828d01611ab3565b92509250509295985092959850929598565b60008115159050919050565b611c1a81611c05565b82525050565b6000602082019050611c356000830184611c11565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c758261172f565b9150611c808361172f565b925082821015611c9357611c92611c3b565b5b828203905092915050565b600060ff82169050919050565b611cb481611c9e565b8114611cbf57600080fd5b50565b600081519050611cd181611cab565b92915050565b600067ffffffffffffffff821115611cf257611cf1611604565b5b602082029050602081019050919050565b6000819050919050565b611d1681611d03565b8114611d2157600080fd5b50565b600081519050611d3381611d0d565b92915050565b600081519050611d4881611739565b92915050565b6000611d61611d5c8461167f565b611664565b905082815260208101848484011115611d7d57611d7c6115ee565b5b611d888482856117dd565b509392505050565b600082601f830112611da557611da46115e9565b5b8151611db5848260208601611d4e565b91505092915050565b600060a08284031215611dd457611dd361186b565b5b611dde60a0611664565b90506000611dee84828501611d24565b6000830152506020611e0284828501611d39565b6020830152506040611e1684828501611d39565b6040830152506060611e2a84828501611d39565b606083015250608082015167ffffffffffffffff811115611e4e57611e4d611870565b5b611e5a84828501611d90565b60808301525092915050565b6000611e79611e7484611cd7565b611664565b90508083825260208201905060208402830185811115611e9c57611e9b611a02565b5b835b81811015611ee357805167ffffffffffffffff811115611ec157611ec06115e9565b5b808601611ece8982611dbe565b85526020850194505050602081019050611e9e565b5050509392505050565b600082601f830112611f0257611f016115e9565b5b8151611f12848260208601611e66565b91505092915050565b600067ffffffffffffffff821115611f3657611f35611604565b5b602082029050602081019050919050565b600081519050611f56816118a7565b92915050565b6000611f6f611f6a84611f1b565b611664565b90508083825260208201905060208402830185811115611f9257611f91611a02565b5b835b81811015611fbb5780611fa78882611f47565b845260208401935050602081019050611f94565b5050509392505050565b600082601f830112611fda57611fd96115e9565b5b8151611fea848260208601611f5c565b91505092915050565b611ffc81611c05565b811461200757600080fd5b50565b60008151905061201981611ff3565b92915050565b600061202a82611875565b9050919050565b61203a8161201f565b811461204557600080fd5b50565b60008151905061205781612031565b92915050565b6000608082840312156120735761207261186b565b5b61207d6080611664565b9050600061208d84828501611f47565b60008301525060206120a18482850161200a565b60208301525060406120b584828501612048565b60408301525060606120c98482850161200a565b60608301525092915050565b600067ffffffffffffffff8211156120f0576120ef611604565b5b602082029050602081019050919050565b6000819050919050565b61211481612101565b811461211f57600080fd5b50565b6000815190506121318161210b565b92915050565b600061214a612145846120d5565b611664565b9050808382526020820190506020840283018581111561216d5761216c611a02565b5b835b8181101561219657806121828882612122565b84526020840193505060208101905061216f565b5050509392505050565b600082601f8301126121b5576121b46115e9565b5b81516121c5848260208601612137565b91505092915050565b60008060008060008061012087890312156121ec576121eb6115df565b5b60006121fa89828a01611cc2565b965050602087015167ffffffffffffffff81111561221b5761221a6115e4565b5b61222789828a01611eed565b955050604087015167ffffffffffffffff811115612248576122476115e4565b5b61225489828a01611fc5565b945050606061226589828a0161205d565b93505060e087015167ffffffffffffffff811115612286576122856115e4565b5b61229289828a016121a0565b9250506101006122a489828a01611d39565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006122eb8261172f565b91506122f68361172f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561232b5761232a611c3b565b5b828201905092915050565b60006123418261172f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561237457612373611c3b565b5b600182019050919050565b61238881611c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123c381611d03565b82525050565b6123d28161172f565b82525050565b600082825260208201905092915050565b60006123f4826117c1565b6123fe81856123d8565b935061240e8185602086016117dd565b612417816115f3565b840191505092915050565b600060a08301600083015161243a60008601826123ba565b50602083015161244d60208601826123c9565b50604083015161246060408601826123c9565b50606083015161247360608601826123c9565b506080830151848203608086015261248b82826123e9565b9150508091505092915050565b60006124a48383612422565b905092915050565b6000602082019050919050565b60006124c48261238e565b6124ce8185612399565b9350836020820285016124e0856123aa565b8060005b8581101561251c57848403895281516124fd8582612498565b9450612508836124ac565b925060208a019950506001810190506124e4565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61256381611895565b82525050565b6000612575838361255a565b60208301905092915050565b6000602082019050919050565b60006125998261252e565b6125a38185612539565b93506125ae8361254a565b8060005b838110156125df5781516125c68882612569565b97506125d183612581565b9250506001810190506125b2565b5085935050505092915050565b6125f581611c05565b82525050565b6126048161201f565b82525050565b608082016000820151612620600085018261255a565b50602082015161263360208501826125ec565b50604082015161264660408501826125fb565b50606082015161265960608501826125ec565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61269481612101565b82525050565b60006126a6838361268b565b60208301905092915050565b6000602082019050919050565b60006126ca8261265f565b6126d4818561266a565b93506126df8361267b565b8060005b838110156127105781516126f7888261269a565b9750612702836126b2565b9250506001810190506126e3565b5085935050505092915050565b6127268161172f565b82525050565b600061012082019050612742600083018961237f565b818103602083015261275481886124b9565b90508181036040830152612768818761258e565b9050612777606083018661260a565b81810360e083015261278981856126bf565b905061279961010083018461271d565b979650505050505050565b6127ad81611895565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106127f3576127f26127b3565b5b50565b6000819050612804826127e2565b919050565b6000612814826127f6565b9050919050565b61282481612809565b82525050565b600060c08301600083015161284260008601826123c9565b506020830151612855602086018261255a565b506040830151612868604086018261255a565b50606083015161287b606086018261281b565b506080830151848203608086015261289382826123e9565b91505060a08301516128a860a086018261255a565b508091505092915050565b60006040820190506128c860008301856127a4565b81810360208301526128da818461282a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061291b83836123c9565b60208301905092915050565b6000602082019050919050565b600061293f826128e3565b61294981856128ee565b9350612954836128ff565b8060005b8381101561298557815161296c888261290f565b975061297783612927565b925050600181019050612958565b5085935050505092915050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b60006129cf6129ca6129c584612992565b6129aa565b61299c565b9050919050565b6129df816129b4565b82525050565b600060e0820190506129fa600083018a6127a4565b8181036020830152612a0c818961258e565b90508181036040830152612a208188612934565b90508181036060830152612a348187612934565b9050612a4360808301866127a4565b81810360a0830152612a558185611810565b9050612a6460c08301846129d6565b98975050505050505050565b600081359050612a7f81612031565b92915050565b60008060408385031215612a9c57612a9b6115df565b5b6000612aaa85828601612a70565b925050602083013567ffffffffffffffff811115612acb57612aca6115e4565b5b612ad7858286016118f8565b9150509250929050565b6000602082019050612af660008301846127a4565b92915050565b600060208284031215612b1257612b116115df565b5b6000612b2084828501611d39565b91505092915050565b7f4e656761746976652070726f6669742120000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b6000612b7082612b4f565b612b7a8185612b5a565b9350612b8a8185602086016117dd565b80840191505092915050565b6000612ba182612b29565b601182019150612bb18284612b65565b915081905092915050565b600082825260208201905092915050565b6000612bd882612b4f565b612be28185612bbc565b9350612bf28185602086016117dd565b612bfb816115f3565b840191505092915050565b60006020820190508181036000830152612c208184612bcd565b905092915050565b6000604082019050612c3d60008301856127a4565b612c4a602083018461271d565b9392505050565b600060208284031215612c6757612c666115df565b5b6000612c758482850161200a565b91505092915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000612cb4600e83612bbc565b9150612cbf82612c7e565b602082019050919050565b60006020820190508181036000830152612ce381612ca7565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000612d20601183612bbc565b9150612d2b82612cea565b602082019050919050565b60006020820190508181036000830152612d4f81612d13565b9050919050565b600081905092915050565b6000612d6c826117c1565b612d768185612d56565b9350612d868185602086016117dd565b80840191505092915050565b6000612d9e8284612d61565b915081905092915050565b6000612dc4612dbf612dba84612992565b6129aa565b61172f565b9050919050565b612dd481612da9565b82525050565b600060a082019050612def600083018861271d565b612dfc6020830187612dcb565b8181036040830152612e0e818661258e565b9050612e1d60608301856127a4565b612e2a608083018461271d565b9695505050505050565b600067ffffffffffffffff821115612e4f57612e4e611604565b5b602082029050602081019050919050565b6000612e73612e6e84612e34565b611664565b90508083825260208201905060208402830185811115612e9657612e95611a02565b5b835b81811015612ebf5780612eab8882611d39565b845260208401935050602081019050612e98565b5050509392505050565b600082601f830112612ede57612edd6115e9565b5b8151612eee848260208601612e60565b91505092915050565b600060208284031215612f0d57612f0c6115df565b5b600082015167ffffffffffffffff811115612f2b57612f2a6115e4565b5b612f3784828501612ec9565b91505092915050565b6000608082019050612f556000830187612dcb565b8181036020830152612f67818661258e565b9050612f7660408301856127a4565b612f83606083018461271d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a7a5673fb2185e17228511e3ce8c1effa9dd3c96c3ebd75f3d69b9d5290a361f64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1073,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "lendingPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILendingPool)1959"
      },
      {
        "astId": 1075,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1078,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "WCKB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETH)2140"
      },
      {
        "astId": 1081,
        "contract": "contracts/ArbitrageSwap.sol:ArbitrageSwap",
        "label": "pCKB",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1888"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1888": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)1959": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)2140": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      }
    }
  }
}