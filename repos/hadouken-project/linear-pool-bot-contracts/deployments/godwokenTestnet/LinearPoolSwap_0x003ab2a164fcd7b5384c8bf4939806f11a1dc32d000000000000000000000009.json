{
  "address": "0xe209B40A6229B4BA2ca87f9403595586A79420D4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wrappedHTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linearPoolAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_poolId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "balancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "checkIfPoolIsOutsideRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "counter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashLoanUnwind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "counter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashLoanWind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "getBalancingOperation",
      "outputs": [
        {
          "internalType": "enum LinearPoolSwap.op",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "counter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwindXTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "counter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "windXTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f0db380c6b2d693a6e683ab9500470586481b7e2db981140886543b94050374",
  "receipt": {
    "to": null,
    "from": "0xA14d06ee65f19EA64548CA2effCc26925823827d",
    "contractAddress": "0xe209B40A6229B4BA2ca87f9403595586A79420D4",
    "transactionIndex": 0,
    "gasUsed": "406482",
    "logsBloom": "0x
    "blockHash": "0x07ed55cac06ce748e86ec65abe4bcbcfb8a994d512a2e15ece9c454281fb9798",
    "transactionHash": "0x1f0db380c6b2d693a6e683ab9500470586481b7e2db981140886543b94050374",
    "logs": [],
    "blockNumber": 1960944,
    "cumulativeGasUsed": "406482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd69FAC6C632eF023afCe7471Bda724b228237570",
    "0x72ddd1eca2af73024e0823C9a80B00de8e3f0070",
    "0x0c7F21908222098616803EfF5d054d3F4EF57EBb",
    "0x70a58262bc55fbf3965bd1c0861e3ddf1a253777",
    "0x003ab2a164fcd7b5384c8bf4939806f11a1dc32d",
    "0x003ab2a164fcd7b5384c8bf4939806f11a1dc32d000000000000000000000009"
  ],
  "numDeployments": 35,
  "solcInputHash": "0e6e72c8ae28c3bd4e65bd12878847d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedHTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linearPoolAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"balancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"checkIfPoolIsOutsideRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashLoanUnwind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashLoanWind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"getBalancingOperation\",\"outputs\":[{\"internalType\":\"enum LinearPoolSwap.op\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwindXTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"windXTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LinearPoolSwap.sol\":\"LinearPoolSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LinearPoolSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {IStaticATokenLM} from \\\"./interfaces/IStaticATokenLM.sol\\\";\\nimport {ILendingPool} from \\\"./interfaces/ILendingPool.sol\\\";\\nimport {IFlashLoanReceiver} from \\\"./interfaces/IFlashLoanReceiver.sol\\\";\\nimport {DataTypes} from \\\"./interfaces/DataTypes.sol\\\";\\nimport {ILinearPool} from \\\"./interfaces/ILinearPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract LinearPoolSwap is IFlashLoanReceiver {\\n    IVault private vault;\\n    IERC20 private token;\\n    IStaticATokenLM private wrappedHToken;\\n    bytes32 private poolId;\\n    ILendingPool private lendingPool;\\n    ILinearPool private linearPool;\\n    uint256 constant UINT256_MAX = type(uint256).max;\\n    enum op {\\n        WIND,\\n        UNWIND,\\n        NOTHING\\n    }\\n\\n    constructor(\\n        address vaultAddress,\\n        address lendingPoolAddress,\\n        address tokenAddress,\\n        address wrappedHTokenAddress,\\n        address linearPoolAddress,\\n        bytes32 _poolId\\n    ) {\\n        vault = IVault(vaultAddress);\\n        lendingPool = ILendingPool(lendingPoolAddress);\\n        token = IERC20(tokenAddress);\\n        wrappedHToken = IStaticATokenLM(wrappedHTokenAddress);\\n        linearPool = ILinearPool(linearPoolAddress);\\n        poolId = _poolId;\\n    }\\n\\n    function getBalancingOperation(\\n        uint256 threshold\\n    ) public view returns (op operation, uint256 amount) {\\n        (uint256 _lowerTarget, uint256 _upperTarget) = linearPool.getTargets();\\n        uint256 lowerTarget = (_lowerTarget / (10 ** (18 - token.decimals())));\\n        uint256 upperTarget = (_upperTarget / (10 ** (18 - token.decimals())));\\n        (uint256 balance, , , ) = vault.getPoolTokenInfo(poolId, token);\\n        uint256 midTarget = (upperTarget + lowerTarget) / 2;\\n        (uint256 avaibleToSwap, , , ) = vault.getPoolTokenInfo(\\n            poolId,\\n            wrappedHToken\\n        );\\n\\n        if (balance < lowerTarget) {\\n            operation = op.UNWIND;\\n            amount = Math.min(\\n                midTarget - balance,\\n                (avaibleToSwap * 9500) / 10000\\n            );\\n            amount = amount > threshold ? amount : 0;\\n        } else if (balance > upperTarget) {\\n            operation = op.WIND;\\n            amount = balance - midTarget;\\n        } else {\\n            operation = op.NOTHING;\\n            amount = 0;\\n        }\\n    }\\n\\n    function checkIfPoolIsOutsideRange(\\n        uint256 threshold\\n    ) public view returns (bool, uint256) {\\n        (op operation, uint256 amount) = getBalancingOperation(threshold);\\n        return (operation != op.NOTHING, amount);\\n    }\\n\\n    function balancePool(uint256 threshold) public {\\n        (op operation, uint256 amount) = getBalancingOperation(threshold);\\n        IERC20 aToken = wrappedHToken.ATOKEN();\\n        uint256 availableLiquidity = token.balanceOf(address(aToken));\\n        availableLiquidity = amount > (availableLiquidity * 30) / 100\\n            ? (availableLiquidity * 30) / 100\\n            : availableLiquidity;\\n        uint256 counter = Math.min((amount / availableLiquidity) + 1, 10);\\n\\n        uint256 amountToBorrow = amount / counter;\\n\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(token);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amountToBorrow;\\n\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        bytes memory params = abi.encode(operation, msg.sender, counter);\\n\\n        lendingPool.flashLoan(\\n            address(this),\\n            tokens,\\n            amounts,\\n            modes,\\n            address(this),\\n            params,\\n            0\\n        );\\n    }\\n\\n    function windXTimes(uint8 counter, uint256 amount) public {\\n        token.transferFrom(msg.sender, address(this), amount);\\n\\n        for (uint8 i = 0; i < counter; i++) {\\n            wind();\\n        }\\n\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    // Decrease main tokens in pool and increase wrapped tokens\\n    function wind() private {\\n        token.approve(address(wrappedHToken), UINT256_MAX);\\n\\n        wrappedHToken.deposit(\\n            address(this),\\n            token.balanceOf(address(this)),\\n            0,\\n            true\\n        );\\n        wrappedHToken.approve(address(vault), UINT256_MAX);\\n\\n        bytes memory userDataEncoded = \\\"\\\";\\n\\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\\n            poolId,\\n            IVault.SwapKind.GIVEN_IN,\\n            IAsset(address(wrappedHToken)),\\n            IAsset(address(token)),\\n            wrappedHToken.balanceOf(address(this)),\\n            userDataEncoded\\n        );\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(\\n            address(this),\\n            false,\\n            payable(address(this)),\\n            false\\n        );\\n\\n        uint256 limit = (wrappedHToken.balanceOf(address(this)) * 90) / 100;\\n        vault.swap(singleSwap, fundManagement, limit, UINT256_MAX);\\n    }\\n\\n    function unwindXTimes(uint8 counter, uint256 amount) public {\\n        token.transferFrom(msg.sender, address(this), amount);\\n\\n        for (uint8 i = 0; i < counter; i++) {\\n            unwind();\\n        }\\n\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    // Increase tokens tokens in pool and decrease wrapped tokens\\n    function unwind() private {\\n        token.approve(address(vault), UINT256_MAX);\\n\\n        bytes memory userDataEncoded = \\\"\\\";\\n\\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\\n            poolId,\\n            IVault.SwapKind.GIVEN_IN,\\n            IAsset(address(token)),\\n            IAsset(address(wrappedHToken)),\\n            token.balanceOf(address(this)),\\n            userDataEncoded\\n        );\\n        IVault.FundManagement memory fundManagement = IVault.FundManagement(\\n            address(this),\\n            false,\\n            payable(address(this)),\\n            false\\n        );\\n\\n        uint256 limit = (token.balanceOf(address(this)) * 90) / 100;\\n        vault.swap(singleSwap, fundManagement, limit, UINT256_MAX);\\n        // uint test = wrappedHToken.balanceOf(address(this));\\n        // revert(Strings.toString(test));\\n\\n        wrappedHToken.withdraw(\\n            address(this),\\n            wrappedHToken.balanceOf(address(this)),\\n            true\\n        );\\n    }\\n\\n    function flashLoanWind(uint8 counter, uint256 amount) public {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(token);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        bytes memory params = abi.encode(op.WIND, msg.sender, counter);\\n\\n        lendingPool.flashLoan(\\n            address(this),\\n            tokens,\\n            amounts,\\n            modes,\\n            address(this),\\n            params,\\n            0\\n        );\\n    }\\n\\n    // counter should be up to 10 because of gas limit\\n    function flashLoanUnwind(uint8 counter, uint256 amount) public {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(token);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        bytes memory params = abi.encode(op.UNWIND, msg.sender, counter);\\n\\n        lendingPool.flashLoan(\\n            address(this),\\n            tokens,\\n            amounts,\\n            modes,\\n            address(this),\\n            params,\\n            0\\n        );\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        op decodedData;\\n        address originalSender;\\n        uint8 counter;\\n        (decodedData, originalSender, counter) = abi.decode(\\n            params,\\n            (op, address, uint8)\\n        );\\n\\n        if (decodedData == op.WIND) {\\n            for (uint8 i = 0; i < counter; i++) {\\n                wind();\\n            }\\n        } else if (decodedData == op.UNWIND) {\\n            for (uint8 i = 0; i < counter; i++) {\\n                unwind();\\n            }\\n        }\\n\\n        uint256 currentBalance = token.balanceOf(address(this));\\n        uint256 returnValue = amounts[0] + premiums[0];\\n\\n        if (returnValue > currentBalance) {\\n            revert(\\\"Negative profit!\\\");\\n        } else if (returnValue < currentBalance) {\\n            token.transfer(originalSender, currentBalance - returnValue);\\n        }\\n\\n        token.approve(address(lendingPool), returnValue);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe6514832a1c3d6fac1ef70353230b8d180c55fa16115f25107112cf1492b1d51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/DataTypes.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115: borrow cap\\n    //bit 116-151: deposit cap\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0xdd539621d8a45a9ceb0457f4b4505610764f9a48717e55bc1bc61b8c79ec4c29\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\",\"keccak256\":\"0xcfcb6c95cb0585f218ed75617d13fbae0c0476c6f3c38d3a6882c8d69b46fad2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x02782f44dc7f633d7bde201c7e194e23460935b18d67a9a8f123d277806a687a\"},\"contracts/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf17e281db02462dae62550aef344bb57205bf02c9ad391aa3706d23b2a94436d\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport './DataTypes.sol';\\n\\ninterface ILendingPool {\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function getReserveData(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveData memory);\\n}\\n\",\"keccak256\":\"0x01a59bb54a36eb74a97902bc917c5b7848cc5df56b8e8a3ca57e6e4256f06bfa\"},\"contracts/interfaces/ILinearPool.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ILinearPool {\\n    /**\\n     * @dev Returns the Pool's main token.\\n     */\\n    function getMainToken() external view returns (IERC20);\\n\\n    /**\\n     * @dev Returns the Pool's wrapped token.\\n     */\\n    function getWrappedToken() external view returns (IERC20);\\n\\n    /**\\n     * @dev Returns the index of the Pool's BPT in the Pool tokens array (as returned by IVault.getPoolTokens).\\n     */\\n    function getBptIndex() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the index of the Pool's main token in the Pool tokens array (as returned by IVault.getPoolTokens).\\n     */\\n    function getMainIndex() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the index of the Pool's wrapped token in the Pool tokens array (as returned by\\n     * IVault.getPoolTokens).\\n     */\\n    function getWrappedIndex() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the Pool's targets for the main token balance. These values have had the main token's scaling\\n     * factor applied to them.\\n     */\\n    function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);\\n}\",\"keccak256\":\"0xe0faeb8575963c5f7e1df887ca80b27e4063517deec0ecc0ec3c5273bd7fad70\"},\"contracts/interfaces/IStaticATokenLM.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n// solhint-disable-next-line max-line-length\\n// Based on https://github.com/aave/protocol-v2/blob/ac58fea62bb8afee23f66197e8bce6d79ecda292/contracts/interfaces/IStaticATokenLM.sol\\n\\ninterface IStaticATokenLM is IERC20 {\\n    struct SignatureParams {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Deposits `ASSET` in the Aave protocol and mints static aTokens to msg.sender\\n     * @param recipient The address that will receive the static aTokens\\n     * @param amount The amount of underlying `ASSET` to deposit (e.g. deposit of 100 USDC)\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param fromUnderlying bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     **/\\n    function deposit(\\n        address recipient,\\n        uint256 amount,\\n        uint16 referralCode,\\n        bool fromUnderlying\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\\n     * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\\n     * @param amount The amount to withdraw, in static balance of StaticAToken\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     **/\\n    function withdraw(\\n        address recipient,\\n        uint256 amount,\\n        bool toUnderlying\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\\n     * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\\n     * @param amount The amount to withdraw, in dynamic balance of aToken/underlying asset\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     **/\\n    function withdrawDynamicAmount(\\n        address recipient,\\n        uint256 amount,\\n        bool toUnderlying\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Allows to deposit on Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param depositor Address from which the funds to deposit are going to be pulled\\n     * @param recipient Address that will receive the staticATokens, in the average case, same as the `depositor`\\n     * @param value The amount to deposit\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param fromUnderlying bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function metaDeposit(\\n        address depositor,\\n        address recipient,\\n        uint256 value,\\n        uint16 referralCode,\\n        bool fromUnderlying,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to withdraw from Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner Address owning the staticATokens\\n     * @param recipient Address that will receive the underlying withdrawn from Aave\\n     * @param staticAmount The amount of staticAToken to withdraw. If > 0, `dynamicAmount` needs to be 0\\n     * @param dynamicAmount The amount of underlying/aToken to withdraw. If > 0, `staticAmount` needs to be 0\\n     * @param toUnderlying bool\\n     * - `true` for the recipient to get underlying tokens (e.g. USDC)\\n     * - `false` for the recipient to get aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\\n     */\\n    function metaWithdraw(\\n        address owner,\\n        address recipient,\\n        uint256 staticAmount,\\n        uint256 dynamicAmount,\\n        bool toUnderlying,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Utility method to get the current aToken balance of an user, from his staticAToken balance\\n     * @param account The address of the user\\n     * @return uint256 The aToken balance\\n     **/\\n    function dynamicBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a static amount (scaled balance on aToken) to the aToken/underlying value,\\n     * using the current liquidity index on Aave\\n     * @param amount The amount to convert from\\n     * @return uint256 The dynamic amount\\n     **/\\n    function staticToDynamicAmount(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts an aToken or underlying amount to the what it is denominated on the aToken as\\n     * scaled balance, function of the principal and the liquidity index\\n     * @param amount The amount to convert from\\n     * @return uint256 The static (scaled) amount\\n     **/\\n    function dynamicToStaticAmount(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\\n     * as it can be considered as an ever-increasing exchange rate\\n     * @return The liquidity index\\n     **/\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Function to return a dynamic domain separator, in order to be compatible with forks changing chainId\\n     * @return bytes32 The domain separator\\n     **/\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\\n     */\\n    function collectAndUpdateRewards() external;\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param receiver The address to receive the rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        bool forceUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Claim rewards and send them to a receiver\\n     * @param receiver The address to receive the rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewards(address receiver, bool forceUpdate) external;\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param forceUpdate Flag to retrieve latest rewards from `INCENTIVES_CONTROLLER`\\n     */\\n    function claimRewardsToSelf(bool forceUpdate) external;\\n\\n    /**\\n     * @notice Get the total claimable rewards of the contract.\\n     * @return The current balance + pending rewards from the `_incentivesController`\\n     */\\n    function getTotalClaimableRewards() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total claimable rewards for a user in WAD\\n     * @param user The address of the user\\n     * @return The claimable amount of rewards in WAD\\n     */\\n    function getClaimableRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice The unclaimed rewards for a user in WAD\\n     * @param user The address of the user\\n     * @return The unclaimed amount of rewards in WAD\\n     */\\n    function getUnclaimedRewards(address user) external view returns (uint256);\\n\\n    function getAccRewardsPerToken() external view returns (uint256);\\n\\n    function getLifetimeRewardsClaimed() external view returns (uint256);\\n\\n    function getLifetimeRewards() external view returns (uint256);\\n\\n    function getLastRewardBlock() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LENDING_POOL() external returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INCENTIVES_CONTROLLER() external returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ATOKEN() external returns (IERC20);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ASSET() external returns (IERC20);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0x43c424b6246bf81669c2f130dcefbff91629adab7085d3374fe2cad23551af7b\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\nimport './IERC20.sol';\\nimport './IAsset.sol';\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0xf55f945535168ccbe8c00775358c3321a3bff038d906131a572bc1ec344019dd\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639a348cc81161005b5780639a348cc814610126578063a90a94cc14610142578063cc5814fe1461015e578063e2f4de021461017a57610088565b806316e6e8791461008d5780634f87b2b3146100a957806356618de1146100da578063920f5c84146100f6575b600080fd5b6100a760048036038101906100a29190612310565b6101ab565b005b6100c360048036038101906100be9190612350565b610413565b6040516100d19291906123a7565b60405180910390f35b6100f460048036038101906100ef9190612310565b61045a565b005b610110600480360381019061010b919061253f565b6106c3565b60405161011d919061263b565b60405180910390f35b610140600480360381019061013b9190612310565b610a54565b005b61015c60048036038101906101579190612310565b610c64565b005b61017860048036038101906101739190612350565b610e74565b005b610194600480360381019061018f9190612350565b61129f565b6040516101a29291906126cd565b60405180910390f35b6000600167ffffffffffffffff8111156101c8576101c76126f6565b5b6040519080825280602002602001820160405280156101f65781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106102305761022f612725565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff811115610287576102866126f6565b5b6040519080825280602002602001820160405280156102b55781602001602082028036833780820191505090505b50905082816000815181106102cd576102cc612725565b5b6020026020010181815250506000600167ffffffffffffffff8111156102f6576102f56126f6565b5b6040519080825280602002602001820160405280156103245781602001602082028036833780820191505090505b50905060008160008151811061033d5761033c612725565b5b602002602001018181525050600080338760405160200161036093929190612772565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b81526004016103d99796959493929190612a11565b600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b50505050505050505050565b6000806000806104228561129f565b9150915060028081111561043957610438612656565b5b82600281111561044c5761044b612656565b5b141581935093505050915091565b6000600167ffffffffffffffff811115610477576104766126f6565b5b6040519080825280602002602001820160405280156104a55781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106104df576104de612725565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff811115610536576105356126f6565b5b6040519080825280602002602001820160405280156105645781602001602082028036833780820191505090505b509050828160008151811061057c5761057b612725565b5b6020026020010181815250506000600167ffffffffffffffff8111156105a5576105a46126f6565b5b6040519080825280602002602001820160405280156105d35781602001602082028036833780820191505090505b5090506000816000815181106105ec576105eb612725565b5b60200260200101818152505060006001338760405160200161061093929190612772565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b81526004016106899796959493929190612a11565b600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50505050505050505050565b60008060008085858101906106d89190612aff565b809350819450829550505050600060028111156106f8576106f7612656565b5b83600281111561070b5761070a612656565b5b14156107435760005b8160ff168160ff16101561073d5761072a6116de565b808061073590612b81565b915050610714565b5061079f565b6001600281111561075757610756612656565b5b83600281111561076a57610769612656565b5b141561079e5760005b8160ff168160ff16101561079c57610789611d21565b808061079490612b81565b915050610773565b505b5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107fc9190612bab565b602060405180830381865afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190612bdb565b905060008a8a600081811061085557610854612725565b5b905060200201358d8d60008181106108705761086f612725565b5b905060200201356108819190612c08565b9050818111156108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90612cbb565b60405180910390fd5b8181101561097b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8583856109199190612cdb565b6040518363ffffffff1660e01b8152600401610936929190612d0f565b6020604051808303816000875af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190612d64565b505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109fa929190612d0f565b6020604051808303816000875af1158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190612d64565b506001955050505050509998505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ab393929190612d91565b6020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190612d64565b5060005b8260ff168160ff161015610b2357610b106116de565b8080610b1b90612b81565b915050610afa565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bbe9190612bab565b602060405180830381865afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190612bdb565b6040518363ffffffff1660e01b8152600401610c1c929190612d0f565b6020604051808303816000875af1158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f9190612d64565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610cc393929190612d91565b6020604051808303816000875af1158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d069190612d64565b5060005b8260ff168160ff161015610d3357610d20611d21565b8080610d2b90612b81565b915050610d0a565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dce9190612bab565b602060405180830381865afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190612bdb565b6040518363ffffffff1660e01b8152600401610e2c929190612d0f565b6020604051808303816000875af1158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190612d64565b505050565b600080610e808361129f565b915091506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351c0e0616040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f199190612e06565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401610f789190612bab565b602060405180830381865afa158015610f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb99190612bdb565b90506064601e82610fca9190612e33565b610fd49190612ebc565b8311610fe05780610ffa565b6064601e82610fef9190612e33565b610ff99190612ebc565b5b905060006110206001838661100f9190612ebc565b6110199190612c08565b600a61227e565b9050600081856110309190612ebc565b90506000600167ffffffffffffffff81111561104f5761104e6126f6565b5b60405190808252806020026020018201604052801561107d5781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106110b7576110b6612725565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff81111561110e5761110d6126f6565b5b60405190808252806020026020018201604052801561113c5781602001602082028036833780820191505090505b509050828160008151811061115457611153612725565b5b6020026020010181815250506000600167ffffffffffffffff81111561117d5761117c6126f6565b5b6040519080825280602002602001820160405280156111ab5781602001602082028036833780820191505090505b5090506000816000815181106111c4576111c3612725565b5b60200260200101818152505060008933876040516020016111e793929190612eed565b6040516020818303038152906040529050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30868686308760006040518863ffffffff1660e01b81526004016112609796959493929190612a11565b600060405180830381600087803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b505050505050505050505050505050565b600080600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363fe3b566040518163ffffffff1660e01b81526004016040805180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190612f24565b915091506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc9190612f79565b60126113d89190612fa6565b600a6113e4919061310d565b836113ef9190612ebc565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612f79565b60126114909190612fa6565b600a61149c919061310d565b836114a79190612ebc565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b05f8e48600354600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161152b9291906131c6565b608060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c9190613204565b50505090506000600284846115819190612c08565b61158b9190612ebc565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b05f8e48600354600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161160f92919061328c565b608060405180830381865afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190613204565b5050509050848310156116a9576001985061169083836116709190612cdb565b61271061251c846116819190612e33565b61168b9190612ebc565b61227e565b97508988116116a05760006116a2565b875b97506116d2565b838311156116c8576000985081836116c19190612cdb565b97506116d1565b60029850600097505b5b50505050505050915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161177d929190612d0f565b6020604051808303816000875af115801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c09190612d64565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2cab8730600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161185b9190612bab565b602060405180830381865afa158015611878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189c9190612bdb565b600060016040518563ffffffff1660e01b81526004016118bf94939291906132b5565b6020604051808303816000875af11580156118de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119029190612bdb565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016119a0929190612d0f565b6020604051808303816000875af11580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190612d64565b50600060405180602001604052806000815250905060006040518060c00160405280600354815260200160006001811115611a2157611a20612656565b5b8152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611afd9190612bab565b602060405180830381865afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e9190612bdb565b8152602001838152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250905060006064605a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c019190612bab565b602060405180830381865afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190612bdb565b611c4c9190612e33565b611c569190612ebc565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352bbbe298484847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518563ffffffff1660e01b8152600401611cd794939291906134b8565b6020604051808303816000875af1158015611cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1a9190612bdb565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611dbe929190612d0f565b6020604051808303816000875af1158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e019190612d64565b50600060405180602001604052806000815250905060006040518060c00160405280600354815260200160006001811115611e3f57611e3e612656565b5b8152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f1b9190612bab565b602060405180830381865afa158015611f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5c9190612bdb565b8152602001838152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250905060006064605a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161201f9190612bab565b602060405180830381865afa15801561203c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120609190612bdb565b61206a9190612e33565b6120749190612ebc565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352bbbe298484847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518563ffffffff1660e01b81526004016120f594939291906134b8565b6020604051808303816000875af1158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121389190612bdb565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ead5d35930600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121d39190612bab565b602060405180830381865afa1580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122149190612bdb565b60016040518463ffffffff1660e01b815260040161223493929190613504565b60408051808303816000875af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190612f24565b505050505050565b600081831061228d578161228f565b825b905092915050565b600080fd5b600080fd5b600060ff82169050919050565b6122b7816122a1565b81146122c257600080fd5b50565b6000813590506122d4816122ae565b92915050565b6000819050919050565b6122ed816122da565b81146122f857600080fd5b50565b60008135905061230a816122e4565b92915050565b6000806040838503121561232757612326612297565b5b6000612335858286016122c5565b9250506020612346858286016122fb565b9150509250929050565b60006020828403121561236657612365612297565b5b6000612374848285016122fb565b91505092915050565b60008115159050919050565b6123928161237d565b82525050565b6123a1816122da565b82525050565b60006040820190506123bc6000830185612389565b6123c96020830184612398565b9392505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123f5576123f46123d0565b5b8235905067ffffffffffffffff811115612412576124116123d5565b5b60208301915083602082028301111561242e5761242d6123da565b5b9250929050565b60008083601f84011261244b5761244a6123d0565b5b8235905067ffffffffffffffff811115612468576124676123d5565b5b602083019150836020820283011115612484576124836123da565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124b68261248b565b9050919050565b6124c6816124ab565b81146124d157600080fd5b50565b6000813590506124e3816124bd565b92915050565b60008083601f8401126124ff576124fe6123d0565b5b8235905067ffffffffffffffff81111561251c5761251b6123d5565b5b602083019150836001820283011115612538576125376123da565b5b9250929050565b600080600080600080600080600060a08a8c03121561256157612560612297565b5b60008a013567ffffffffffffffff81111561257f5761257e61229c565b5b61258b8c828d016123df565b995099505060208a013567ffffffffffffffff8111156125ae576125ad61229c565b5b6125ba8c828d01612435565b975097505060408a013567ffffffffffffffff8111156125dd576125dc61229c565b5b6125e98c828d01612435565b955095505060606125fc8c828d016124d4565b93505060808a013567ffffffffffffffff81111561261d5761261c61229c565b5b6126298c828d016124e9565b92509250509295985092959850929598565b60006020820190506126506000830184612389565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061269657612695612656565b5b50565b60008190506126a782612685565b919050565b60006126b782612699565b9050919050565b6126c7816126ac565b82525050565b60006040820190506126e260008301856126be565b6126ef6020830184612398565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61275d816124ab565b82525050565b61276c816122a1565b82525050565b600060608201905061278760008301866126be565b6127946020830185612754565b6127a16040830184612763565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127de816124ab565b82525050565b60006127f083836127d5565b60208301905092915050565b6000602082019050919050565b6000612814826127a9565b61281e81856127b4565b9350612829836127c5565b8060005b8381101561285a57815161284188826127e4565b975061284c836127fc565b92505060018101905061282d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61289c816122da565b82525050565b60006128ae8383612893565b60208301905092915050565b6000602082019050919050565b60006128d282612867565b6128dc8185612872565b93506128e783612883565b8060005b838110156129185781516128ff88826128a2565b975061290a836128ba565b9250506001810190506128eb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561295f578082015181840152602081019050612944565b8381111561296e576000848401525b50505050565b6000601f19601f8301169050919050565b600061299082612925565b61299a8185612930565b93506129aa818560208601612941565b6129b381612974565b840191505092915050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b60006129fb6129f66129f1846129be565b6129d6565b6129c8565b9050919050565b612a0b816129e0565b82525050565b600060e082019050612a26600083018a612754565b8181036020830152612a388189612809565b90508181036040830152612a4c81886128c7565b90508181036060830152612a6081876128c7565b9050612a6f6080830186612754565b81810360a0830152612a818185612985565b9050612a9060c0830184612a02565b98975050505050505050565b60038110612aa957600080fd5b50565b600081359050612abb81612a9c565b92915050565b6000612acc8261248b565b9050919050565b612adc81612ac1565b8114612ae757600080fd5b50565b600081359050612af981612ad3565b92915050565b600080600060608486031215612b1857612b17612297565b5b6000612b2686828701612aac565b9350506020612b3786828701612aea565b9250506040612b48868287016122c5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b8c826122a1565b915060ff821415612ba057612b9f612b52565b5b600182019050919050565b6000602082019050612bc06000830184612754565b92915050565b600081519050612bd5816122e4565b92915050565b600060208284031215612bf157612bf0612297565b5b6000612bff84828501612bc6565b91505092915050565b6000612c13826122da565b9150612c1e836122da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c5357612c52612b52565b5b828201905092915050565b600082825260208201905092915050565b7f4e656761746976652070726f6669742100000000000000000000000000000000600082015250565b6000612ca5601083612c5e565b9150612cb082612c6f565b602082019050919050565b60006020820190508181036000830152612cd481612c98565b9050919050565b6000612ce6826122da565b9150612cf1836122da565b925082821015612d0457612d03612b52565b5b828203905092915050565b6000604082019050612d246000830185612754565b612d316020830184612398565b9392505050565b612d418161237d565b8114612d4c57600080fd5b50565b600081519050612d5e81612d38565b92915050565b600060208284031215612d7a57612d79612297565b5b6000612d8884828501612d4f565b91505092915050565b6000606082019050612da66000830186612754565b612db36020830185612754565b612dc06040830184612398565b949350505050565b6000612dd3826124ab565b9050919050565b612de381612dc8565b8114612dee57600080fd5b50565b600081519050612e0081612dda565b92915050565b600060208284031215612e1c57612e1b612297565b5b6000612e2a84828501612df1565b91505092915050565b6000612e3e826122da565b9150612e49836122da565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e8257612e81612b52565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ec7826122da565b9150612ed2836122da565b925082612ee257612ee1612e8d565b5b828204905092915050565b6000606082019050612f0260008301866126be565b612f0f6020830185612754565b612f1c6040830184612398565b949350505050565b60008060408385031215612f3b57612f3a612297565b5b6000612f4985828601612bc6565b9250506020612f5a85828601612bc6565b9150509250929050565b600081519050612f73816122ae565b92915050565b600060208284031215612f8f57612f8e612297565b5b6000612f9d84828501612f64565b91505092915050565b6000612fb1826122a1565b9150612fbc836122a1565b925082821015612fcf57612fce612b52565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b60018511156130315780860481111561300d5761300c612b52565b5b600185161561301c5780820291505b808102905061302a85612fda565b9450612ff1565b94509492505050565b60008261304a5760019050613106565b816130585760009050613106565b816001811461306e5760028114613078576130a7565b6001915050613106565b60ff84111561308a57613089612b52565b5b8360020a9150848211156130a1576130a0612b52565b5b50613106565b5060208310610133831016604e8410600b84101617156130dc5782820a9050838111156130d7576130d6612b52565b5b613106565b6130e98484846001612fe7565b92509050818404811115613100576130ff612b52565b5b81810290505b9392505050565b6000613118826122da565b9150613123836122a1565b92506131507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461303a565b905092915050565b6000819050919050565b61316b81613158565b82525050565b600061318c6131876131828461248b565b6129d6565b61248b565b9050919050565b600061319e82613171565b9050919050565b60006131b082613193565b9050919050565b6131c0816131a5565b82525050565b60006040820190506131db6000830185613162565b6131e860208301846131b7565b9392505050565b6000815190506131fe816124bd565b92915050565b6000806000806080858703121561321e5761321d612297565b5b600061322c87828801612bc6565b945050602061323d87828801612bc6565b935050604061324e87828801612bc6565b925050606061325f878288016131ef565b91505092959194509250565b600061327682613193565b9050919050565b6132868161326b565b82525050565b60006040820190506132a16000830185613162565b6132ae602083018461327d565b9392505050565b60006080820190506132ca6000830187612754565b6132d76020830186612398565b6132e46040830185612a02565b6132f16060830184612389565b95945050505050565b61330381613158565b82525050565b6002811061331a57613319612656565b5b50565b600081905061332b82613309565b919050565b600061333b8261331d565b9050919050565b61334b81613330565b82525050565b600061335c82613193565b9050919050565b61336c81613351565b82525050565b600082825260208201905092915050565b600061338e82612925565b6133988185613372565b93506133a8818560208601612941565b6133b181612974565b840191505092915050565b600060c0830160008301516133d460008601826132fa565b5060208301516133e76020860182613342565b5060408301516133fa6040860182613363565b50606083015161340d6060860182613363565b5060808301516134206080860182612893565b5060a083015184820360a08601526134388282613383565b9150508091505092915050565b61344e8161237d565b82525050565b61345d81612ac1565b82525050565b60808201600082015161347960008501826127d5565b50602082015161348c6020850182613445565b50604082015161349f6040850182613454565b5060608201516134b26060850182613445565b50505050565b600060e08201905081810360008301526134d281876133bc565b90506134e16020830186613463565b6134ee60a0830185612398565b6134fb60c0830184612398565b95945050505050565b60006060820190506135196000830186612754565b6135266020830185612398565b6135336040830184612389565b94935050505056fea2646970667358221220544b114347417272eca27326557327f3d9f14c96211bb9ced3b99e9101a705de64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1065,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "vault",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVault)2765"
      },
      {
        "astId": 1068,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)2241"
      },
      {
        "astId": 1071,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "wrappedHToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStaticATokenLM)2609"
      },
      {
        "astId": 1073,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "poolId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1076,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "lendingPool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ILendingPool)2312"
      },
      {
        "astId": 1079,
        "contract": "contracts/LinearPoolSwap.sol:LinearPoolSwap",
        "label": "linearPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ILinearPool)2357"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2241": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)2312": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ILinearPool)2357": {
        "encoding": "inplace",
        "label": "contract ILinearPool",
        "numberOfBytes": "20"
      },
      "t_contract(IStaticATokenLM)2609": {
        "encoding": "inplace",
        "label": "contract IStaticATokenLM",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)2765": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}