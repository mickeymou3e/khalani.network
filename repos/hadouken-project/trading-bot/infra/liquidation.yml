Transform: AWS::Serverless-2016-10-31

Parameters:
  KMSKeyArn:
    Type: String
  SecretsArnUs:
    Type: String
  DiscordWebhookUrl:
    Type: String
    Description: 'Discord webhook URL to send notifications to'
  LiquidationSentryDsn:
    Type: String
    Description: 'Sentry DSN to send errors to'

Resources:
  LiquidationStateFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./trading-bot.zip
      Handler: dist/src/lambdaEntrypoint.liquidationEntrypoint
      MemorySize: 512
      Runtime: 'nodejs16.x'
      Timeout: 60
      Tracing: Active

      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'kms:Sign'
                - 'kms:GetPublicKey'
              Resource: !Ref KMSKeyArn
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource: !Ref SecretsArnUs
      Environment:
        Variables:
          NO_COLOR: 'true'
          DISCORD_WEBHOOK_URL: !Ref DiscordWebhookUrl
          KMS_KEY_ARN: !Ref KMSKeyArn
          SENTRY_DSN: !Ref LiquidationSentryDsn
      Events:
        ReceiveEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - 'aws.states'
              detail-type:
                - 'Step Functions Execution Status Change'
              detail:
                status:
                  - 'FAILED'
                  - 'ABORTED'
                  - 'TIMED_OUT'

  LiquidationBotStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: ValidateInput
        States:
          ValidateInput:
            Type: Task
            Resource: !GetAtt LiquidationStateFunctionHandler.Arn
            Parameters:
              'stateMachineName.$': '$$.StateMachine.Name'
              'stateName.$': '$$.State.Name'
              'chainId.$': '$.chainId'
            ResultPath: '$'
            Next: InitializeCounter

          InitializeCounter:
            Type: Pass
            Result:
              'value': 0
            ResultPath: '$.counter'
            Next: FindUserToLiquidate

          FindUserToLiquidate:
            Type: Task
            Resource: !GetAtt LiquidationStateFunctionHandler.Arn
            Parameters:
              'stateName.$': '$$.State.Name'
              'chainId.$': '$.chainId'
            ResultPath: '$.userToLiquidate'
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                  - States.Timeout
                IntervalSeconds: 10
                MaxAttempts: 10
                BackoffRate: 10
            Next: CheckLiquidationOpportunity

          CheckLiquidationOpportunity:
            Type: Choice
            Choices:
              - Variable: '$.userToLiquidate'
                IsNull: false
                Next: LiquidateUser
            Default: WaitForNextIteration

          LiquidateUser:
            Type: Task
            Resource: !GetAtt LiquidationStateFunctionHandler.Arn
            Parameters:
              'stateName.$': '$$.State.Name'
              'collateralToken.$': '$.userToLiquidate.collateralToken'
              'debtToken.$': '$.userToLiquidate.debtToken'
              'userAddress.$': '$.userToLiquidate.userAddress'
              'amount.$': '$.userToLiquidate.amount'
              'chainId.$': '$.chainId'
            Catch:
              - ErrorEquals:
                  - States.TaskFailed
                ResultPath: null
                Next: WaitForNextIteration
            ResultPath: '$.sentTransaction'
            Next: GetTxReceipt

          GetTxReceipt:
            Type: Task
            Resource: !GetAtt LiquidationStateFunctionHandler.Arn
            Parameters:
              'stateName.$': '$$.State.Name'
              'txHash.$': '$.sentTransaction.txHash'
              'chainId.$': '$.chainId'
            ResultPath: '$.txReceipt'
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                  - States.Timeout
                IntervalSeconds: 30
                MaxAttempts: 5
                BackoffRate: 10
            Next: CheckIfReceiptIsReady

          CheckIfReceiptIsReady:
            Type: Choice
            Choices:
              - Variable: '$.txReceipt'
                IsNull: true
                Next: WaitForTransactionMine
            Default: ProcessTxReceipt

          ProcessTxReceipt:
            Type: Task
            Resource: !GetAtt LiquidationStateFunctionHandler.Arn
            Parameters:
              'stateName.$': '$$.State.Name'
              'txReceipt.$': '$.txReceipt'
              'collateralToken.$': '$.userToLiquidate.collateralToken'
              'debtToken.$': '$.userToLiquidate.debtToken'
              'userAddress.$': '$.userToLiquidate.userAddress'
              'amount.$': '$.userToLiquidate.amount'
              'chainId.$': '$.chainId'
            ResultPath: null
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                  - States.Timeout
                IntervalSeconds: 10
                MaxAttempts: 2
                BackoffRate: 10
            Next: WaitForNextIteration

          WaitForNextIteration:
            Type: Wait
            Seconds: 300
            Next: IncreaseCounter

          IncreaseCounter:
            Type: Pass
            Parameters:
              'value.$': 'States.MathAdd($.counter.value, 1)'
            ResultPath: '$.counter'
            Next: CheckMaximumNumberOfIterations

          CheckMaximumNumberOfIterations:
            Type: Choice
            Choices:
              - Variable: '$.counter.value'
                NumericGreaterThan: 500
                Next: GetCurrentExecutionId
            Default: FindUserToLiquidate

          GetCurrentExecutionId:
            Type: Pass
            Parameters:
              'executionNumber.$': "States.StringToJson(States.ArrayGetItem(States.StringSplit($$.Execution.Name, '-'), 2))"

            ResultPath: '$.nextExecutionInfo'
            Next: GenerateNextExecutionName

          GenerateNextExecutionName:
            Type: Pass
            Parameters:
              'nextExecutionName.$': "States.Format('{}-{}-{}', States.ArrayGetItem(States.StringSplit($$.Execution.Name, '-'), 0), States.ArrayGetItem(States.StringSplit($$.Execution.Name, '-'), 1), States.MathAdd($.nextExecutionInfo.executionNumber, 1))"
            ResultPath: '$.nextExecutionInfo'
            Next: RepeatFunctionExecution

          RepeatFunctionExecution:
            Type: Task
            Resource: arn:aws:states:::states:startExecution
            Parameters:
              Input:
                'chainId.$': '$.chainId'
                'AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$': '$$.Execution.Id'
              'StateMachineArn.$': '$$.StateMachine.Id'
              'Name.$': '$.nextExecutionInfo.nextExecutionName'
            End: true

          WaitForTransactionMine:
            Type: Wait
            Seconds: 10
            Next: GetTxReceipt

      Tracing:
        Enabled: true
      Role: !GetAtt [StatesExecutionRole, Arn]

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: '*'

Outputs:
  LiquidationStateMachineArn:
    Value: !Ref LiquidationBotStateMachine
