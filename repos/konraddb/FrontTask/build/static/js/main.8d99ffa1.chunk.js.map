{"version":3,"sources":["components/staking.tsx","web3/connector.tsx","theme.ts","App.tsx","index.tsx"],"names":["Web3Utils","require","UNISWAP_BONDUSDC_ADDR","RegExp","Staking","context","useWeb3Context","useState","poolValue","setPoolValue","tokensAmount","setTokensAmount","userAddress","setUserAddress","bondPrice","setBondPrice","yearlyReward","setYearlyReward","apy","setApy","showData","setShowData","invalidAddress","setInvalidAddress","uniswap_contract","library","eth","Contract","uniswap_bondusdc","barnbridge_contract","barnbridge_staking","useEffect","a","methods","getReserves","call","err","result","bondReserves","usdcReserves","totalSupply","updateState","Paper","sx","padding","display","flexDirection","gap","minWidth","Typography","variant","textAlign","Box","component","p","border","borderRadius","backgroundColor","justifyContent","color","marginLeft","Button","size","onClick","TextField","id","label","helperText","error","onChange","event","inputValue","target","value","isAddress","alignItems","marginTop","balanceOf","Activator","setConnector","active","defaultTheme","createTheme","palette","mode","text","secondary","shape","components","MuiButton","styleOverrides","sizeLarge","NetworkOnlyConnector","Connectors","App","connectors","Infura","providerURL","libraryName","web3Api","Web3","ThemeProvider","theme","Container","maxWidth","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"obAeMA,EAAYC,EAAQ,MAIpBC,EAAwB,6CAKP,IAAIC,OAAO,uBAKnB,SAASC,IACtB,IAAMC,EAAUC,2BADgB,EAEAC,mBAAS,GAFT,mBAE3BC,EAF2B,KAEhBC,EAFgB,OAGIF,mBAAS,GAHb,gCAIQA,mBAAS,IAJjB,mBAIzBG,EAJyB,KAIXC,EAJW,OAKMJ,mBAAiB,IALvB,mBAKzBK,EALyB,KAKZC,EALY,OAMEN,mBAAiB,GANnB,mBAMzBO,EANyB,KAMdC,EANc,OAOQR,mBAAiB,GAPzB,mBAOzBS,EAPyB,KAOXC,EAPW,OAQVV,mBAAiB,GARP,mBAQzBW,EARyB,KAQpBC,EARoB,OASAZ,oBAAkB,GATlB,mBASzBa,EATyB,KASfC,EATe,OAUYd,oBAAkB,GAV9B,mBAUzBe,EAVyB,KAUTC,EAVS,KAY5BC,EAAmB,IAAInB,EAAQoB,QAAQC,IAAIC,SAC7CC,EACA1B,GAEE2B,EAAsB,IAAIxB,EAAQoB,QAAQC,IAAIC,SAChDG,EA5B4B,8CAgC9BC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sDAGER,EAAiBS,QACdC,cACAC,MAAK,SAACC,EAAUC,GAKf,IAAIC,EAAeD,EAAO,GAAP,SAAY,GAAM,IACjCE,EAAeF,EAAO,GAAP,SAAY,GAAM,GAErCtB,EADgBuB,EAAeC,GAE/B9B,EAA4B,EAAf8B,MAGjBf,EAAiBS,QACdO,cACAL,MAAK,SAACC,EAAUC,GACf1B,EAAgB0B,EAAM,SAAG,GAAM,QApBrC,4CADc,uBAAC,WAAD,wBAwBdI,KACC,IAyBH,OACE,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,YACTC,QAAS,OACTC,cAAe,SACfC,IAAK,EACLC,SAAU,KANd,UASE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,SAAnC,wBAGE/B,EA0BA,qCACE,eAACgC,EAAA,EAAD,CACEC,UAAU,OACVV,GAAI,CACFW,EAAG,EACHC,OAAQ,qBACRC,aAAc,MACdC,gBAAiB,WANrB,UASE,eAACL,EAAA,EAAD,CAAKP,QAAQ,OAAOa,eAAe,gBAAnC,UACE,cAACT,EAAA,EAAD,CAAYE,UAAU,SAASQ,MAAM,iBAArC,kCAGA,cAACV,EAAA,EAAD,CAAYE,UAAU,SAASR,GAAI,CAAEiB,WAAY,GAAjD,SACG5C,OAGL,eAACoC,EAAA,EAAD,CAAKP,QAAQ,OAAOa,eAAe,gBAAnC,UACE,cAACT,EAAA,EAAD,CAAYE,UAAU,SAASQ,MAAM,iBAArC,kBAGA,cAACV,EAAA,EAAD,CAAYE,UAAU,SAASR,GAAI,CAAEiB,WAAY,GAAjD,SACG1C,UAIP,cAAC2C,EAAA,EAAD,CACEX,QAAQ,YACRY,KAAK,QACLC,QAAS,kBAAM1C,GAAY,IAH7B,oCApDF,qCACE,cAAC2C,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,mBACNhB,QAAQ,WACRiB,WAAY7C,EAAiB,sBAAwB,GACrD8C,MAAO9C,EACP+C,SAjCgB,SAACC,GACzB,IAAMC,EAAaD,EAAME,OAAOC,MAChC5D,EAAe0D,GACfhD,GAAmBvB,EAAU0E,UAAUH,OAgCjC,eAACnB,EAAA,EAAD,CAAKP,QAAQ,OAAOC,cAAc,SAAS6B,WAAW,SAAtD,UACE,cAAC,IAAD,CAAkBhB,MAAM,YACxB,cAACV,EAAA,EAAD,CACEU,MAAM,iBACNR,UAAU,SACVR,GAAI,CAAEiC,UAAW,GAHnB,uDASF,cAACf,EAAA,EAAD,CAAQX,QAAQ,YAAYY,KAAK,QAAQC,QAxC5B,WACdzC,GAhBLO,EAAoBI,QACjB4C,UAAUjE,EAAaV,GACvBiC,MAAK,SAACC,EAAUC,GACfpB,EAAgBT,GAAa6B,EAAS3B,IACtCS,EAAQH,GAxDW,MAwD0BF,GAAc,KAC3DO,GAAY,OAkDV,6BClIK,SAASyD,IACtB,IAAMzE,EAAUC,2BAQhB,OANAyB,qBAAU,WAER1B,EAAQ0E,aAAa,YACpB,IAGE1E,EAAQ2E,QAAW3E,EAAQ+D,MAErB/D,EAAQ+D,MACV,wCAEA,cAAChE,EAAD,IAJA,8C,aCZE6E,EAAeC,YAAY,CACtCC,QAAS,CACPC,KAAM,OACNC,KAAM,CACJC,UAAW,YAGfC,MAAO,CACL/B,aAAc,GAEhBgC,WAAY,CACVC,UAAW,CACTC,eAAgB,CACdC,UAAW,CACT/C,QAAS,SCNXgD,EAAyBC,aAAzBD,qBAkCOE,MAhCf,WACE,IAKMC,EAAa,CAAEC,OALN,IAAIJ,EAAqB,CACtCK,YACE,mEAKJ,OACE,8BACE,cAAC,IAAD,CACEF,WAAYA,EACZG,YAAa,UACbC,QAASC,IAHX,SAKE,cAACC,EAAA,EAAD,CAAeC,MAAOrB,EAAtB,SACE,cAACsB,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACpD,EAAA,EAAD,CACEP,QAAQ,OACR8B,WAAW,SACXjB,eAAe,SACf+C,OAAO,QAJT,SAME,cAAC3B,EAAD,eC/Bd4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8d99ffa1.chunk.js","sourcesContent":["import { Box, Button, Paper, TextField, Typography } from \"@mui/material\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useWeb3Context } from \"web3-react\";\r\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\r\n\r\n// BarnBridge Staking Contract:\r\n//  - https://etherscan.io/address/0xb0fa2beee3cf36a7ac7e99b885b48538ab364853#readContract\r\n\r\n// Uniswap LP Token Contract:\r\n//  - https://etherscan.io/address/0x6591c4bcd6d7a1eb4e537da8b78676c1576ba244#readContract\r\n\r\n//importing the interfaces of the smart contracts\r\nimport barnbridge_staking from \"./contract-interfaces/barnbridge_staking.json\";\r\nimport uniswap_bondusdc from \"./contract-interfaces/uniswap_bondusdc.json\";\r\n\r\nconst Web3Utils = require(\"web3-utils\");\r\n\r\n//defining the addresses at which the contracts are deployed\r\nconst BARNBRIDGE_STAKING_ADDR = \"0xb0Fa2BeEe3Cf36a7Ac7E99B885b48538Ab364853\";\r\nconst UNISWAP_BONDUSDC_ADDR = \"0x6591c4BcD6D7A1eb4E537DA8B78676C1576Ba244\";\r\n\r\n//defining the address of our test user\r\nconst USER_ADDR = \"0xb91b0e319af35145871a364f24d55f01f30c615f\";\r\n\r\nconst ETH_ADDR_REGEX = new RegExp(\"^0[xX][0-9a-fA-F]*$\");\r\n\r\n//Each Week 20'000 BOND Tokens are issued as rewards\r\nconst BOND_ISSUED_YEARLY = 20000 * 52;\r\n\r\nexport default function Staking() {\r\n  const context = useWeb3Context();\r\n  let [poolValue, setPoolValue] = useState(0);\r\n  let [userBalance, setUserBalance] = useState(0);\r\n  const [tokensAmount, setTokensAmount] = useState(0);\r\n  const [userAddress, setUserAddress] = useState<string>(\"\");\r\n  const [bondPrice, setBondPrice] = useState<number>(0);\r\n  const [yearlyReward, setYearlyReward] = useState<number>(0);\r\n  const [apy, setApy] = useState<number>(0);\r\n  const [showData, setShowData] = useState<boolean>(false);\r\n  const [invalidAddress, setInvalidAddress] = useState<boolean>(false);\r\n\r\n  let uniswap_contract = new context.library.eth.Contract(\r\n    uniswap_bondusdc,\r\n    UNISWAP_BONDUSDC_ADDR\r\n  );\r\n  let barnbridge_contract = new context.library.eth.Contract(\r\n    barnbridge_staking,\r\n    BARNBRIDGE_STAKING_ADDR\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function updateState() {\r\n      // The getReserves method returns the amount of BOND tokens and the amount of USDC tokens\r\n      // in the pool\r\n      uniswap_contract.methods\r\n        .getReserves()\r\n        .call((err: any, result: number[]) => {\r\n          // Uniswap liquidity pools have two sides, in this case BOND and USDC, the USD value of the two\r\n          // sides is always equal, so we can get the amount of USDC in the pool and multiply it by 2\r\n          // to get the total USD value of the pool\r\n\r\n          let bondReserves = result[0] / 10 ** 18; // adjusting for 18 decimals positions\r\n          let usdcReserves = result[1] / 10 ** 6; // adjusting for 6 decimals positions\r\n          let bondPrice = bondReserves / usdcReserves; // get price of BOND from pool reserves;\r\n          setBondPrice(bondPrice);\r\n          setPoolValue(usdcReserves * 2);\r\n        });\r\n\r\n      uniswap_contract.methods\r\n        .totalSupply()\r\n        .call((err: any, result: number) => {\r\n          setTokensAmount(result / 10 ** 18);\r\n        });\r\n    }\r\n    updateState();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    // We get the amount of LP Tokens the user staked in the barnbridge contract\r\n    barnbridge_contract.methods\r\n      .balanceOf(userAddress, UNISWAP_BONDUSDC_ADDR)\r\n      .call((err: any, result: number) => {\r\n        setYearlyReward(poolValue * (result / tokensAmount));\r\n        setApy((yearlyReward / (BOND_ISSUED_YEARLY / bondPrice)) * 100);\r\n        setShowData(true);\r\n      });\r\n  };\r\n\r\n  const handleInputChange = (event: any) => {\r\n    const inputValue = event.target.value;\r\n    setUserAddress(inputValue);\r\n    setInvalidAddress(!Web3Utils.isAddress(inputValue));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!invalidAddress) {\r\n      getData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        padding: \"3rem 2rem\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: 4,\r\n        minWidth: 500,\r\n      }}\r\n    >\r\n      <Typography variant=\"h4\" textAlign=\"center\">\r\n        Barnbridge\r\n      </Typography>\r\n      {!showData ? (\r\n        <>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Ethereum address\"\r\n            variant=\"outlined\"\r\n            helperText={invalidAddress ? \"Invalid ETH address\" : \"\"}\r\n            error={invalidAddress}\r\n            onChange={handleInputChange}\r\n          />\r\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n            <InfoOutlinedIcon color=\"primary\" />\r\n            <Typography\r\n              color=\"text.secondary\"\r\n              textAlign=\"center\"\r\n              sx={{ marginTop: 1 }}\r\n            >\r\n              Enter address and confirm to show data\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Button variant=\"contained\" size=\"large\" onClick={handleSubmit}>\r\n            Show data\r\n          </Button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            component=\"span\"\r\n            sx={{\r\n              p: 2,\r\n              border: \"2px dashed #90caf9\",\r\n              borderRadius: \"8px\",\r\n              backgroundColor: \"#121212\",\r\n            }}\r\n          >\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Typography textAlign=\"center\" color=\"text.secondary\">\r\n                Yearly Rewards Paid:\r\n              </Typography>\r\n              <Typography textAlign=\"center\" sx={{ marginLeft: 1 }}>\r\n                {yearlyReward}\r\n              </Typography>\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Typography textAlign=\"center\" color=\"text.secondary\">\r\n                APY:\r\n              </Typography>\r\n              <Typography textAlign=\"center\" sx={{ marginLeft: 1 }}>\r\n                {apy}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            onClick={() => setShowData(false)}\r\n          >\r\n            Try another address\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Paper>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useWeb3Context } from \"web3-react\";\r\nimport Staking from \"../components/staking\";\r\n\r\nexport default function Activator() {\r\n  const context = useWeb3Context();\r\n\r\n  useEffect(() => {\r\n    //connect to Etehreum Network through Infura\r\n    context.setConnector(\"Infura\");\r\n  }, []);\r\n\r\n  // Wait untill connection is established, then display Staking component\r\n  if (!context.active && !context.error) {\r\n    return <div>Loading ...</div>;\r\n  } else if (context.error) {\r\n    return <div>Error</div>;\r\n  } else {\r\n    return <Staking></Staking>;\r\n  }\r\n}\r\n","import { createTheme } from \"@mui/material/styles\";\r\n\r\nexport const defaultTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n    text: {\r\n      secondary: \"#484D4E\",\r\n    },\r\n  },\r\n  shape: {\r\n    borderRadius: 8,\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        sizeLarge: {\r\n          padding: 12,\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Web3Provider from \"web3-react\";\r\nimport { Connectors } from \"web3-react\";\r\nimport Web3 from \"web3\";\r\nimport { Box, Container, ThemeProvider } from \"@mui/material\";\r\n\r\nimport Activator from \"./web3/connector\";\r\nimport { defaultTheme } from \"./theme\";\r\n\r\nconst { NetworkOnlyConnector } = Connectors;\r\n\r\nfunction App() {\r\n  const Infura = new NetworkOnlyConnector({\r\n    providerURL:\r\n      \"https://mainnet.infura.io/v3/581996b3a5b944949630f2535e9bb59b\",\r\n  });\r\n\r\n  const connectors = { Infura };\r\n\r\n  return (\r\n    <div>\r\n      <Web3Provider\r\n        connectors={connectors}\r\n        libraryName={\"web3.js\"}\r\n        web3Api={Web3}\r\n      >\r\n        <ThemeProvider theme={defaultTheme}>\r\n          <Container maxWidth=\"sm\">\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              height=\"100vh\"\r\n            >\r\n              <Activator />\r\n            </Box>\r\n          </Container>\r\n        </ThemeProvider>\r\n      </Web3Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}