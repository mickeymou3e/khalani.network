// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {AssetReserves} from "../src/event_system/apps/bridge/AssetReserves.sol";
import {EventVerifier} from "../src/event_system/EventVerifier.sol";
import {IERC20} from "openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol";

contract WithdrawSimulation is Test {
    // Contract and addresses
    address constant assetReservesContract = 0x489c4fF4625a80C2d02FCFd29CBabA1e964551F0;
    AssetReserves assetReserves;
    EventVerifier eventVerifier;

    address constant arcadiaMailbox = 0x16626CD24Fd1F228a031e48B77602Ae25f8930dB;
    address constant arcadiaEventVerifier = 0x699331F08e1C267197fFf2776824a25BacaC69c1;
    address constant spokeToken = 0x4722ce3A7195dEe57CeC78eDf5Ac9c542fbc4626;
    address constant owner = 0xc13113E56E00050327Be3AD164185103541f1903; // Owner address
    uint256 constant amount = 1 ether;
    address user = 0xc13113E56E00050327Be3AD164185103541f1903;

    function setUp() public {
        assetReserves = AssetReserves(assetReservesContract);
        eventVerifier = EventVerifier(payable(arcadiaEventVerifier));
    }

    function testDepositOnSpokeChain() public {
        vm.deal(user, 0.1 ether);
        bytes memory _calldata = hex"684141270000000000000000000000004722ce3a7195dee57cec78edf5ac9c542fbc46260000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000041786f6e0000000000000000000000000000000000000000000000000000000067800ecc0000000000000000000000000000000000000000000000000000000067801cdc00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041ea16d6e5b2e9716bd0a1f4465d81b28b4525ffc81f537dfc68a24126a53fbf891f847e11b56ec42e65490530abee86ae53c0ced557b5105a4585a0ec9e800c3a1c00000000000000000000000000000000000000000000000000000000000000";

        vm.prank(user);
        (bool success, bytes memory returnData) = address(assetReserves).call{value: 0.1 ether, gas: 5000000}(_calldata);

        require(success, string(returnData));
    }

    function testHandleOnHubChain() public {
        vm.prank(arcadiaMailbox);
        vm.deal(arcadiaMailbox, 0.1 ether);

        bytes memory _calldata = hex"7c39d1300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a500000010000000a5000000a5000000a50000001000000095000000000000000000000000000000000000000098aae089cad930c64a76dd2247a2ac5773a4b8ce50b6e964e47e1201118fecb45810f6026cb13fb528c9ff01eed54d22a3d28f0500001d996637d578a4f9499810c4750cc257e73014c0abb7e7a47de9ab7440b3da78712f4184c0e1248f17a035fca182b14cb1d619e3be50edf4a2f0b5fed579cdc56dec1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018d0300001da60000426800000000000000000000000066ae1d85982529b6cab8885babd53de35a1a828941786f6e000000000000000000000000699331f08e1c267197fff2776824a25bacac69c100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001a324854b95533629579e718ee8495dc219bc7b60000000000000000000000000000000000000000000000000000000000004268a9aadfb3174f3e4169a1420fd724f12d588298c0c9812d43c25077cfe5605315000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000004722ce3a7195dee57cec78edf5ac9c542fbc46260000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000c13113e56e00050327be3ad164185103541f1903000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000";
        (bool success, bytes memory returnData) = address(eventVerifier).call{value: 0.1 ether, gas: 5000000}(_calldata);

        require(success, string(returnData));
    }
}

// forge test -vvvv --fork-url https://1rpc.io/holesky --fork-block-number 3111386 --match-test testDepositOnSpokeChain
// forge test -vvvv --fork-url https://rpc.khalani.network --fork-block-number 2997253 --match-test testHandleOnHubChain