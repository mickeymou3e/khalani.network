name: Build and Push RfqUI

on:
  push:
    branches: ["production-release"]
env:
  REGISTRY: 124996922767.dkr.ecr.us-east-1.amazonaws.com
  PUSH_DOCKER: true
  IMAGE_NAME: exchange-rfq-ui
  AWS_REGION: us-east-1
  APP_NAME: RFQ-UI

jobs:
  setup-env-vars:
    runs-on: ubuntu-latest
    outputs:
      REGISTRY: ${{ steps.setvars.outputs.REGISTRY }}
      ENV: ${{ steps.setvars.outputs.ENV }}
    steps:
      - name: Set variables
        id: setvars
        run: |
      
          if [[ "${{github.base_ref}}" == "production-release" || "${{github.ref}}" == "refs/heads/production-release" ]]; then
              echo "ENV=prod" >> $GITHUB_OUTPUT
          fi


  cancel-previous:
    name: "Cancel Previous Runs"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}
  unique_id:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.unique_id.outputs.IMAGE_TAG }}
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "IMAGE_TAG=$(uuidgen)" >> $GITHUB_OUTPUT


  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id, setup-env-vars]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.REGISTRY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.REGISTRY_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}        

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_ACCESS_KEY_ID }}
          password: ${{ secrets.REGISTRY_SECRET_ACCESS_KEY }}

      # This step outputs Docker labels and Docker tag associated with github.ref
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Checkout code
        uses: actions/checkout@v2


      - name: Prepare env file
        id: env
        run: |

            cp CI/.env.${{ needs.setup-env-vars.outputs.ENV }} .env


      # When running on master branch Docker images with unique id and latest.
      # To be changed later and adjusted
      # Add branch name to latest tag from ${GITHUB_REF##*/}
      - name: Setup Docker tags
        id: tags
        run: |
          
          echo "PRODUCTION_IMAGE_TAG=$(date +'%Y-%m-%d')-${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Build and push
        run: |

          # Get the list of tags from the previous step's output
          PRODUCTION_IMAGE_TAG="${{ steps.tags.outputs.PRODUCTION_IMAGE_TAG }}"

          # Build
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PRODUCTION_IMAGE_TAG .
          # Push
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PRODUCTION_IMAGE_TAG

          CHECK_IF_IMAGE_EXISTS="$( aws ecr describe-images --repository-name=${{ env.IMAGE_NAME }} --image-ids=imageTag=$PRODUCTION_IMAGE_TAG 2> /dev/null )"
          if [[ $? == 0 ]]; then
              IMAGE_TAGS="$( echo ${CHECK_IF_IMAGE_EXISTS} | jq '.imageDetails[0].imageTags[0]' -r )"
              echo "${{ env.IMAGE_NAME }}:$PRODUCTION_IMAGE_TAG found"
          else
              echo "${{ env.IMAGE_NAME }}:$PRODUCTION_IMAGE_TAG not found"
              exit 1
          fi

          bash CI/send_slack_notification.sh "$PRODUCTION_IMAGE_TAG" "$APP_NAME" "$SLACK_WEBHOOK_URL"
        env:
          APP_NAME: ${{ env.APP_NAME }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}                 
