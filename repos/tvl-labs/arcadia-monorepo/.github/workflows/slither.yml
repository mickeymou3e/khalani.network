name: Slither Analysis

on:
  pull_request:
    paths:
      - "contracts/**"

permissions:
  contents: write
  pull-requests: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Check forge version
        run: forge --version

      - name: Install Slither
        run: |
          sudo apt-get update
          # If you need a system solc:
          # sudo apt-get install -y solc
          sudo apt-get install -y python3-pip
          pip3 install slither-analyzer

      - name: Run Slither
        run: |
          # If Slither returns a nonzero exit code when findings are present,
          # we can add `|| true` so the workflow won't fail automatically.
          slither . \
            --checklist \
            --markdown-root $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/blob/$GITHUB_SHA/ \
            > slither_report.md 2>&1 || true
        working-directory: contracts

      - name: Post Slither report as PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const header = '# Slither Report';

            // Read the output file
            const body = fs.readFileSync('contracts/slither_report.md', 'utf8');

            // Split the report into chunks of 50000 characters
            const chunkSize = 50000;
            const chunks = [];
            for (let i = 0; i < body.length; i += chunkSize) {
              chunks.push(body.slice(i, i + chunkSize));
            }

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });

            // Delete existing Slither report comments
            for (const comment of comments) {
              if (comment.body.startsWith(header)) {
                await github.rest.issues.deleteComment({
                  ...context.repo,
                  comment_id: comment.id,
                });
              }
            }

            // Post each chunk as a separate comment
            for (let i = 0; i < chunks.length; i++) {
              const chunkHeader = `${header} (Part ${i + 1}/${chunks.length})\n\n`;
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: chunkHeader + chunks[i],
              });
            }
