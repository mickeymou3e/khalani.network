load "nat-less"
load "nat-div"
define [* < <=] := [N.*  N.< N.<=]
define [zero one two] := [N.zero N.one (S N.one)]
define [n m x y z] := [?n ?m ?x ?y ?z]


declare fact: [N] -> N [[int->nat]]

assert fact-def := [
    (fact zero = one)
    (fact one = one)
    (forall n . fact (S n) = (S n) * (fact n))
]

transform-output eval [nat->int]

# (eval (fact 3)) # 6
# (eval (fact 9)) # 362880


define proof-goal := (forall n m . n < m <==> (fact n) < (fact m))


# -------------------------------- Part 3 --------------------------------

# First, let's see if it can be auto-proven. If it can be proven, this should be quick. If it is taking a while for
# something this simple, it is likely that the prover is not going to generate a proof.
# If it does generate the proof, then we know that it is provable from the current set of assumptions in scope.
# In this case, we can then attempt to prove it inline and perhaps extract the proof to a reusable proof method, which often
# can reduce proving time.

# Go ahead and try it then move to part 4

# NOTICE: If you do not have the vampire automated theorem prover installed, then `vprove-from` should be replaced with `prove` (which uses SPASS by default)
# if you have neither installed, copy this and follow along through the athena playground at https://tryathena.org (which has both automated theorem provers installed)

# conclude proof-goal
#     (!vprove-from proof-goal (ab))

# -------------------------------- Part 4 --------------------------------

# let's start with a simpler proof goal.
define proof-goal := (forall x . fact x <= fact S x)
#(!vprove-from proof-goal (ab))

# Try this  out. the proof should complete quickly.

# I recommend commenting out the line that calls the automated theorem provers (ATP) after you run it once, since it still adds a few seconds of execution time and is inconvneient.




# Since the natural numbers are inductively defined, and since the relation we are trying to prove is primarily about an *ordering* 
# (for which induction is particularly suitable), we begin by attempting a proof by induction.
# Inductive proofs in athena will induct over the first variable in the quantified sentence we are attempting to prove (in this case, n)
# Each *case* in the inductive proof is expected to be represented by a clause in the induction body.
# Natural numbers have two cases: zero | (S n), so this proof body will require a proof for the base case (zero) and one for non-zero numbers


# --- COMMENTED OUT AND MOVED TO PART 5 SECTION ------

# by-induction proof-goal {
#     zero => (!force (fact zero <= fact S zero))
#     | (n as (S m)) => (!force (fact S m <= fact S S m))
# }




# Note also the use of !force.
# This !force is useful for proof development because it allows us to literally force the runtime to accept the conclusion based on 
# whatever premise or premises are in scope. It is analogous to using `todo!()` within a function body in Rust lang.
# The reason we do this here is because it allows us to check whether or not we have even written the correct conclusions in the first place.
#   inductive proofs expect wellformed conclusions. These are generated based on the proof goal in conjunction with the inductive data type(s) over which the proof goal
#   is defined
# If Athena accepts the above proof with the use of !force, it means that the !force'd sentences are the correct conclusions.
# And it tends to be easier to write a proof when we know what we are proving in the first place!

# Go ahead and run Athena over this proof before moving onto part 5.



# -------------------------------- Part 5--------------------------------

define two := (S S zero)
define divides := N.divides
define cancellation := N.Div.cancellation
define / := N./

# Trichotomy1 is a property of natural numbers proven in athena's nat-less library, loaded in at the top of this file
# (forall m n . ~ n <= m ==> m < n)
define trichotomy := N.Less=.trichotomy1
# (forall m n . ~ n < m ==>  m <= n)
define trichotomy2 := N.Less=.trichotomy2
# (forall x y z . x <= y & y <= z ==> x <= z)
define transitive := N.Less=.transitive
define discrete := N.Less=.discrete
define Implied-by-<  := N.Less=.Implied-by-< 
# define left-nonzero := (forall x y . (S y) * x = x + y * x)
define left-nonzero := N.Times.left-nonzero

# define zero<        := (forall n . n =/= zero <==> zero < n)
define zero< := N.Less.zero<
#   (forall y z x . zero < x & x * y < x * z ==> y < z)
define <-cancellation := N.Times.<-cancellation
# define no-zero-divisors := 
#  (forall x y . x * y = zero ==> x = zero | y = zero) 
define no-zero-divisors := N.Times.no-zero-divisors

#define S-not-zero     := (forall n . (S n) =/= zero)
define S-not-zero := N.S-not-zero
# define nonzero-S := 
#   (forall n . n =/= zero ==> (exists m . n = (S m)))
define nonzero-S := N.nonzero-S

define zero<factx := (forall x . zero < (fact x))

by-induction zero<factx {
    zero => conclude (zero < (fact zero))
            (!chain-> [
                true ==>
                (zero < (S zero)) 
                ==> (zero < one) [(one = (S zero))]
                ==> (zero < (fact zero)) [(fact zero = one)]
                
            ])
    | (n as (S m)) => conclude inductive_step := (zero < (fact (S m)))
                        let {
                            ih := (zero < (fact m));
                            _ := (!claim ih);
                            m-cases := (!chain-> [
                                true 
                                ==> (zero <= m)
                                ==> (zero < m | zero = m) [N.Less=.<=-def]
                            ]);
                            zero-lte-fm := (!chain-> [
                                ih ==> (zero <= (fact m)) [Implied-by-< ]
                            ])
                        }
                        (!cases m-cases 
                            assume (zero < m)
                                let {
                                    sm-non-zero := conclude (S m =/= zero)
                                        (!chain-> [
                                            true ==> ((S m) =/= zero) [S-not-zero]
                                        ]); 
                                    fm-not-zero := conclude (fact m =/= zero)
                                        (!chain-> [
                                            ih ==> (fact m =/= zero) [zero<]
                                        ]);
                                    sm-x-fm-not-zero := conclude (fact m =/= zero & S m =/= zero)
                                        (!both fm-not-zero sm-non-zero);
                                    not-sm-z-and-not-fm-z := conclude conc := ((~ fact m = zero) & (~ S m = zero))
                                        (!chain-> [
                                            sm-x-fm-not-zero ==> conc
                                        ]);
                                    sm-x-fm-not-zero := conclude conc := (~ (S m * fact m) = zero)
                                        let {
                                            fact-m-is-Sy := (!chain-> [fm-not-zero ==> (exists y . fact m = S y) [nonzero-S]])
                                        }
                                        pick-witness y for fact-m-is-Sy
                                            let {
                                                sy := (!claim (fact m = S y))
                                            }
                                            (!by-contradiction conc
                                                assume contra := (~ conc)
                                                let {
                                                    # (S m * fact m) = zero
                                                    neg_removed := (!dn contra);
                                                    smzero_or_syzero := (!chain-> [
                                                        neg_removed ==> (S m * S y = zero) [sy]
                                                        ==> (S m = zero | S y = zero) [no-zero-divisors]
                                                    ])
                                                }
                                                    (!cases smzero_or_syzero
                                                        assume smz := (S m = zero)
                                                            let {
                                                                sm-not-zero := (!chain-> [
                                                                    true ==> (S m =/= zero) [S-not-zero]
                                                                    ==> (~ S m = zero)
                                                                ])
                                                            }
                                                            (!absurd smz sm-not-zero)
                                                        assume syz := (S y = zero)
                                                            let {
                                                                sy-not-zero := (!chain-> [
                                                                    true ==> (S y =/= zero) [S-not-zero]
                                                                    ==> (~ S y = zero)
                                                                ])
                                                            }
                                                            (!absurd syz sy-not-zero)
                                                    )
                                            )

                                }
                                (!chain-> [
                                    sm-x-fm-not-zero ==> (S m * fact m =/= zero)
                                    ==> (zero < (S m * fact m)) [zero<]
                                    ==> (zero < (fact S m))     [fact-def]
                                ])
                               
                            assume (zero = m)
                                (!chain-> [
                                    true
                                    ==> (zero < one)
                                    ==> (zero < (fact one)) [((fact one) = one)]
                                    ==> (zero < (fact (S zero))) [(one = S zero)]
                                    ==> (zero < (fact S m))  [(zero = m)]

                                    
                                ])
                        
                        )                    
}


by-induction proof-goal {
    zero => conclude (fact zero <= fact S zero)
                (!chain-> [
                    (fact zero)
                    = one 
                    = (fact one)
                    ==> (fact zero <= fact one)   [N.Less=.<=-def]
                    ==> (fact zero <= fact S zero)
                ])
    | (n as (S m)) => conclude conclusion := (fact S m <= fact S S m)
                        let {inductive_hypothesis := (fact m <= fact S m); _ := (!claim inductive_hypothesis)}
                        (!by-contradiction conclusion
                            assume negated_conclusion := (~ conclusion)
                                let {
                                    
                                    augment-with-inequality := method (p) 
                                        let {
                                            zero-lt-factm := conclude (zero < fact m)
                                                (!uspec zero<factx m)
                                        }
                                        (!chain-> [
                                            zero-lt-factm ==> (zero-lt-factm & p) [augment]
                                        ]);

                                    augment-with-lt := method (p) 
                                         let {
                                            zero-lt-sm := conclude (zero < S m)
                                                (!uspec (forall x . zero < S x) m)
                                        }
                                        (!chain-> [
                                            zero-lt-sm ==> (zero-lt-sm & p) [augment]
                                        ])
                                }
                                (!chain-> [
                                        negated_conclusion
                                    
                                        ==> ((fact S S m) < (fact S m)) [trichotomy]
                                        ==> ((S S m * fact S m) < (fact S m)) [fact-def]
                                        ==> ((S S m * (S m * fact m)) < S m * fact m) [fact-def]
                                        ==> (((S S m * S m) * fact m) < S m * fact m) [N.Times.associative]
                                        ==> ((fact m) * (S S m * S m) < S m * fact m) [N.Times.commutative]
                                        ==> ((fact m) * (S S m * S m) < (fact m) * S m) [N.Times.commutative]
                                        ==> ((zero < (fact m)) & ((fact m) * (S S m * S m) < (fact m) * S m)) [augment-with-inequality]
                                        ==> (S S m * S m < S m) [ <-cancellation]
                                        ==> (S m * S S m < S m) [N.Times.commutative]
                                        ==> (S m * S S m < S m * one) [N.Times.right-one]
                                        ==> (zero < S m & (S m * S S m < S m * one)) [augment-with-lt]
                                        ==> (S S m < one) [<-cancellation]
                                        ==> (S S m < S zero)
                                        ==> (S m < zero)
                                        ==> (~ zero < S m)
                                        ==> ((zero < S m) & (~ zero < S m)) [augment-with-lt]
                                        ==> false (method (p) (!absurd (!left-and p) (!right-and p)))
                                    ])
                        )
}

