{{ $count := (add .Values.chainsCount 1 | int) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: graph-node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: graph-node
  serviceName: graph-node
  template:
    metadata:
      annotations:
        reloader.stakater.com/auto: "true"
      labels:
        app: graph-node
    spec:
      serviceAccountName: {{ include "graph-node.serviceAccountName" . }}
      containers:
        - name: graph-node
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: postgres_host
              value: {{ required "Postgres Host" .Values.postgresHost }}
            - name: postgres_db
              value: graphnode
            - name: postgres_user
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: postgres_user
            - name: postgres_pass
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: postgres_pass
            {{- range untilStep 1 $count 1}}
            - name: Chain{{ . }}Name
              valueFrom:
                secretKeyRef:
                  name: connection-urls
                  key: Chain{{ . }}Name
            - name: Chain{{ . }}RpcUrl
              valueFrom:
                secretKeyRef:
                  name: connection-urls
                  key: Chain{{ . }}RpcUrl
            {{- end }}
            - name: ipfs
              value: http://ipfs:10125
            - name: ethereum
              value: "{{ range untilStep 1 $count 1}}$(Chain{{ . }}Name):no_eip1898,archive,traces:$(Chain{{ . }}RpcUrl){{- if not (eq . (sub $count 1)) -}}{{" "}}{{- end -}}{{- end }}"
          envFrom:
            - configMapRef:
                name: graph-node-config
          ports:
            - containerPort: 8000
              protocol: TCP
            - containerPort: 8001
              protocol: TCP
            - containerPort: 8020
              protocol: TCP
            - containerPort: 8030
              protocol: TCP
            - containerPort: 8040
              protocol: TCP
          resources:
            requests:
              cpu: 1000m
              memory: 4G
            limits:
              cpu: 2000m
              memory: 6G
          volumeMounts:
            - name: secrets-store-inline # The volume mount is required for the Sync With Kubernetes Secrets
              mountPath: "/mnt/secrets-store"
              readOnly: true
            - name: secrets-store-inline-connection-urls
              mountPath: "/mnt/secrets-store-connection-urls"
              readOnly: true
          
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "db-secret-class"
        - name: secrets-store-inline-connection-urls
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "connection-urls-class"